node {
  name: "tensors/component_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "OneShotIterator"
  op: "OneShotIterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dataset_factory"
    value {
      func {
        name: "_make_dataset_7Dqox50wAsA"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "OneShotIterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "OneShotIterator"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_INT32
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "scaling_flux/preprocess/truediv/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "scaling_flux/preprocess/truediv"
  op: "RealDiv"
  input: "IteratorGetNext:2"
  input: "scaling_flux/preprocess/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "scaling_flux/preprocess/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "scaling_flux/preprocess/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "scaling_flux/preprocess/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "scaling_flux/preprocess/strided_slice"
  op: "StridedSlice"
  input: "scaling_flux/preprocess/truediv"
  input: "scaling_flux/preprocess/strided_slice/stack"
  input: "scaling_flux/preprocess/strided_slice/stack_1"
  input: "scaling_flux/preprocess/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 14
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "scaling_flux/preprocess/truediv_1"
  op: "RealDiv"
  input: "IteratorGetNext:5"
  input: "scaling_flux/preprocess/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "scaling_flux/preprocess/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "scaling_flux/preprocess/sub"
  op: "Sub"
  input: "scaling_flux/preprocess/truediv_1"
  input: "scaling_flux/preprocess/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "scaling_flux/preprocess_1/truediv/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "scaling_flux/preprocess_1/truediv"
  op: "RealDiv"
  input: "IteratorGetNext:2"
  input: "scaling_flux/preprocess_1/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "scaling_flux/preprocess_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "scaling_flux/preprocess_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "scaling_flux/preprocess_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "scaling_flux/preprocess_1/strided_slice"
  op: "StridedSlice"
  input: "scaling_flux/preprocess_1/truediv"
  input: "scaling_flux/preprocess_1/strided_slice/stack"
  input: "scaling_flux/preprocess_1/strided_slice/stack_1"
  input: "scaling_flux/preprocess_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 14
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "scaling_flux/preprocess_1/truediv_1"
  op: "RealDiv"
  input: "IteratorGetNext:4"
  input: "scaling_flux/preprocess_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "scaling_flux/preprocess_1/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "scaling_flux/preprocess_1/sub"
  op: "Sub"
  input: "scaling_flux/preprocess_1/truediv_1"
  input: "scaling_flux/preprocess_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "scaling_flux/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "scaling_flux/mul"
  op: "Mul"
  input: "IteratorGetNext:3"
  input: "scaling_flux/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "scaling_flux/sub/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "scaling_flux/sub"
  op: "Sub"
  input: "scaling_flux/mul"
  input: "scaling_flux/sub/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "scaling_flux/preprocess_1/sub"
  input: "scaling_flux/sub"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\002\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_1/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 33
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_1/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_1/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Initializer/random_normal"
  op: "Add"
  input: "generator/encoder_1/conv2d/kernel/Initializer/random_normal/mul"
  input: "generator/encoder_1/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 2
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Assign"
  op: "Assign"
  input: "generator/encoder_1/conv2d/kernel"
  input: "generator/encoder_1/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/read"
  op: "Identity"
  input: "generator/encoder_1/conv2d/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Assign"
  op: "Assign"
  input: "generator/encoder_1/conv2d/bias"
  input: "generator/encoder_1/conv2d/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/read"
  op: "Identity"
  input: "generator/encoder_1/conv2d/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/Conv2D"
  op: "Conv2D"
  input: "concat"
  input: "generator/encoder_1/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "generator/encoder_1/conv2d/Conv2D"
  input: "generator/encoder_1/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/encoder_2/lrelu/Identity"
  op: "Identity"
  input: "generator/encoder_1/conv2d/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "generator/encoder_2/lrelu/mul"
  op: "Mul"
  input: "generator/encoder_2/lrelu/mul/x"
  input: "generator/encoder_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/lrelu/Abs"
  op: "Abs"
  input: "generator/encoder_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "generator/encoder_2/lrelu/mul_1"
  op: "Mul"
  input: "generator/encoder_2/lrelu/mul_1/x"
  input: "generator/encoder_2/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/lrelu/add"
  op: "Add"
  input: "generator/encoder_2/lrelu/mul"
  input: "generator/encoder_2/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_2/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 56
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_2/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_2/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Initializer/random_normal"
  op: "Add"
  input: "generator/encoder_2/conv2d/kernel/Initializer/random_normal/mul"
  input: "generator/encoder_2/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Assign"
  op: "Assign"
  input: "generator/encoder_2/conv2d/kernel"
  input: "generator/encoder_2/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/read"
  op: "Identity"
  input: "generator/encoder_2/conv2d/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Assign"
  op: "Assign"
  input: "generator/encoder_2/conv2d/bias"
  input: "generator/encoder_2/conv2d/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/read"
  op: "Identity"
  input: "generator/encoder_2/conv2d/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/Conv2D"
  op: "Conv2D"
  input: "generator/encoder_2/lrelu/add"
  input: "generator/encoder_2/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "generator/encoder_2/conv2d/Conv2D"
  input: "generator/encoder_2/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 72
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal"
  op: "Add"
  input: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "generator/encoder_2/batch_normalization/gamma"
  input: "generator/encoder_2/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/read"
  op: "Identity"
  input: "generator/encoder_2/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Assign"
  op: "Assign"
  input: "generator/encoder_2/batch_normalization/beta"
  input: "generator/encoder_2/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/read"
  op: "Identity"
  input: "generator/encoder_2/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "generator/encoder_2/batch_normalization/moving_mean"
  input: "generator/encoder_2/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "generator/encoder_2/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "generator/encoder_2/batch_normalization/moving_variance"
  input: "generator/encoder_2/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "generator/encoder_2/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "generator/encoder_2/conv2d/BiasAdd"
  input: "generator/encoder_2/batch_normalization/gamma/read"
  input: "generator/encoder_2/batch_normalization/beta/read"
  input: "generator/encoder_2/batch_normalization/Const"
  input: "generator/encoder_2/batch_normalization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/encoder_2/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/encoder_2/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/encoder_2/batch_normalization/moving_mean/read"
  input: "generator/encoder_2/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/encoder_2/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/encoder_2/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "generator/encoder_2/batch_normalization/moving_mean"
  input: "generator/encoder_2/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/encoder_2/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/encoder_2/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/encoder_2/batch_normalization/moving_variance/read"
  input: "generator/encoder_2/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/encoder_2/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/encoder_2/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "generator/encoder_2/batch_normalization/moving_variance"
  input: "generator/encoder_2/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_3/lrelu/Identity"
  op: "Identity"
  input: "generator/encoder_2/batch_normalization/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "generator/encoder_3/lrelu/mul"
  op: "Mul"
  input: "generator/encoder_3/lrelu/mul/x"
  input: "generator/encoder_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/lrelu/Abs"
  op: "Abs"
  input: "generator/encoder_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "generator/encoder_3/lrelu/mul_1"
  op: "Mul"
  input: "generator/encoder_3/lrelu/mul_1/x"
  input: "generator/encoder_3/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/lrelu/add"
  op: "Add"
  input: "generator/encoder_3/lrelu/mul"
  input: "generator/encoder_3/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_3/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 114
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_3/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_3/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Initializer/random_normal"
  op: "Add"
  input: "generator/encoder_3/conv2d/kernel/Initializer/random_normal/mul"
  input: "generator/encoder_3/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Assign"
  op: "Assign"
  input: "generator/encoder_3/conv2d/kernel"
  input: "generator/encoder_3/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/read"
  op: "Identity"
  input: "generator/encoder_3/conv2d/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Assign"
  op: "Assign"
  input: "generator/encoder_3/conv2d/bias"
  input: "generator/encoder_3/conv2d/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/read"
  op: "Identity"
  input: "generator/encoder_3/conv2d/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/Conv2D"
  op: "Conv2D"
  input: "generator/encoder_3/lrelu/add"
  input: "generator/encoder_3/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "generator/encoder_3/conv2d/Conv2D"
  input: "generator/encoder_3/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 130
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal"
  op: "Add"
  input: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "generator/encoder_3/batch_normalization/gamma"
  input: "generator/encoder_3/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/read"
  op: "Identity"
  input: "generator/encoder_3/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Assign"
  op: "Assign"
  input: "generator/encoder_3/batch_normalization/beta"
  input: "generator/encoder_3/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/read"
  op: "Identity"
  input: "generator/encoder_3/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "generator/encoder_3/batch_normalization/moving_mean"
  input: "generator/encoder_3/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "generator/encoder_3/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "generator/encoder_3/batch_normalization/moving_variance"
  input: "generator/encoder_3/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "generator/encoder_3/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "generator/encoder_3/conv2d/BiasAdd"
  input: "generator/encoder_3/batch_normalization/gamma/read"
  input: "generator/encoder_3/batch_normalization/beta/read"
  input: "generator/encoder_3/batch_normalization/Const"
  input: "generator/encoder_3/batch_normalization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/encoder_3/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/encoder_3/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/encoder_3/batch_normalization/moving_mean/read"
  input: "generator/encoder_3/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/encoder_3/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/encoder_3/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "generator/encoder_3/batch_normalization/moving_mean"
  input: "generator/encoder_3/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/encoder_3/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/encoder_3/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/encoder_3/batch_normalization/moving_variance/read"
  input: "generator/encoder_3/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/encoder_3/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/encoder_3/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "generator/encoder_3/batch_normalization/moving_variance"
  input: "generator/encoder_3/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_4/lrelu/Identity"
  op: "Identity"
  input: "generator/encoder_3/batch_normalization/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "generator/encoder_4/lrelu/mul"
  op: "Mul"
  input: "generator/encoder_4/lrelu/mul/x"
  input: "generator/encoder_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/lrelu/Abs"
  op: "Abs"
  input: "generator/encoder_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "generator/encoder_4/lrelu/mul_1"
  op: "Mul"
  input: "generator/encoder_4/lrelu/mul_1/x"
  input: "generator/encoder_4/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/lrelu/add"
  op: "Add"
  input: "generator/encoder_4/lrelu/mul"
  input: "generator/encoder_4/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_4/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 172
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_4/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_4/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Initializer/random_normal"
  op: "Add"
  input: "generator/encoder_4/conv2d/kernel/Initializer/random_normal/mul"
  input: "generator/encoder_4/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Assign"
  op: "Assign"
  input: "generator/encoder_4/conv2d/kernel"
  input: "generator/encoder_4/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/read"
  op: "Identity"
  input: "generator/encoder_4/conv2d/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Assign"
  op: "Assign"
  input: "generator/encoder_4/conv2d/bias"
  input: "generator/encoder_4/conv2d/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/read"
  op: "Identity"
  input: "generator/encoder_4/conv2d/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/Conv2D"
  op: "Conv2D"
  input: "generator/encoder_4/lrelu/add"
  input: "generator/encoder_4/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "generator/encoder_4/conv2d/Conv2D"
  input: "generator/encoder_4/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 188
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal"
  op: "Add"
  input: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "generator/encoder_4/batch_normalization/gamma"
  input: "generator/encoder_4/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/read"
  op: "Identity"
  input: "generator/encoder_4/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Assign"
  op: "Assign"
  input: "generator/encoder_4/batch_normalization/beta"
  input: "generator/encoder_4/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/read"
  op: "Identity"
  input: "generator/encoder_4/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "generator/encoder_4/batch_normalization/moving_mean"
  input: "generator/encoder_4/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "generator/encoder_4/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "generator/encoder_4/batch_normalization/moving_variance"
  input: "generator/encoder_4/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "generator/encoder_4/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "generator/encoder_4/conv2d/BiasAdd"
  input: "generator/encoder_4/batch_normalization/gamma/read"
  input: "generator/encoder_4/batch_normalization/beta/read"
  input: "generator/encoder_4/batch_normalization/Const"
  input: "generator/encoder_4/batch_normalization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/encoder_4/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/encoder_4/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/encoder_4/batch_normalization/moving_mean/read"
  input: "generator/encoder_4/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/encoder_4/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/encoder_4/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "generator/encoder_4/batch_normalization/moving_mean"
  input: "generator/encoder_4/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/encoder_4/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/encoder_4/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/encoder_4/batch_normalization/moving_variance/read"
  input: "generator/encoder_4/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/encoder_4/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/encoder_4/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "generator/encoder_4/batch_normalization/moving_variance"
  input: "generator/encoder_4/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_5/lrelu/Identity"
  op: "Identity"
  input: "generator/encoder_4/batch_normalization/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "generator/encoder_5/lrelu/mul"
  op: "Mul"
  input: "generator/encoder_5/lrelu/mul/x"
  input: "generator/encoder_5/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/lrelu/Abs"
  op: "Abs"
  input: "generator/encoder_5/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "generator/encoder_5/lrelu/mul_1"
  op: "Mul"
  input: "generator/encoder_5/lrelu/mul_1/x"
  input: "generator/encoder_5/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/lrelu/add"
  op: "Add"
  input: "generator/encoder_5/lrelu/mul"
  input: "generator/encoder_5/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_5/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 230
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_5/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_5/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Initializer/random_normal"
  op: "Add"
  input: "generator/encoder_5/conv2d/kernel/Initializer/random_normal/mul"
  input: "generator/encoder_5/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Assign"
  op: "Assign"
  input: "generator/encoder_5/conv2d/kernel"
  input: "generator/encoder_5/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/read"
  op: "Identity"
  input: "generator/encoder_5/conv2d/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Assign"
  op: "Assign"
  input: "generator/encoder_5/conv2d/bias"
  input: "generator/encoder_5/conv2d/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/read"
  op: "Identity"
  input: "generator/encoder_5/conv2d/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/Conv2D"
  op: "Conv2D"
  input: "generator/encoder_5/lrelu/add"
  input: "generator/encoder_5/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "generator/encoder_5/conv2d/Conv2D"
  input: "generator/encoder_5/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 246
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal"
  op: "Add"
  input: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "generator/encoder_5/batch_normalization/gamma"
  input: "generator/encoder_5/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/read"
  op: "Identity"
  input: "generator/encoder_5/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Assign"
  op: "Assign"
  input: "generator/encoder_5/batch_normalization/beta"
  input: "generator/encoder_5/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/read"
  op: "Identity"
  input: "generator/encoder_5/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "generator/encoder_5/batch_normalization/moving_mean"
  input: "generator/encoder_5/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "generator/encoder_5/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "generator/encoder_5/batch_normalization/moving_variance"
  input: "generator/encoder_5/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "generator/encoder_5/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "generator/encoder_5/conv2d/BiasAdd"
  input: "generator/encoder_5/batch_normalization/gamma/read"
  input: "generator/encoder_5/batch_normalization/beta/read"
  input: "generator/encoder_5/batch_normalization/Const"
  input: "generator/encoder_5/batch_normalization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/encoder_5/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/encoder_5/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/encoder_5/batch_normalization/moving_mean/read"
  input: "generator/encoder_5/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/encoder_5/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/encoder_5/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "generator/encoder_5/batch_normalization/moving_mean"
  input: "generator/encoder_5/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/encoder_5/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/encoder_5/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/encoder_5/batch_normalization/moving_variance/read"
  input: "generator/encoder_5/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/encoder_5/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/encoder_5/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "generator/encoder_5/batch_normalization/moving_variance"
  input: "generator/encoder_5/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_6/lrelu/Identity"
  op: "Identity"
  input: "generator/encoder_5/batch_normalization/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "generator/encoder_6/lrelu/mul"
  op: "Mul"
  input: "generator/encoder_6/lrelu/mul/x"
  input: "generator/encoder_6/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/lrelu/Abs"
  op: "Abs"
  input: "generator/encoder_6/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "generator/encoder_6/lrelu/mul_1"
  op: "Mul"
  input: "generator/encoder_6/lrelu/mul_1/x"
  input: "generator/encoder_6/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/lrelu/add"
  op: "Add"
  input: "generator/encoder_6/lrelu/mul"
  input: "generator/encoder_6/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_6/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 288
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_6/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_6/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Initializer/random_normal"
  op: "Add"
  input: "generator/encoder_6/conv2d/kernel/Initializer/random_normal/mul"
  input: "generator/encoder_6/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Assign"
  op: "Assign"
  input: "generator/encoder_6/conv2d/kernel"
  input: "generator/encoder_6/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/read"
  op: "Identity"
  input: "generator/encoder_6/conv2d/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Assign"
  op: "Assign"
  input: "generator/encoder_6/conv2d/bias"
  input: "generator/encoder_6/conv2d/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/read"
  op: "Identity"
  input: "generator/encoder_6/conv2d/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/Conv2D"
  op: "Conv2D"
  input: "generator/encoder_6/lrelu/add"
  input: "generator/encoder_6/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "generator/encoder_6/conv2d/Conv2D"
  input: "generator/encoder_6/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 304
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal"
  op: "Add"
  input: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "generator/encoder_6/batch_normalization/gamma"
  input: "generator/encoder_6/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/read"
  op: "Identity"
  input: "generator/encoder_6/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Assign"
  op: "Assign"
  input: "generator/encoder_6/batch_normalization/beta"
  input: "generator/encoder_6/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/read"
  op: "Identity"
  input: "generator/encoder_6/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "generator/encoder_6/batch_normalization/moving_mean"
  input: "generator/encoder_6/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "generator/encoder_6/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "generator/encoder_6/batch_normalization/moving_variance"
  input: "generator/encoder_6/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "generator/encoder_6/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "generator/encoder_6/conv2d/BiasAdd"
  input: "generator/encoder_6/batch_normalization/gamma/read"
  input: "generator/encoder_6/batch_normalization/beta/read"
  input: "generator/encoder_6/batch_normalization/Const"
  input: "generator/encoder_6/batch_normalization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/encoder_6/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/encoder_6/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/encoder_6/batch_normalization/moving_mean/read"
  input: "generator/encoder_6/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/encoder_6/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/encoder_6/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "generator/encoder_6/batch_normalization/moving_mean"
  input: "generator/encoder_6/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/encoder_6/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/encoder_6/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/encoder_6/batch_normalization/moving_variance/read"
  input: "generator/encoder_6/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/encoder_6/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/encoder_6/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "generator/encoder_6/batch_normalization/moving_variance"
  input: "generator/encoder_6/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_7/lrelu/Identity"
  op: "Identity"
  input: "generator/encoder_6/batch_normalization/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "generator/encoder_7/lrelu/mul"
  op: "Mul"
  input: "generator/encoder_7/lrelu/mul/x"
  input: "generator/encoder_7/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/lrelu/Abs"
  op: "Abs"
  input: "generator/encoder_7/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "generator/encoder_7/lrelu/mul_1"
  op: "Mul"
  input: "generator/encoder_7/lrelu/mul_1/x"
  input: "generator/encoder_7/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/lrelu/add"
  op: "Add"
  input: "generator/encoder_7/lrelu/mul"
  input: "generator/encoder_7/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_7/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 346
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_7/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_7/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Initializer/random_normal"
  op: "Add"
  input: "generator/encoder_7/conv2d/kernel/Initializer/random_normal/mul"
  input: "generator/encoder_7/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Assign"
  op: "Assign"
  input: "generator/encoder_7/conv2d/kernel"
  input: "generator/encoder_7/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/read"
  op: "Identity"
  input: "generator/encoder_7/conv2d/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Assign"
  op: "Assign"
  input: "generator/encoder_7/conv2d/bias"
  input: "generator/encoder_7/conv2d/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/read"
  op: "Identity"
  input: "generator/encoder_7/conv2d/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/Conv2D"
  op: "Conv2D"
  input: "generator/encoder_7/lrelu/add"
  input: "generator/encoder_7/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "generator/encoder_7/conv2d/Conv2D"
  input: "generator/encoder_7/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 362
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal"
  op: "Add"
  input: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "generator/encoder_7/batch_normalization/gamma"
  input: "generator/encoder_7/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/read"
  op: "Identity"
  input: "generator/encoder_7/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Assign"
  op: "Assign"
  input: "generator/encoder_7/batch_normalization/beta"
  input: "generator/encoder_7/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/read"
  op: "Identity"
  input: "generator/encoder_7/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "generator/encoder_7/batch_normalization/moving_mean"
  input: "generator/encoder_7/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "generator/encoder_7/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "generator/encoder_7/batch_normalization/moving_variance"
  input: "generator/encoder_7/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "generator/encoder_7/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "generator/encoder_7/conv2d/BiasAdd"
  input: "generator/encoder_7/batch_normalization/gamma/read"
  input: "generator/encoder_7/batch_normalization/beta/read"
  input: "generator/encoder_7/batch_normalization/Const"
  input: "generator/encoder_7/batch_normalization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/encoder_7/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/encoder_7/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/encoder_7/batch_normalization/moving_mean/read"
  input: "generator/encoder_7/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/encoder_7/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/encoder_7/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "generator/encoder_7/batch_normalization/moving_mean"
  input: "generator/encoder_7/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/encoder_7/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/encoder_7/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/encoder_7/batch_normalization/moving_variance/read"
  input: "generator/encoder_7/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/encoder_7/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/encoder_7/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "generator/encoder_7/batch_normalization/moving_variance"
  input: "generator/encoder_7/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_8/lrelu/Identity"
  op: "Identity"
  input: "generator/encoder_7/batch_normalization/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "generator/encoder_8/lrelu/mul"
  op: "Mul"
  input: "generator/encoder_8/lrelu/mul/x"
  input: "generator/encoder_8/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/lrelu/Abs"
  op: "Abs"
  input: "generator/encoder_8/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "generator/encoder_8/lrelu/mul_1"
  op: "Mul"
  input: "generator/encoder_8/lrelu/mul_1/x"
  input: "generator/encoder_8/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/lrelu/add"
  op: "Add"
  input: "generator/encoder_8/lrelu/mul"
  input: "generator/encoder_8/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_8/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 404
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_8/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_8/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Initializer/random_normal"
  op: "Add"
  input: "generator/encoder_8/conv2d/kernel/Initializer/random_normal/mul"
  input: "generator/encoder_8/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Assign"
  op: "Assign"
  input: "generator/encoder_8/conv2d/kernel"
  input: "generator/encoder_8/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/read"
  op: "Identity"
  input: "generator/encoder_8/conv2d/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Assign"
  op: "Assign"
  input: "generator/encoder_8/conv2d/bias"
  input: "generator/encoder_8/conv2d/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/read"
  op: "Identity"
  input: "generator/encoder_8/conv2d/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/Conv2D"
  op: "Conv2D"
  input: "generator/encoder_8/lrelu/add"
  input: "generator/encoder_8/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "generator/encoder_8/conv2d/Conv2D"
  input: "generator/encoder_8/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 420
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal"
  op: "Add"
  input: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "generator/encoder_8/batch_normalization/gamma"
  input: "generator/encoder_8/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/read"
  op: "Identity"
  input: "generator/encoder_8/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Assign"
  op: "Assign"
  input: "generator/encoder_8/batch_normalization/beta"
  input: "generator/encoder_8/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/read"
  op: "Identity"
  input: "generator/encoder_8/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "generator/encoder_8/batch_normalization/moving_mean"
  input: "generator/encoder_8/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "generator/encoder_8/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "generator/encoder_8/batch_normalization/moving_variance"
  input: "generator/encoder_8/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "generator/encoder_8/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "generator/encoder_8/conv2d/BiasAdd"
  input: "generator/encoder_8/batch_normalization/gamma/read"
  input: "generator/encoder_8/batch_normalization/beta/read"
  input: "generator/encoder_8/batch_normalization/Const"
  input: "generator/encoder_8/batch_normalization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/encoder_8/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/encoder_8/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/encoder_8/batch_normalization/moving_mean/read"
  input: "generator/encoder_8/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/encoder_8/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/encoder_8/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "generator/encoder_8/batch_normalization/moving_mean"
  input: "generator/encoder_8/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/encoder_8/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/encoder_8/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/encoder_8/batch_normalization/moving_variance/read"
  input: "generator/encoder_8/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/encoder_8/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/encoder_8/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "generator/encoder_8/batch_normalization/moving_variance"
  input: "generator/encoder_8/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_8/Relu"
  op: "Relu"
  input: "generator/encoder_8/batch_normalization/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 456
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal"
  op: "Add"
  input: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal/mul"
  input: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Assign"
  op: "Assign"
  input: "generator/decoder_8/conv2d_transpose/kernel"
  input: "generator/decoder_8/conv2d_transpose/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/read"
  op: "Identity"
  input: "generator/decoder_8/conv2d_transpose/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Assign"
  op: "Assign"
  input: "generator/decoder_8/conv2d_transpose/bias"
  input: "generator/decoder_8/conv2d_transpose/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/read"
  op: "Identity"
  input: "generator/decoder_8/conv2d_transpose/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/Shape"
  op: "Shape"
  input: "generator/decoder_8/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "generator/decoder_8/conv2d_transpose/Shape"
  input: "generator/decoder_8/conv2d_transpose/strided_slice/stack"
  input: "generator/decoder_8/conv2d_transpose/strided_slice/stack_1"
  input: "generator/decoder_8/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/strided_slice_1"
  op: "StridedSlice"
  input: "generator/decoder_8/conv2d_transpose/Shape"
  input: "generator/decoder_8/conv2d_transpose/strided_slice_1/stack"
  input: "generator/decoder_8/conv2d_transpose/strided_slice_1/stack_1"
  input: "generator/decoder_8/conv2d_transpose/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/strided_slice_2"
  op: "StridedSlice"
  input: "generator/decoder_8/conv2d_transpose/Shape"
  input: "generator/decoder_8/conv2d_transpose/strided_slice_2/stack"
  input: "generator/decoder_8/conv2d_transpose/strided_slice_2/stack_1"
  input: "generator/decoder_8/conv2d_transpose/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/mul"
  op: "Mul"
  input: "generator/decoder_8/conv2d_transpose/strided_slice_1"
  input: "generator/decoder_8/conv2d_transpose/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/mul_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/mul_1"
  op: "Mul"
  input: "generator/decoder_8/conv2d_transpose/strided_slice_2"
  input: "generator/decoder_8/conv2d_transpose/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/stack"
  op: "Pack"
  input: "generator/decoder_8/conv2d_transpose/strided_slice"
  input: "generator/decoder_8/conv2d_transpose/mul"
  input: "generator/decoder_8/conv2d_transpose/mul_1"
  input: "generator/decoder_8/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "generator/decoder_8/conv2d_transpose/stack"
  input: "generator/decoder_8/conv2d_transpose/kernel/read"
  input: "generator/decoder_8/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "generator/decoder_8/conv2d_transpose/conv2d_transpose"
  input: "generator/decoder_8/conv2d_transpose/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 490
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal"
  op: "Add"
  input: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "generator/decoder_8/batch_normalization/gamma"
  input: "generator/decoder_8/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/read"
  op: "Identity"
  input: "generator/decoder_8/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Assign"
  op: "Assign"
  input: "generator/decoder_8/batch_normalization/beta"
  input: "generator/decoder_8/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/read"
  op: "Identity"
  input: "generator/decoder_8/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "generator/decoder_8/batch_normalization/moving_mean"
  input: "generator/decoder_8/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "generator/decoder_8/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "generator/decoder_8/batch_normalization/moving_variance"
  input: "generator/decoder_8/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "generator/decoder_8/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "generator/decoder_8/conv2d_transpose/BiasAdd"
  input: "generator/decoder_8/batch_normalization/gamma/read"
  input: "generator/decoder_8/batch_normalization/beta/read"
  input: "generator/decoder_8/batch_normalization/Const"
  input: "generator/decoder_8/batch_normalization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/decoder_8/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/decoder_8/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/decoder_8/batch_normalization/moving_mean/read"
  input: "generator/decoder_8/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/decoder_8/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/decoder_8/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "generator/decoder_8/batch_normalization/moving_mean"
  input: "generator/decoder_8/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/decoder_8/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/decoder_8/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/decoder_8/batch_normalization/moving_variance/read"
  input: "generator/decoder_8/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/decoder_8/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/decoder_8/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "generator/decoder_8/batch_normalization/moving_variance"
  input: "generator/decoder_8/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_8/dropout/keep_prob"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "generator/decoder_8/dropout/Shape"
  op: "Shape"
  input: "generator/decoder_8/batch_normalization/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_8/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "generator/decoder_8/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 526
    }
  }
}
node {
  name: "generator/decoder_8/dropout/random_uniform/sub"
  op: "Sub"
  input: "generator/decoder_8/dropout/random_uniform/max"
  input: "generator/decoder_8/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/dropout/random_uniform/mul"
  op: "Mul"
  input: "generator/decoder_8/dropout/random_uniform/RandomUniform"
  input: "generator/decoder_8/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/dropout/random_uniform"
  op: "Add"
  input: "generator/decoder_8/dropout/random_uniform/mul"
  input: "generator/decoder_8/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/dropout/add"
  op: "Add"
  input: "generator/decoder_8/dropout/keep_prob"
  input: "generator/decoder_8/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/dropout/Floor"
  op: "Floor"
  input: "generator/decoder_8/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/dropout/div"
  op: "RealDiv"
  input: "generator/decoder_8/batch_normalization/FusedBatchNorm"
  input: "generator/decoder_8/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/dropout/mul"
  op: "Mul"
  input: "generator/decoder_8/dropout/div"
  input: "generator/decoder_8/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_7/concat"
  op: "ConcatV2"
  input: "generator/decoder_8/dropout/mul"
  input: "generator/encoder_7/batch_normalization/FusedBatchNorm"
  input: "generator/decoder_7/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/Relu"
  op: "Relu"
  input: "generator/decoder_7/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 540
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal"
  op: "Add"
  input: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal/mul"
  input: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Assign"
  op: "Assign"
  input: "generator/decoder_7/conv2d_transpose/kernel"
  input: "generator/decoder_7/conv2d_transpose/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/read"
  op: "Identity"
  input: "generator/decoder_7/conv2d_transpose/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Assign"
  op: "Assign"
  input: "generator/decoder_7/conv2d_transpose/bias"
  input: "generator/decoder_7/conv2d_transpose/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/read"
  op: "Identity"
  input: "generator/decoder_7/conv2d_transpose/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/Shape"
  op: "Shape"
  input: "generator/decoder_7/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "generator/decoder_7/conv2d_transpose/Shape"
  input: "generator/decoder_7/conv2d_transpose/strided_slice/stack"
  input: "generator/decoder_7/conv2d_transpose/strided_slice/stack_1"
  input: "generator/decoder_7/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/strided_slice_1"
  op: "StridedSlice"
  input: "generator/decoder_7/conv2d_transpose/Shape"
  input: "generator/decoder_7/conv2d_transpose/strided_slice_1/stack"
  input: "generator/decoder_7/conv2d_transpose/strided_slice_1/stack_1"
  input: "generator/decoder_7/conv2d_transpose/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/strided_slice_2"
  op: "StridedSlice"
  input: "generator/decoder_7/conv2d_transpose/Shape"
  input: "generator/decoder_7/conv2d_transpose/strided_slice_2/stack"
  input: "generator/decoder_7/conv2d_transpose/strided_slice_2/stack_1"
  input: "generator/decoder_7/conv2d_transpose/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/mul"
  op: "Mul"
  input: "generator/decoder_7/conv2d_transpose/strided_slice_1"
  input: "generator/decoder_7/conv2d_transpose/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/mul_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/mul_1"
  op: "Mul"
  input: "generator/decoder_7/conv2d_transpose/strided_slice_2"
  input: "generator/decoder_7/conv2d_transpose/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/stack"
  op: "Pack"
  input: "generator/decoder_7/conv2d_transpose/strided_slice"
  input: "generator/decoder_7/conv2d_transpose/mul"
  input: "generator/decoder_7/conv2d_transpose/mul_1"
  input: "generator/decoder_7/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "generator/decoder_7/conv2d_transpose/stack"
  input: "generator/decoder_7/conv2d_transpose/kernel/read"
  input: "generator/decoder_7/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "generator/decoder_7/conv2d_transpose/conv2d_transpose"
  input: "generator/decoder_7/conv2d_transpose/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 574
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal"
  op: "Add"
  input: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "generator/decoder_7/batch_normalization/gamma"
  input: "generator/decoder_7/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/read"
  op: "Identity"
  input: "generator/decoder_7/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Assign"
  op: "Assign"
  input: "generator/decoder_7/batch_normalization/beta"
  input: "generator/decoder_7/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/read"
  op: "Identity"
  input: "generator/decoder_7/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "generator/decoder_7/batch_normalization/moving_mean"
  input: "generator/decoder_7/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "generator/decoder_7/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "generator/decoder_7/batch_normalization/moving_variance"
  input: "generator/decoder_7/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "generator/decoder_7/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "generator/decoder_7/conv2d_transpose/BiasAdd"
  input: "generator/decoder_7/batch_normalization/gamma/read"
  input: "generator/decoder_7/batch_normalization/beta/read"
  input: "generator/decoder_7/batch_normalization/Const"
  input: "generator/decoder_7/batch_normalization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/decoder_7/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/decoder_7/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/decoder_7/batch_normalization/moving_mean/read"
  input: "generator/decoder_7/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/decoder_7/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/decoder_7/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "generator/decoder_7/batch_normalization/moving_mean"
  input: "generator/decoder_7/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/decoder_7/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/decoder_7/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/decoder_7/batch_normalization/moving_variance/read"
  input: "generator/decoder_7/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/decoder_7/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/decoder_7/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "generator/decoder_7/batch_normalization/moving_variance"
  input: "generator/decoder_7/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_7/dropout/keep_prob"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "generator/decoder_7/dropout/Shape"
  op: "Shape"
  input: "generator/decoder_7/batch_normalization/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_7/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "generator/decoder_7/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 610
    }
  }
}
node {
  name: "generator/decoder_7/dropout/random_uniform/sub"
  op: "Sub"
  input: "generator/decoder_7/dropout/random_uniform/max"
  input: "generator/decoder_7/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/dropout/random_uniform/mul"
  op: "Mul"
  input: "generator/decoder_7/dropout/random_uniform/RandomUniform"
  input: "generator/decoder_7/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/dropout/random_uniform"
  op: "Add"
  input: "generator/decoder_7/dropout/random_uniform/mul"
  input: "generator/decoder_7/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/dropout/add"
  op: "Add"
  input: "generator/decoder_7/dropout/keep_prob"
  input: "generator/decoder_7/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/dropout/Floor"
  op: "Floor"
  input: "generator/decoder_7/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/dropout/div"
  op: "RealDiv"
  input: "generator/decoder_7/batch_normalization/FusedBatchNorm"
  input: "generator/decoder_7/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/dropout/mul"
  op: "Mul"
  input: "generator/decoder_7/dropout/div"
  input: "generator/decoder_7/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_6/concat"
  op: "ConcatV2"
  input: "generator/decoder_7/dropout/mul"
  input: "generator/encoder_6/batch_normalization/FusedBatchNorm"
  input: "generator/decoder_6/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/Relu"
  op: "Relu"
  input: "generator/decoder_6/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 624
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal"
  op: "Add"
  input: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal/mul"
  input: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Assign"
  op: "Assign"
  input: "generator/decoder_6/conv2d_transpose/kernel"
  input: "generator/decoder_6/conv2d_transpose/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/read"
  op: "Identity"
  input: "generator/decoder_6/conv2d_transpose/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Assign"
  op: "Assign"
  input: "generator/decoder_6/conv2d_transpose/bias"
  input: "generator/decoder_6/conv2d_transpose/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/read"
  op: "Identity"
  input: "generator/decoder_6/conv2d_transpose/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/Shape"
  op: "Shape"
  input: "generator/decoder_6/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "generator/decoder_6/conv2d_transpose/Shape"
  input: "generator/decoder_6/conv2d_transpose/strided_slice/stack"
  input: "generator/decoder_6/conv2d_transpose/strided_slice/stack_1"
  input: "generator/decoder_6/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/strided_slice_1"
  op: "StridedSlice"
  input: "generator/decoder_6/conv2d_transpose/Shape"
  input: "generator/decoder_6/conv2d_transpose/strided_slice_1/stack"
  input: "generator/decoder_6/conv2d_transpose/strided_slice_1/stack_1"
  input: "generator/decoder_6/conv2d_transpose/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/strided_slice_2"
  op: "StridedSlice"
  input: "generator/decoder_6/conv2d_transpose/Shape"
  input: "generator/decoder_6/conv2d_transpose/strided_slice_2/stack"
  input: "generator/decoder_6/conv2d_transpose/strided_slice_2/stack_1"
  input: "generator/decoder_6/conv2d_transpose/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/mul"
  op: "Mul"
  input: "generator/decoder_6/conv2d_transpose/strided_slice_1"
  input: "generator/decoder_6/conv2d_transpose/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/mul_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/mul_1"
  op: "Mul"
  input: "generator/decoder_6/conv2d_transpose/strided_slice_2"
  input: "generator/decoder_6/conv2d_transpose/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/stack"
  op: "Pack"
  input: "generator/decoder_6/conv2d_transpose/strided_slice"
  input: "generator/decoder_6/conv2d_transpose/mul"
  input: "generator/decoder_6/conv2d_transpose/mul_1"
  input: "generator/decoder_6/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "generator/decoder_6/conv2d_transpose/stack"
  input: "generator/decoder_6/conv2d_transpose/kernel/read"
  input: "generator/decoder_6/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "generator/decoder_6/conv2d_transpose/conv2d_transpose"
  input: "generator/decoder_6/conv2d_transpose/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 658
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal"
  op: "Add"
  input: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "generator/decoder_6/batch_normalization/gamma"
  input: "generator/decoder_6/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/read"
  op: "Identity"
  input: "generator/decoder_6/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Assign"
  op: "Assign"
  input: "generator/decoder_6/batch_normalization/beta"
  input: "generator/decoder_6/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/read"
  op: "Identity"
  input: "generator/decoder_6/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "generator/decoder_6/batch_normalization/moving_mean"
  input: "generator/decoder_6/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "generator/decoder_6/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "generator/decoder_6/batch_normalization/moving_variance"
  input: "generator/decoder_6/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "generator/decoder_6/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "generator/decoder_6/conv2d_transpose/BiasAdd"
  input: "generator/decoder_6/batch_normalization/gamma/read"
  input: "generator/decoder_6/batch_normalization/beta/read"
  input: "generator/decoder_6/batch_normalization/Const"
  input: "generator/decoder_6/batch_normalization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/decoder_6/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/decoder_6/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/decoder_6/batch_normalization/moving_mean/read"
  input: "generator/decoder_6/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/decoder_6/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/decoder_6/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "generator/decoder_6/batch_normalization/moving_mean"
  input: "generator/decoder_6/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/decoder_6/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/decoder_6/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/decoder_6/batch_normalization/moving_variance/read"
  input: "generator/decoder_6/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/decoder_6/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/decoder_6/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "generator/decoder_6/batch_normalization/moving_variance"
  input: "generator/decoder_6/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_6/dropout/keep_prob"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "generator/decoder_6/dropout/Shape"
  op: "Shape"
  input: "generator/decoder_6/batch_normalization/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_6/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "generator/decoder_6/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 694
    }
  }
}
node {
  name: "generator/decoder_6/dropout/random_uniform/sub"
  op: "Sub"
  input: "generator/decoder_6/dropout/random_uniform/max"
  input: "generator/decoder_6/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/dropout/random_uniform/mul"
  op: "Mul"
  input: "generator/decoder_6/dropout/random_uniform/RandomUniform"
  input: "generator/decoder_6/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/dropout/random_uniform"
  op: "Add"
  input: "generator/decoder_6/dropout/random_uniform/mul"
  input: "generator/decoder_6/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/dropout/add"
  op: "Add"
  input: "generator/decoder_6/dropout/keep_prob"
  input: "generator/decoder_6/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/dropout/Floor"
  op: "Floor"
  input: "generator/decoder_6/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/dropout/div"
  op: "RealDiv"
  input: "generator/decoder_6/batch_normalization/FusedBatchNorm"
  input: "generator/decoder_6/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/dropout/mul"
  op: "Mul"
  input: "generator/decoder_6/dropout/div"
  input: "generator/decoder_6/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_5/concat"
  op: "ConcatV2"
  input: "generator/decoder_6/dropout/mul"
  input: "generator/encoder_5/batch_normalization/FusedBatchNorm"
  input: "generator/decoder_5/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/Relu"
  op: "Relu"
  input: "generator/decoder_5/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 708
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal"
  op: "Add"
  input: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal/mul"
  input: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Assign"
  op: "Assign"
  input: "generator/decoder_5/conv2d_transpose/kernel"
  input: "generator/decoder_5/conv2d_transpose/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/read"
  op: "Identity"
  input: "generator/decoder_5/conv2d_transpose/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Assign"
  op: "Assign"
  input: "generator/decoder_5/conv2d_transpose/bias"
  input: "generator/decoder_5/conv2d_transpose/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/read"
  op: "Identity"
  input: "generator/decoder_5/conv2d_transpose/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/Shape"
  op: "Shape"
  input: "generator/decoder_5/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "generator/decoder_5/conv2d_transpose/Shape"
  input: "generator/decoder_5/conv2d_transpose/strided_slice/stack"
  input: "generator/decoder_5/conv2d_transpose/strided_slice/stack_1"
  input: "generator/decoder_5/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/strided_slice_1"
  op: "StridedSlice"
  input: "generator/decoder_5/conv2d_transpose/Shape"
  input: "generator/decoder_5/conv2d_transpose/strided_slice_1/stack"
  input: "generator/decoder_5/conv2d_transpose/strided_slice_1/stack_1"
  input: "generator/decoder_5/conv2d_transpose/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/strided_slice_2"
  op: "StridedSlice"
  input: "generator/decoder_5/conv2d_transpose/Shape"
  input: "generator/decoder_5/conv2d_transpose/strided_slice_2/stack"
  input: "generator/decoder_5/conv2d_transpose/strided_slice_2/stack_1"
  input: "generator/decoder_5/conv2d_transpose/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/mul"
  op: "Mul"
  input: "generator/decoder_5/conv2d_transpose/strided_slice_1"
  input: "generator/decoder_5/conv2d_transpose/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/mul_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/mul_1"
  op: "Mul"
  input: "generator/decoder_5/conv2d_transpose/strided_slice_2"
  input: "generator/decoder_5/conv2d_transpose/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/stack"
  op: "Pack"
  input: "generator/decoder_5/conv2d_transpose/strided_slice"
  input: "generator/decoder_5/conv2d_transpose/mul"
  input: "generator/decoder_5/conv2d_transpose/mul_1"
  input: "generator/decoder_5/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "generator/decoder_5/conv2d_transpose/stack"
  input: "generator/decoder_5/conv2d_transpose/kernel/read"
  input: "generator/decoder_5/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "generator/decoder_5/conv2d_transpose/conv2d_transpose"
  input: "generator/decoder_5/conv2d_transpose/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 742
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal"
  op: "Add"
  input: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "generator/decoder_5/batch_normalization/gamma"
  input: "generator/decoder_5/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/read"
  op: "Identity"
  input: "generator/decoder_5/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Assign"
  op: "Assign"
  input: "generator/decoder_5/batch_normalization/beta"
  input: "generator/decoder_5/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/read"
  op: "Identity"
  input: "generator/decoder_5/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "generator/decoder_5/batch_normalization/moving_mean"
  input: "generator/decoder_5/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "generator/decoder_5/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "generator/decoder_5/batch_normalization/moving_variance"
  input: "generator/decoder_5/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "generator/decoder_5/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "generator/decoder_5/conv2d_transpose/BiasAdd"
  input: "generator/decoder_5/batch_normalization/gamma/read"
  input: "generator/decoder_5/batch_normalization/beta/read"
  input: "generator/decoder_5/batch_normalization/Const"
  input: "generator/decoder_5/batch_normalization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/decoder_5/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/decoder_5/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/decoder_5/batch_normalization/moving_mean/read"
  input: "generator/decoder_5/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/decoder_5/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/decoder_5/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "generator/decoder_5/batch_normalization/moving_mean"
  input: "generator/decoder_5/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/decoder_5/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/decoder_5/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/decoder_5/batch_normalization/moving_variance/read"
  input: "generator/decoder_5/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/decoder_5/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/decoder_5/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "generator/decoder_5/batch_normalization/moving_variance"
  input: "generator/decoder_5/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_4/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_4/concat"
  op: "ConcatV2"
  input: "generator/decoder_5/batch_normalization/FusedBatchNorm"
  input: "generator/encoder_4/batch_normalization/FusedBatchNorm"
  input: "generator/decoder_4/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/Relu"
  op: "Relu"
  input: "generator/decoder_4/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 780
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal"
  op: "Add"
  input: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal/mul"
  input: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 256
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Assign"
  op: "Assign"
  input: "generator/decoder_4/conv2d_transpose/kernel"
  input: "generator/decoder_4/conv2d_transpose/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/read"
  op: "Identity"
  input: "generator/decoder_4/conv2d_transpose/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Assign"
  op: "Assign"
  input: "generator/decoder_4/conv2d_transpose/bias"
  input: "generator/decoder_4/conv2d_transpose/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/read"
  op: "Identity"
  input: "generator/decoder_4/conv2d_transpose/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/Shape"
  op: "Shape"
  input: "generator/decoder_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "generator/decoder_4/conv2d_transpose/Shape"
  input: "generator/decoder_4/conv2d_transpose/strided_slice/stack"
  input: "generator/decoder_4/conv2d_transpose/strided_slice/stack_1"
  input: "generator/decoder_4/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/strided_slice_1"
  op: "StridedSlice"
  input: "generator/decoder_4/conv2d_transpose/Shape"
  input: "generator/decoder_4/conv2d_transpose/strided_slice_1/stack"
  input: "generator/decoder_4/conv2d_transpose/strided_slice_1/stack_1"
  input: "generator/decoder_4/conv2d_transpose/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/strided_slice_2"
  op: "StridedSlice"
  input: "generator/decoder_4/conv2d_transpose/Shape"
  input: "generator/decoder_4/conv2d_transpose/strided_slice_2/stack"
  input: "generator/decoder_4/conv2d_transpose/strided_slice_2/stack_1"
  input: "generator/decoder_4/conv2d_transpose/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/mul"
  op: "Mul"
  input: "generator/decoder_4/conv2d_transpose/strided_slice_1"
  input: "generator/decoder_4/conv2d_transpose/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/mul_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/mul_1"
  op: "Mul"
  input: "generator/decoder_4/conv2d_transpose/strided_slice_2"
  input: "generator/decoder_4/conv2d_transpose/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/stack"
  op: "Pack"
  input: "generator/decoder_4/conv2d_transpose/strided_slice"
  input: "generator/decoder_4/conv2d_transpose/mul"
  input: "generator/decoder_4/conv2d_transpose/mul_1"
  input: "generator/decoder_4/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "generator/decoder_4/conv2d_transpose/stack"
  input: "generator/decoder_4/conv2d_transpose/kernel/read"
  input: "generator/decoder_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "generator/decoder_4/conv2d_transpose/conv2d_transpose"
  input: "generator/decoder_4/conv2d_transpose/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 814
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal"
  op: "Add"
  input: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "generator/decoder_4/batch_normalization/gamma"
  input: "generator/decoder_4/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/read"
  op: "Identity"
  input: "generator/decoder_4/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Assign"
  op: "Assign"
  input: "generator/decoder_4/batch_normalization/beta"
  input: "generator/decoder_4/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/read"
  op: "Identity"
  input: "generator/decoder_4/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "generator/decoder_4/batch_normalization/moving_mean"
  input: "generator/decoder_4/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "generator/decoder_4/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "generator/decoder_4/batch_normalization/moving_variance"
  input: "generator/decoder_4/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "generator/decoder_4/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "generator/decoder_4/conv2d_transpose/BiasAdd"
  input: "generator/decoder_4/batch_normalization/gamma/read"
  input: "generator/decoder_4/batch_normalization/beta/read"
  input: "generator/decoder_4/batch_normalization/Const"
  input: "generator/decoder_4/batch_normalization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/decoder_4/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/decoder_4/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/decoder_4/batch_normalization/moving_mean/read"
  input: "generator/decoder_4/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/decoder_4/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/decoder_4/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "generator/decoder_4/batch_normalization/moving_mean"
  input: "generator/decoder_4/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/decoder_4/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/decoder_4/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/decoder_4/batch_normalization/moving_variance/read"
  input: "generator/decoder_4/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/decoder_4/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/decoder_4/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "generator/decoder_4/batch_normalization/moving_variance"
  input: "generator/decoder_4/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_3/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_3/concat"
  op: "ConcatV2"
  input: "generator/decoder_4/batch_normalization/FusedBatchNorm"
  input: "generator/encoder_3/batch_normalization/FusedBatchNorm"
  input: "generator/decoder_3/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/Relu"
  op: "Relu"
  input: "generator/decoder_3/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 852
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal"
  op: "Add"
  input: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal/mul"
  input: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Assign"
  op: "Assign"
  input: "generator/decoder_3/conv2d_transpose/kernel"
  input: "generator/decoder_3/conv2d_transpose/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/read"
  op: "Identity"
  input: "generator/decoder_3/conv2d_transpose/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Assign"
  op: "Assign"
  input: "generator/decoder_3/conv2d_transpose/bias"
  input: "generator/decoder_3/conv2d_transpose/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/read"
  op: "Identity"
  input: "generator/decoder_3/conv2d_transpose/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/Shape"
  op: "Shape"
  input: "generator/decoder_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "generator/decoder_3/conv2d_transpose/Shape"
  input: "generator/decoder_3/conv2d_transpose/strided_slice/stack"
  input: "generator/decoder_3/conv2d_transpose/strided_slice/stack_1"
  input: "generator/decoder_3/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/strided_slice_1"
  op: "StridedSlice"
  input: "generator/decoder_3/conv2d_transpose/Shape"
  input: "generator/decoder_3/conv2d_transpose/strided_slice_1/stack"
  input: "generator/decoder_3/conv2d_transpose/strided_slice_1/stack_1"
  input: "generator/decoder_3/conv2d_transpose/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/strided_slice_2"
  op: "StridedSlice"
  input: "generator/decoder_3/conv2d_transpose/Shape"
  input: "generator/decoder_3/conv2d_transpose/strided_slice_2/stack"
  input: "generator/decoder_3/conv2d_transpose/strided_slice_2/stack_1"
  input: "generator/decoder_3/conv2d_transpose/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/mul"
  op: "Mul"
  input: "generator/decoder_3/conv2d_transpose/strided_slice_1"
  input: "generator/decoder_3/conv2d_transpose/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/mul_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/mul_1"
  op: "Mul"
  input: "generator/decoder_3/conv2d_transpose/strided_slice_2"
  input: "generator/decoder_3/conv2d_transpose/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/stack"
  op: "Pack"
  input: "generator/decoder_3/conv2d_transpose/strided_slice"
  input: "generator/decoder_3/conv2d_transpose/mul"
  input: "generator/decoder_3/conv2d_transpose/mul_1"
  input: "generator/decoder_3/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "generator/decoder_3/conv2d_transpose/stack"
  input: "generator/decoder_3/conv2d_transpose/kernel/read"
  input: "generator/decoder_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "generator/decoder_3/conv2d_transpose/conv2d_transpose"
  input: "generator/decoder_3/conv2d_transpose/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 886
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal"
  op: "Add"
  input: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "generator/decoder_3/batch_normalization/gamma"
  input: "generator/decoder_3/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/read"
  op: "Identity"
  input: "generator/decoder_3/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Assign"
  op: "Assign"
  input: "generator/decoder_3/batch_normalization/beta"
  input: "generator/decoder_3/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/read"
  op: "Identity"
  input: "generator/decoder_3/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "generator/decoder_3/batch_normalization/moving_mean"
  input: "generator/decoder_3/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "generator/decoder_3/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "generator/decoder_3/batch_normalization/moving_variance"
  input: "generator/decoder_3/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "generator/decoder_3/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "generator/decoder_3/conv2d_transpose/BiasAdd"
  input: "generator/decoder_3/batch_normalization/gamma/read"
  input: "generator/decoder_3/batch_normalization/beta/read"
  input: "generator/decoder_3/batch_normalization/Const"
  input: "generator/decoder_3/batch_normalization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/decoder_3/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/decoder_3/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/decoder_3/batch_normalization/moving_mean/read"
  input: "generator/decoder_3/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/decoder_3/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/decoder_3/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "generator/decoder_3/batch_normalization/moving_mean"
  input: "generator/decoder_3/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/decoder_3/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/decoder_3/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/decoder_3/batch_normalization/moving_variance/read"
  input: "generator/decoder_3/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/decoder_3/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/decoder_3/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "generator/decoder_3/batch_normalization/moving_variance"
  input: "generator/decoder_3/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_2/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_2/concat"
  op: "ConcatV2"
  input: "generator/decoder_3/batch_normalization/FusedBatchNorm"
  input: "generator/encoder_2/batch_normalization/FusedBatchNorm"
  input: "generator/decoder_2/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/Relu"
  op: "Relu"
  input: "generator/decoder_2/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 924
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal"
  op: "Add"
  input: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal/mul"
  input: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Assign"
  op: "Assign"
  input: "generator/decoder_2/conv2d_transpose/kernel"
  input: "generator/decoder_2/conv2d_transpose/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/read"
  op: "Identity"
  input: "generator/decoder_2/conv2d_transpose/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Assign"
  op: "Assign"
  input: "generator/decoder_2/conv2d_transpose/bias"
  input: "generator/decoder_2/conv2d_transpose/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/read"
  op: "Identity"
  input: "generator/decoder_2/conv2d_transpose/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/Shape"
  op: "Shape"
  input: "generator/decoder_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "generator/decoder_2/conv2d_transpose/Shape"
  input: "generator/decoder_2/conv2d_transpose/strided_slice/stack"
  input: "generator/decoder_2/conv2d_transpose/strided_slice/stack_1"
  input: "generator/decoder_2/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/strided_slice_1"
  op: "StridedSlice"
  input: "generator/decoder_2/conv2d_transpose/Shape"
  input: "generator/decoder_2/conv2d_transpose/strided_slice_1/stack"
  input: "generator/decoder_2/conv2d_transpose/strided_slice_1/stack_1"
  input: "generator/decoder_2/conv2d_transpose/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/strided_slice_2"
  op: "StridedSlice"
  input: "generator/decoder_2/conv2d_transpose/Shape"
  input: "generator/decoder_2/conv2d_transpose/strided_slice_2/stack"
  input: "generator/decoder_2/conv2d_transpose/strided_slice_2/stack_1"
  input: "generator/decoder_2/conv2d_transpose/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/mul"
  op: "Mul"
  input: "generator/decoder_2/conv2d_transpose/strided_slice_1"
  input: "generator/decoder_2/conv2d_transpose/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/mul_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/mul_1"
  op: "Mul"
  input: "generator/decoder_2/conv2d_transpose/strided_slice_2"
  input: "generator/decoder_2/conv2d_transpose/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/stack"
  op: "Pack"
  input: "generator/decoder_2/conv2d_transpose/strided_slice"
  input: "generator/decoder_2/conv2d_transpose/mul"
  input: "generator/decoder_2/conv2d_transpose/mul_1"
  input: "generator/decoder_2/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "generator/decoder_2/conv2d_transpose/stack"
  input: "generator/decoder_2/conv2d_transpose/kernel/read"
  input: "generator/decoder_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "generator/decoder_2/conv2d_transpose/conv2d_transpose"
  input: "generator/decoder_2/conv2d_transpose/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 958
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal"
  op: "Add"
  input: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "generator/decoder_2/batch_normalization/gamma"
  input: "generator/decoder_2/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/read"
  op: "Identity"
  input: "generator/decoder_2/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Assign"
  op: "Assign"
  input: "generator/decoder_2/batch_normalization/beta"
  input: "generator/decoder_2/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/read"
  op: "Identity"
  input: "generator/decoder_2/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "generator/decoder_2/batch_normalization/moving_mean"
  input: "generator/decoder_2/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "generator/decoder_2/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "generator/decoder_2/batch_normalization/moving_variance"
  input: "generator/decoder_2/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "generator/decoder_2/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "generator/decoder_2/conv2d_transpose/BiasAdd"
  input: "generator/decoder_2/batch_normalization/gamma/read"
  input: "generator/decoder_2/batch_normalization/beta/read"
  input: "generator/decoder_2/batch_normalization/Const"
  input: "generator/decoder_2/batch_normalization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "generator/decoder_2/batch_normalization/AssignMovingAvg/sub/x"
  input: "generator/decoder_2/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "generator/decoder_2/batch_normalization/moving_mean/read"
  input: "generator/decoder_2/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "generator/decoder_2/batch_normalization/AssignMovingAvg/sub_1"
  input: "generator/decoder_2/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "generator/decoder_2/batch_normalization/moving_mean"
  input: "generator/decoder_2/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "generator/decoder_2/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "generator/decoder_2/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator/decoder_2/batch_normalization/moving_variance/read"
  input: "generator/decoder_2/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "generator/decoder_2/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "generator/decoder_2/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "generator/decoder_2/batch_normalization/moving_variance"
  input: "generator/decoder_2/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "generator/decoder_1/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_1/concat"
  op: "ConcatV2"
  input: "generator/decoder_2/batch_normalization/FusedBatchNorm"
  input: "generator/encoder_1/conv2d/BiasAdd"
  input: "generator/decoder_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/Relu"
  op: "Relu"
  input: "generator/decoder_1/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 996
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal"
  op: "Add"
  input: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal/mul"
  input: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 1
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Assign"
  op: "Assign"
  input: "generator/decoder_1/conv2d_transpose/kernel"
  input: "generator/decoder_1/conv2d_transpose/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/read"
  op: "Identity"
  input: "generator/decoder_1/conv2d_transpose/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Assign"
  op: "Assign"
  input: "generator/decoder_1/conv2d_transpose/bias"
  input: "generator/decoder_1/conv2d_transpose/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/read"
  op: "Identity"
  input: "generator/decoder_1/conv2d_transpose/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/Shape"
  op: "Shape"
  input: "generator/decoder_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/strided_slice"
  op: "StridedSlice"
  input: "generator/decoder_1/conv2d_transpose/Shape"
  input: "generator/decoder_1/conv2d_transpose/strided_slice/stack"
  input: "generator/decoder_1/conv2d_transpose/strided_slice/stack_1"
  input: "generator/decoder_1/conv2d_transpose/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/strided_slice_1"
  op: "StridedSlice"
  input: "generator/decoder_1/conv2d_transpose/Shape"
  input: "generator/decoder_1/conv2d_transpose/strided_slice_1/stack"
  input: "generator/decoder_1/conv2d_transpose/strided_slice_1/stack_1"
  input: "generator/decoder_1/conv2d_transpose/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/strided_slice_2"
  op: "StridedSlice"
  input: "generator/decoder_1/conv2d_transpose/Shape"
  input: "generator/decoder_1/conv2d_transpose/strided_slice_2/stack"
  input: "generator/decoder_1/conv2d_transpose/strided_slice_2/stack_1"
  input: "generator/decoder_1/conv2d_transpose/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/mul"
  op: "Mul"
  input: "generator/decoder_1/conv2d_transpose/strided_slice_1"
  input: "generator/decoder_1/conv2d_transpose/mul/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/mul_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/mul_1"
  op: "Mul"
  input: "generator/decoder_1/conv2d_transpose/strided_slice_2"
  input: "generator/decoder_1/conv2d_transpose/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/stack/3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/stack"
  op: "Pack"
  input: "generator/decoder_1/conv2d_transpose/strided_slice"
  input: "generator/decoder_1/conv2d_transpose/mul"
  input: "generator/decoder_1/conv2d_transpose/mul_1"
  input: "generator/decoder_1/conv2d_transpose/stack/3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/conv2d_transpose"
  op: "Conv2DBackpropInput"
  input: "generator/decoder_1/conv2d_transpose/stack"
  input: "generator/decoder_1/conv2d_transpose/kernel/read"
  input: "generator/decoder_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/BiasAdd"
  op: "BiasAdd"
  input: "generator/decoder_1/conv2d_transpose/conv2d_transpose"
  input: "generator/decoder_1/conv2d_transpose/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator/decoder_1/Tanh"
  op: "Tanh"
  input: "generator/decoder_1/conv2d_transpose/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/concat"
  op: "ConcatV2"
  input: "concat"
  input: "scaling_flux/preprocess/sub"
  input: "real_discriminator/discriminator/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/Pad"
  op: "Pad"
  input: "real_discriminator/discriminator/concat"
  input: "real_discriminator/discriminator/layer_1/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 258
          }
          dim {
            size: 258
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1035
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal"
  op: "Add"
  input: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal/mul"
  input: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Assign"
  op: "Assign"
  input: "discriminator/layer_1/conv2d/kernel"
  input: "discriminator/layer_1/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/read"
  op: "Identity"
  input: "discriminator/layer_1/conv2d/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Assign"
  op: "Assign"
  input: "discriminator/layer_1/conv2d/bias"
  input: "discriminator/layer_1/conv2d/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/read"
  op: "Identity"
  input: "discriminator/layer_1/conv2d/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/conv2d/Conv2D"
  op: "Conv2D"
  input: "real_discriminator/discriminator/layer_1/Pad"
  input: "discriminator/layer_1/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "real_discriminator/discriminator/layer_1/conv2d/Conv2D"
  input: "discriminator/layer_1/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/lrelu/Identity"
  op: "Identity"
  input: "real_discriminator/discriminator/layer_1/conv2d/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/lrelu/mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_1/lrelu/mul/x"
  input: "real_discriminator/discriminator/layer_1/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/lrelu/Abs"
  op: "Abs"
  input: "real_discriminator/discriminator/layer_1/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/lrelu/mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_1/lrelu/mul_1/x"
  input: "real_discriminator/discriminator/layer_1/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_1/lrelu/add"
  op: "Add"
  input: "real_discriminator/discriminator/layer_1/lrelu/mul"
  input: "real_discriminator/discriminator/layer_1/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/Pad"
  op: "Pad"
  input: "real_discriminator/discriminator/layer_1/lrelu/add"
  input: "real_discriminator/discriminator/layer_2/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 130
          }
          dim {
            size: 130
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1060
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal"
  op: "Add"
  input: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal/mul"
  input: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Assign"
  op: "Assign"
  input: "discriminator/layer_2/conv2d/kernel"
  input: "discriminator/layer_2/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/read"
  op: "Identity"
  input: "discriminator/layer_2/conv2d/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Assign"
  op: "Assign"
  input: "discriminator/layer_2/conv2d/bias"
  input: "discriminator/layer_2/conv2d/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/read"
  op: "Identity"
  input: "discriminator/layer_2/conv2d/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/conv2d/Conv2D"
  op: "Conv2D"
  input: "real_discriminator/discriminator/layer_2/Pad"
  input: "discriminator/layer_2/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "real_discriminator/discriminator/layer_2/conv2d/Conv2D"
  input: "discriminator/layer_2/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1076
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal"
  op: "Add"
  input: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "discriminator/layer_2/batch_normalization/gamma"
  input: "discriminator/layer_2/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/read"
  op: "Identity"
  input: "discriminator/layer_2/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Assign"
  op: "Assign"
  input: "discriminator/layer_2/batch_normalization/beta"
  input: "discriminator/layer_2/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/read"
  op: "Identity"
  input: "discriminator/layer_2/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "discriminator/layer_2/batch_normalization/moving_mean"
  input: "discriminator/layer_2/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "discriminator/layer_2/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "discriminator/layer_2/batch_normalization/moving_variance"
  input: "discriminator/layer_2/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "discriminator/layer_2/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "real_discriminator/discriminator/layer_2/conv2d/BiasAdd"
  input: "discriminator/layer_2/batch_normalization/gamma/read"
  input: "discriminator/layer_2/batch_normalization/beta/read"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/Const"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub/x"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "discriminator/layer_2/batch_normalization/moving_mean/read"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub_1"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "discriminator/layer_2/batch_normalization/moving_mean"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "discriminator/layer_2/batch_normalization/moving_variance/read"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "discriminator/layer_2/batch_normalization/moving_variance"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/lrelu/Identity"
  op: "Identity"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/lrelu/mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_2/lrelu/mul/x"
  input: "real_discriminator/discriminator/layer_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/lrelu/Abs"
  op: "Abs"
  input: "real_discriminator/discriminator/layer_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/lrelu/mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_2/lrelu/mul_1/x"
  input: "real_discriminator/discriminator/layer_2/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_2/lrelu/add"
  op: "Add"
  input: "real_discriminator/discriminator/layer_2/lrelu/mul"
  input: "real_discriminator/discriminator/layer_2/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/Pad"
  op: "Pad"
  input: "real_discriminator/discriminator/layer_2/lrelu/add"
  input: "real_discriminator/discriminator/layer_3/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 66
          }
          dim {
            size: 66
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1120
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal"
  op: "Add"
  input: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal/mul"
  input: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Assign"
  op: "Assign"
  input: "discriminator/layer_3/conv2d/kernel"
  input: "discriminator/layer_3/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/read"
  op: "Identity"
  input: "discriminator/layer_3/conv2d/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Assign"
  op: "Assign"
  input: "discriminator/layer_3/conv2d/bias"
  input: "discriminator/layer_3/conv2d/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/read"
  op: "Identity"
  input: "discriminator/layer_3/conv2d/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/conv2d/Conv2D"
  op: "Conv2D"
  input: "real_discriminator/discriminator/layer_3/Pad"
  input: "discriminator/layer_3/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "real_discriminator/discriminator/layer_3/conv2d/Conv2D"
  input: "discriminator/layer_3/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1136
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal"
  op: "Add"
  input: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "discriminator/layer_3/batch_normalization/gamma"
  input: "discriminator/layer_3/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/read"
  op: "Identity"
  input: "discriminator/layer_3/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Assign"
  op: "Assign"
  input: "discriminator/layer_3/batch_normalization/beta"
  input: "discriminator/layer_3/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/read"
  op: "Identity"
  input: "discriminator/layer_3/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "discriminator/layer_3/batch_normalization/moving_mean"
  input: "discriminator/layer_3/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "discriminator/layer_3/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "discriminator/layer_3/batch_normalization/moving_variance"
  input: "discriminator/layer_3/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "discriminator/layer_3/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "real_discriminator/discriminator/layer_3/conv2d/BiasAdd"
  input: "discriminator/layer_3/batch_normalization/gamma/read"
  input: "discriminator/layer_3/batch_normalization/beta/read"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/Const"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub/x"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "discriminator/layer_3/batch_normalization/moving_mean/read"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub_1"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "discriminator/layer_3/batch_normalization/moving_mean"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "discriminator/layer_3/batch_normalization/moving_variance/read"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "discriminator/layer_3/batch_normalization/moving_variance"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/lrelu/Identity"
  op: "Identity"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/lrelu/mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_3/lrelu/mul/x"
  input: "real_discriminator/discriminator/layer_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/lrelu/Abs"
  op: "Abs"
  input: "real_discriminator/discriminator/layer_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/lrelu/mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_3/lrelu/mul_1/x"
  input: "real_discriminator/discriminator/layer_3/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_3/lrelu/add"
  op: "Add"
  input: "real_discriminator/discriminator/layer_3/lrelu/mul"
  input: "real_discriminator/discriminator/layer_3/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/Pad"
  op: "Pad"
  input: "real_discriminator/discriminator/layer_3/lrelu/add"
  input: "real_discriminator/discriminator/layer_4/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 34
          }
          dim {
            size: 34
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1180
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal"
  op: "Add"
  input: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal/mul"
  input: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Assign"
  op: "Assign"
  input: "discriminator/layer_4/conv2d/kernel"
  input: "discriminator/layer_4/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/read"
  op: "Identity"
  input: "discriminator/layer_4/conv2d/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Assign"
  op: "Assign"
  input: "discriminator/layer_4/conv2d/bias"
  input: "discriminator/layer_4/conv2d/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/read"
  op: "Identity"
  input: "discriminator/layer_4/conv2d/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/conv2d/Conv2D"
  op: "Conv2D"
  input: "real_discriminator/discriminator/layer_4/Pad"
  input: "discriminator/layer_4/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "real_discriminator/discriminator/layer_4/conv2d/Conv2D"
  input: "discriminator/layer_4/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1196
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal/mul"
  op: "Mul"
  input: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal/RandomStandardNormal"
  input: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal"
  op: "Add"
  input: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal/mul"
  input: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Assign"
  op: "Assign"
  input: "discriminator/layer_4/batch_normalization/gamma"
  input: "discriminator/layer_4/batch_normalization/gamma/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/read"
  op: "Identity"
  input: "discriminator/layer_4/batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Assign"
  op: "Assign"
  input: "discriminator/layer_4/batch_normalization/beta"
  input: "discriminator/layer_4/batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/read"
  op: "Identity"
  input: "discriminator/layer_4/batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/moving_mean/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "discriminator/layer_4/batch_normalization/moving_mean"
  input: "discriminator/layer_4/batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/moving_mean/read"
  op: "Identity"
  input: "discriminator/layer_4/batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/moving_variance/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "discriminator/layer_4/batch_normalization/moving_variance"
  input: "discriminator/layer_4/batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/moving_variance/read"
  op: "Identity"
  input: "discriminator/layer_4/batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "real_discriminator/discriminator/layer_4/conv2d/BiasAdd"
  input: "discriminator/layer_4/batch_normalization/gamma/read"
  input: "discriminator/layer_4/batch_normalization/beta/read"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/Const"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub/x"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "discriminator/layer_4/batch_normalization/moving_mean/read"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub_1"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "discriminator/layer_4/batch_normalization/moving_mean"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "discriminator/layer_4/batch_normalization/moving_variance/read"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "discriminator/layer_4/batch_normalization/moving_variance"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/lrelu/Identity"
  op: "Identity"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/lrelu/mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_4/lrelu/mul/x"
  input: "real_discriminator/discriminator/layer_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/lrelu/Abs"
  op: "Abs"
  input: "real_discriminator/discriminator/layer_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/lrelu/mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_4/lrelu/mul_1/x"
  input: "real_discriminator/discriminator/layer_4/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_4/lrelu/add"
  op: "Add"
  input: "real_discriminator/discriminator/layer_4/lrelu/mul"
  input: "real_discriminator/discriminator/layer_4/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_5/Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_5/Pad"
  op: "Pad"
  input: "real_discriminator/discriminator/layer_4/lrelu/add"
  input: "real_discriminator/discriminator/layer_5/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 33
          }
          dim {
            size: 33
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  op: "RandomStandardNormal"
  input: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 1682104118
    }
  }
  attr {
    key: "seed2"
    value {
      i: 1240
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal/mul"
  op: "Mul"
  input: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal/RandomStandardNormal"
  input: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal"
  op: "Add"
  input: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal/mul"
  input: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Assign"
  op: "Assign"
  input: "discriminator/layer_5/conv2d/kernel"
  input: "discriminator/layer_5/conv2d/kernel/Initializer/random_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/read"
  op: "Identity"
  input: "discriminator/layer_5/conv2d/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Assign"
  op: "Assign"
  input: "discriminator/layer_5/conv2d/bias"
  input: "discriminator/layer_5/conv2d/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/read"
  op: "Identity"
  input: "discriminator/layer_5/conv2d/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_5/conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_5/conv2d/Conv2D"
  op: "Conv2D"
  input: "real_discriminator/discriminator/layer_5/Pad"
  input: "discriminator/layer_5/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_5/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "real_discriminator/discriminator/layer_5/conv2d/Conv2D"
  input: "discriminator/layer_5/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "real_discriminator/discriminator/layer_5/Sigmoid"
  op: "Sigmoid"
  input: "real_discriminator/discriminator/layer_5/conv2d/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/concat"
  op: "ConcatV2"
  input: "concat"
  input: "generator/decoder_1/Tanh"
  input: "fake_discriminator/discriminator/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/Pad"
  op: "Pad"
  input: "fake_discriminator/discriminator/concat"
  input: "fake_discriminator/discriminator/layer_1/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 258
          }
          dim {
            size: 258
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/conv2d/Conv2D"
  op: "Conv2D"
  input: "fake_discriminator/discriminator/layer_1/Pad"
  input: "discriminator/layer_1/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "fake_discriminator/discriminator/layer_1/conv2d/Conv2D"
  input: "discriminator/layer_1/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/lrelu/Identity"
  op: "Identity"
  input: "fake_discriminator/discriminator/layer_1/conv2d/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/lrelu/mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_1/lrelu/mul/x"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/lrelu/Abs"
  op: "Abs"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/lrelu/mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_1/lrelu/mul_1/x"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_1/lrelu/add"
  op: "Add"
  input: "fake_discriminator/discriminator/layer_1/lrelu/mul"
  input: "fake_discriminator/discriminator/layer_1/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/Pad"
  op: "Pad"
  input: "fake_discriminator/discriminator/layer_1/lrelu/add"
  input: "fake_discriminator/discriminator/layer_2/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 130
          }
          dim {
            size: 130
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/conv2d/Conv2D"
  op: "Conv2D"
  input: "fake_discriminator/discriminator/layer_2/Pad"
  input: "discriminator/layer_2/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "fake_discriminator/discriminator/layer_2/conv2d/Conv2D"
  input: "discriminator/layer_2/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "fake_discriminator/discriminator/layer_2/conv2d/BiasAdd"
  input: "discriminator/layer_2/batch_normalization/gamma/read"
  input: "discriminator/layer_2/batch_normalization/beta/read"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/Const"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub/x"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "discriminator/layer_2/batch_normalization/moving_mean/read"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub_1"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "discriminator/layer_2/batch_normalization/moving_mean"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "discriminator/layer_2/batch_normalization/moving_variance/read"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "discriminator/layer_2/batch_normalization/moving_variance"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/lrelu/Identity"
  op: "Identity"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/lrelu/mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_2/lrelu/mul/x"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/lrelu/Abs"
  op: "Abs"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/lrelu/mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_2/lrelu/mul_1/x"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_2/lrelu/add"
  op: "Add"
  input: "fake_discriminator/discriminator/layer_2/lrelu/mul"
  input: "fake_discriminator/discriminator/layer_2/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/Pad"
  op: "Pad"
  input: "fake_discriminator/discriminator/layer_2/lrelu/add"
  input: "fake_discriminator/discriminator/layer_3/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 66
          }
          dim {
            size: 66
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/conv2d/Conv2D"
  op: "Conv2D"
  input: "fake_discriminator/discriminator/layer_3/Pad"
  input: "discriminator/layer_3/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "fake_discriminator/discriminator/layer_3/conv2d/Conv2D"
  input: "discriminator/layer_3/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "fake_discriminator/discriminator/layer_3/conv2d/BiasAdd"
  input: "discriminator/layer_3/batch_normalization/gamma/read"
  input: "discriminator/layer_3/batch_normalization/beta/read"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/Const"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub/x"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "discriminator/layer_3/batch_normalization/moving_mean/read"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub_1"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "discriminator/layer_3/batch_normalization/moving_mean"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "discriminator/layer_3/batch_normalization/moving_variance/read"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "discriminator/layer_3/batch_normalization/moving_variance"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/lrelu/Identity"
  op: "Identity"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/lrelu/mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_3/lrelu/mul/x"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/lrelu/Abs"
  op: "Abs"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/lrelu/mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_3/lrelu/mul_1/x"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_3/lrelu/add"
  op: "Add"
  input: "fake_discriminator/discriminator/layer_3/lrelu/mul"
  input: "fake_discriminator/discriminator/layer_3/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/Pad"
  op: "Pad"
  input: "fake_discriminator/discriminator/layer_3/lrelu/add"
  input: "fake_discriminator/discriminator/layer_4/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 34
          }
          dim {
            size: 34
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/conv2d/Conv2D"
  op: "Conv2D"
  input: "fake_discriminator/discriminator/layer_4/Pad"
  input: "discriminator/layer_4/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "fake_discriminator/discriminator/layer_4/conv2d/Conv2D"
  input: "discriminator/layer_4/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm"
  op: "FusedBatchNorm"
  input: "fake_discriminator/discriminator/layer_4/conv2d/BiasAdd"
  input: "discriminator/layer_4/batch_normalization/gamma/read"
  input: "discriminator/layer_4/batch_normalization/beta/read"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/Const"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub/x"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "discriminator/layer_4/batch_normalization/moving_mean/read"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub_1"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "discriminator/layer_4/batch_normalization/moving_mean"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub/x"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "discriminator/layer_4/batch_normalization/moving_variance/read"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub_1"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "discriminator/layer_4/batch_normalization/moving_variance"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/lrelu/Identity"
  op: "Identity"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/lrelu/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6000000238418579
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/lrelu/mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_4/lrelu/mul/x"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/lrelu/Abs"
  op: "Abs"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/lrelu/mul_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.4000000059604645
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/lrelu/mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_4/lrelu/mul_1/x"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_4/lrelu/add"
  op: "Add"
  input: "fake_discriminator/discriminator/layer_4/lrelu/mul"
  input: "fake_discriminator/discriminator/layer_4/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_5/Pad/paddings"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_5/Pad"
  op: "Pad"
  input: "fake_discriminator/discriminator/layer_4/lrelu/add"
  input: "fake_discriminator/discriminator/layer_5/Pad/paddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 33
          }
          dim {
            size: 33
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_5/conv2d/dilation_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_5/conv2d/Conv2D"
  op: "Conv2D"
  input: "fake_discriminator/discriminator/layer_5/Pad"
  input: "discriminator/layer_5/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_5/conv2d/BiasAdd"
  op: "BiasAdd"
  input: "fake_discriminator/discriminator/layer_5/conv2d/Conv2D"
  input: "discriminator/layer_5/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fake_discriminator/discriminator/layer_5/Sigmoid"
  op: "Sigmoid"
  input: "fake_discriminator/discriminator/layer_5/conv2d/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_loss/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "discriminator_loss/add"
  op: "Add"
  input: "real_discriminator/discriminator/layer_5/Sigmoid"
  input: "discriminator_loss/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_loss/Log"
  op: "Log"
  input: "discriminator_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_loss/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "discriminator_loss/sub"
  op: "Sub"
  input: "discriminator_loss/sub/x"
  input: "fake_discriminator/discriminator/layer_5/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_loss/add_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "discriminator_loss/add_1"
  op: "Add"
  input: "discriminator_loss/sub"
  input: "discriminator_loss/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_loss/Log_1"
  op: "Log"
  input: "discriminator_loss/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_loss/add_2"
  op: "Add"
  input: "discriminator_loss/Log"
  input: "discriminator_loss/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_loss/Neg"
  op: "Neg"
  input: "discriminator_loss/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_loss/Mean"
  op: "Mean"
  input: "discriminator_loss/Neg"
  input: "discriminator_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_loss/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "generator_loss/add"
  op: "Add"
  input: "fake_discriminator/discriminator/layer_5/Sigmoid"
  input: "generator_loss/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_loss/Log"
  op: "Log"
  input: "generator_loss/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_loss/Neg"
  op: "Neg"
  input: "generator_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_loss/Mean"
  op: "Mean"
  input: "generator_loss/Neg"
  input: "generator_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_loss/sub"
  op: "Sub"
  input: "scaling_flux/preprocess/sub"
  input: "generator/decoder_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_loss/Abs"
  op: "Abs"
  input: "generator_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_loss/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "generator_loss/Mean_1"
  op: "Mean"
  input: "generator_loss/Abs"
  input: "generator_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_loss/mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator_loss/mul"
  op: "Mul"
  input: "generator_loss/Mean"
  input: "generator_loss/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_loss/mul_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 100.0
      }
    }
  }
}
node {
  name: "generator_loss/mul_1"
  op: "Mul"
  input: "generator_loss/Mean_1"
  input: "generator_loss/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_loss/add_1"
  op: "Add"
  input: "generator_loss/mul"
  input: "generator_loss/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/Fill"
  op: "Fill"
  input: "discriminator_train/gradients/Shape"
  input: "discriminator_train/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/Fill"
  input: "discriminator_train/gradients/discriminator_loss/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Mean_grad/Shape"
  op: "Shape"
  input: "discriminator_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Mean_grad/Tile"
  op: "Tile"
  input: "discriminator_train/gradients/discriminator_loss/Mean_grad/Reshape"
  input: "discriminator_train/gradients/discriminator_loss/Mean_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Mean_grad/Shape_1"
  op: "Shape"
  input: "discriminator_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Mean_grad/Shape_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Mean_grad/Prod"
  op: "Prod"
  input: "discriminator_train/gradients/discriminator_loss/Mean_grad/Shape_1"
  input: "discriminator_train/gradients/discriminator_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "discriminator_train/gradients/discriminator_loss/Mean_grad/Shape_2"
  input: "discriminator_train/gradients/discriminator_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "discriminator_train/gradients/discriminator_loss/Mean_grad/Prod_1"
  input: "discriminator_train/gradients/discriminator_loss/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "discriminator_train/gradients/discriminator_loss/Mean_grad/Prod"
  input: "discriminator_train/gradients/discriminator_loss/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Mean_grad/Cast"
  op: "Cast"
  input: "discriminator_train/gradients/discriminator_loss/Mean_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "discriminator_train/gradients/discriminator_loss/Mean_grad/Tile"
  input: "discriminator_train/gradients/discriminator_loss/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Neg_grad/Neg"
  op: "Neg"
  input: "discriminator_train/gradients/discriminator_loss/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_2_grad/Shape"
  op: "Shape"
  input: "discriminator_loss/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_2_grad/Shape_1"
  op: "Shape"
  input: "discriminator_loss/Log_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/discriminator_loss/add_2_grad/Shape"
  input: "discriminator_train/gradients/discriminator_loss/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_2_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/discriminator_loss/Neg_grad/Neg"
  input: "discriminator_train/gradients/discriminator_loss/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_2_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/discriminator_loss/add_2_grad/Sum"
  input: "discriminator_train/gradients/discriminator_loss/add_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_2_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/discriminator_loss/Neg_grad/Neg"
  input: "discriminator_train/gradients/discriminator_loss/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/discriminator_loss/add_2_grad/Sum_1"
  input: "discriminator_train/gradients/discriminator_loss/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/discriminator_loss/add_2_grad/Reshape"
  input: "^discriminator_train/gradients/discriminator_loss/add_2_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/discriminator_loss/add_2_grad/Reshape"
  input: "^discriminator_train/gradients/discriminator_loss/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/discriminator_loss/add_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/discriminator_loss/add_2_grad/Reshape_1"
  input: "^discriminator_train/gradients/discriminator_loss/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/discriminator_loss/add_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "discriminator_loss/add"
  input: "^discriminator_train/gradients/discriminator_loss/add_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Log_grad/mul"
  op: "Mul"
  input: "discriminator_train/gradients/discriminator_loss/add_2_grad/tuple/control_dependency"
  input: "discriminator_train/gradients/discriminator_loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Log_1_grad/Reciprocal"
  op: "Reciprocal"
  input: "discriminator_loss/add_1"
  input: "^discriminator_train/gradients/discriminator_loss/add_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/Log_1_grad/mul"
  op: "Mul"
  input: "discriminator_train/gradients/discriminator_loss/add_2_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/discriminator_loss/Log_1_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_grad/Shape"
  op: "Shape"
  input: "real_discriminator/discriminator/layer_5/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/discriminator_loss/add_grad/Shape"
  input: "discriminator_train/gradients/discriminator_loss/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/discriminator_loss/Log_grad/mul"
  input: "discriminator_train/gradients/discriminator_loss/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/discriminator_loss/add_grad/Sum"
  input: "discriminator_train/gradients/discriminator_loss/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/discriminator_loss/Log_grad/mul"
  input: "discriminator_train/gradients/discriminator_loss/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/discriminator_loss/add_grad/Sum_1"
  input: "discriminator_train/gradients/discriminator_loss/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/discriminator_loss/add_grad/Reshape"
  input: "^discriminator_train/gradients/discriminator_loss/add_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/discriminator_loss/add_grad/Reshape"
  input: "^discriminator_train/gradients/discriminator_loss/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/discriminator_loss/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/discriminator_loss/add_grad/Reshape_1"
  input: "^discriminator_train/gradients/discriminator_loss/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/discriminator_loss/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_1_grad/Shape"
  op: "Shape"
  input: "discriminator_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/discriminator_loss/add_1_grad/Shape"
  input: "discriminator_train/gradients/discriminator_loss/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_1_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/discriminator_loss/Log_1_grad/mul"
  input: "discriminator_train/gradients/discriminator_loss/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_1_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/discriminator_loss/add_1_grad/Sum"
  input: "discriminator_train/gradients/discriminator_loss/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_1_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/discriminator_loss/Log_1_grad/mul"
  input: "discriminator_train/gradients/discriminator_loss/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/discriminator_loss/add_1_grad/Sum_1"
  input: "discriminator_train/gradients/discriminator_loss/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/discriminator_loss/add_1_grad/Reshape"
  input: "^discriminator_train/gradients/discriminator_loss/add_1_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/discriminator_loss/add_1_grad/Reshape"
  input: "^discriminator_train/gradients/discriminator_loss/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/discriminator_loss/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/discriminator_loss/add_1_grad/Reshape_1"
  input: "^discriminator_train/gradients/discriminator_loss/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/discriminator_loss/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "real_discriminator/discriminator/layer_5/Sigmoid"
  input: "discriminator_train/gradients/discriminator_loss/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_5/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/discriminator_loss/sub_grad/Shape"
  input: "discriminator_train/gradients/discriminator_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/discriminator_loss/add_1_grad/tuple/control_dependency"
  input: "discriminator_train/gradients/discriminator_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/discriminator_loss/sub_grad/Sum"
  input: "discriminator_train/gradients/discriminator_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/discriminator_loss/add_1_grad/tuple/control_dependency"
  input: "discriminator_train/gradients/discriminator_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/Neg"
  op: "Neg"
  input: "discriminator_train/gradients/discriminator_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/discriminator_loss/sub_grad/Neg"
  input: "discriminator_train/gradients/discriminator_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/discriminator_loss/sub_grad/Reshape"
  input: "^discriminator_train/gradients/discriminator_loss/sub_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/discriminator_loss/sub_grad/Reshape"
  input: "^discriminator_train/gradients/discriminator_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/discriminator_loss/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/discriminator_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/discriminator_loss/sub_grad/Reshape_1"
  input: "^discriminator_train/gradients/discriminator_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/discriminator_loss/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "fake_discriminator/discriminator/layer_5/Sigmoid"
  input: "discriminator_train/gradients/discriminator_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "real_discriminator/discriminator/layer_5/Pad"
  input: "discriminator/layer_5/conv2d/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/ShapeN"
  input: "discriminator/layer_5/conv2d/kernel/read"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "real_discriminator/discriminator/layer_5/Pad"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Const"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 33
          }
          dim {
            size: 33
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/stack"
  op: "Pack"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Rank"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Slice"
  op: "Slice"
  input: "real_discriminator/discriminator/layer_5/Pad/paddings"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Slice/begin"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Slice"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Shape"
  op: "Shape"
  input: "real_discriminator/discriminator/layer_4/lrelu/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
  op: "Slice"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "fake_discriminator/discriminator/layer_5/Pad"
  input: "discriminator/layer_5/conv2d/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/ShapeN"
  input: "discriminator/layer_5/conv2d/kernel/read"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "fake_discriminator/discriminator/layer_5/Pad"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Const"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 33
          }
          dim {
            size: 33
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/Shape"
  op: "Shape"
  input: "real_discriminator/discriminator/layer_4/lrelu/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/Shape_1"
  op: "Shape"
  input: "real_discriminator/discriminator/layer_4/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/Shape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/Sum_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/stack"
  op: "Pack"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Rank"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice"
  op: "Slice"
  input: "fake_discriminator/discriminator/layer_5/Pad/paddings"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice/begin"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Shape"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_4/lrelu/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
  op: "Slice"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_1"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Shape_1"
  op: "Shape"
  input: "real_discriminator/discriminator/layer_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Shape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency"
  input: "real_discriminator/discriminator/layer_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_4/lrelu/mul/x"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Shape_1"
  op: "Shape"
  input: "real_discriminator/discriminator/layer_4/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Shape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency_1"
  input: "real_discriminator/discriminator/layer_4/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_4/lrelu/mul_1/x"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Shape"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_4/lrelu/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_4/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Shape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Sum_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "real_discriminator/discriminator/layer_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Shape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_4/lrelu/mul/x"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Shape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency_1"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_4/lrelu/mul_1/x"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_2"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "discriminator_train/gradients/AddN_2"
  input: "real_discriminator/discriminator/layer_4/conv2d/BiasAdd"
  input: "discriminator/layer_4/batch_normalization/gamma/read"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:3"
  input: "real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_3"
  op: "AddN"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_4"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_5"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_6"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_7"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "discriminator_train/gradients/AddN_3"
  input: "fake_discriminator/discriminator/layer_4/conv2d/BiasAdd"
  input: "discriminator/layer_4/batch_normalization/gamma/read"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:3"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "real_discriminator/discriminator/layer_4/Pad"
  input: "discriminator/layer_4/conv2d/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/ShapeN"
  input: "discriminator/layer_4/conv2d/kernel/read"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "real_discriminator/discriminator/layer_4/Pad"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Const"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 34
          }
          dim {
            size: 34
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_4"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_5"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/stack"
  op: "Pack"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Rank"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Slice"
  op: "Slice"
  input: "real_discriminator/discriminator/layer_4/Pad/paddings"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Slice/begin"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Slice"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Shape"
  op: "Shape"
  input: "real_discriminator/discriminator/layer_3/lrelu/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
  op: "Slice"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "fake_discriminator/discriminator/layer_4/Pad"
  input: "discriminator/layer_4/conv2d/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/ShapeN"
  input: "discriminator/layer_4/conv2d/kernel/read"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "fake_discriminator/discriminator/layer_4/Pad"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Const"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 34
          }
          dim {
            size: 34
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_6"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/Shape"
  op: "Shape"
  input: "real_discriminator/discriminator/layer_3/lrelu/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/Shape_1"
  op: "Shape"
  input: "real_discriminator/discriminator/layer_3/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/Shape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/Sum_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/stack"
  op: "Pack"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Rank"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice"
  op: "Slice"
  input: "fake_discriminator/discriminator/layer_4/Pad/paddings"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice/begin"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Shape"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_3/lrelu/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
  op: "Slice"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_7"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Shape_1"
  op: "Shape"
  input: "real_discriminator/discriminator/layer_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Shape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency"
  input: "real_discriminator/discriminator/layer_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_3/lrelu/mul/x"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Shape_1"
  op: "Shape"
  input: "real_discriminator/discriminator/layer_3/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Shape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency_1"
  input: "real_discriminator/discriminator/layer_3/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_3/lrelu/mul_1/x"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Shape"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_3/lrelu/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_3/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Shape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Sum_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "real_discriminator/discriminator/layer_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Shape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_3/lrelu/mul/x"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Shape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency_1"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_3/lrelu/mul_1/x"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_8"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_8"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_9"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_10"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_11"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "discriminator_train/gradients/AddN_8"
  input: "real_discriminator/discriminator/layer_3/conv2d/BiasAdd"
  input: "discriminator/layer_3/batch_normalization/gamma/read"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:3"
  input: "real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_9"
  op: "AddN"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_12"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_13"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_14"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_15"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "discriminator_train/gradients/AddN_9"
  input: "fake_discriminator/discriminator/layer_3/conv2d/BiasAdd"
  input: "discriminator/layer_3/batch_normalization/gamma/read"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:3"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "real_discriminator/discriminator/layer_3/Pad"
  input: "discriminator/layer_3/conv2d/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/ShapeN"
  input: "discriminator/layer_3/conv2d/kernel/read"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "real_discriminator/discriminator/layer_3/Pad"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Const"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 66
          }
          dim {
            size: 66
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_10"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_11"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/stack"
  op: "Pack"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Rank"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Slice"
  op: "Slice"
  input: "real_discriminator/discriminator/layer_3/Pad/paddings"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Slice/begin"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Slice"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Shape"
  op: "Shape"
  input: "real_discriminator/discriminator/layer_2/lrelu/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
  op: "Slice"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "fake_discriminator/discriminator/layer_3/Pad"
  input: "discriminator/layer_3/conv2d/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/ShapeN"
  input: "discriminator/layer_3/conv2d/kernel/read"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "fake_discriminator/discriminator/layer_3/Pad"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Const"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 66
          }
          dim {
            size: 66
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_12"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/Shape"
  op: "Shape"
  input: "real_discriminator/discriminator/layer_2/lrelu/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/Shape_1"
  op: "Shape"
  input: "real_discriminator/discriminator/layer_2/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/Shape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/Sum_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/stack"
  op: "Pack"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Rank"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice"
  op: "Slice"
  input: "fake_discriminator/discriminator/layer_3/Pad/paddings"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice/begin"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Shape"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_2/lrelu/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
  op: "Slice"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_13"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Shape_1"
  op: "Shape"
  input: "real_discriminator/discriminator/layer_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Shape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency"
  input: "real_discriminator/discriminator/layer_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_2/lrelu/mul/x"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Shape_1"
  op: "Shape"
  input: "real_discriminator/discriminator/layer_2/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Shape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency_1"
  input: "real_discriminator/discriminator/layer_2/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_2/lrelu/mul_1/x"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Shape"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_2/lrelu/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_2/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Shape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Sum_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "real_discriminator/discriminator/layer_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Shape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_2/lrelu/mul/x"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Shape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency_1"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_2/lrelu/mul_1/x"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_14"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_16"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_17"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_18"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_19"
  op: "ZerosLike"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "discriminator_train/gradients/AddN_14"
  input: "real_discriminator/discriminator/layer_2/conv2d/BiasAdd"
  input: "discriminator/layer_2/batch_normalization/gamma/read"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:3"
  input: "real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_15"
  op: "AddN"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_20"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_21"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_22"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/zeros_like_23"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "discriminator_train/gradients/AddN_15"
  input: "fake_discriminator/discriminator/layer_2/conv2d/BiasAdd"
  input: "discriminator/layer_2/batch_normalization/gamma/read"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:3"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "real_discriminator/discriminator/layer_2/Pad"
  input: "discriminator/layer_2/conv2d/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/ShapeN"
  input: "discriminator/layer_2/conv2d/kernel/read"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "real_discriminator/discriminator/layer_2/Pad"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Const"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 130
          }
          dim {
            size: 130
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_16"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_17"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/stack"
  op: "Pack"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Rank"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Slice"
  op: "Slice"
  input: "real_discriminator/discriminator/layer_2/Pad/paddings"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Slice/begin"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Slice"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Shape"
  op: "Shape"
  input: "real_discriminator/discriminator/layer_1/lrelu/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
  op: "Slice"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "fake_discriminator/discriminator/layer_2/Pad"
  input: "discriminator/layer_2/conv2d/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/ShapeN"
  input: "discriminator/layer_2/conv2d/kernel/read"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "fake_discriminator/discriminator/layer_2/Pad"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Const"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 130
          }
          dim {
            size: 130
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_18"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/Shape"
  op: "Shape"
  input: "real_discriminator/discriminator/layer_1/lrelu/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/Shape_1"
  op: "Shape"
  input: "real_discriminator/discriminator/layer_1/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/Shape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/Sum_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/stack/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/stack"
  op: "Pack"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Rank"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice/begin"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice"
  op: "Slice"
  input: "fake_discriminator/discriminator/layer_2/Pad/paddings"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice/begin"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Shape"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_1/lrelu/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
  op: "Slice"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_19"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Shape_1"
  op: "Shape"
  input: "real_discriminator/discriminator/layer_1/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Shape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency"
  input: "real_discriminator/discriminator/layer_1/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_1/lrelu/mul/x"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Shape_1"
  op: "Shape"
  input: "real_discriminator/discriminator/layer_1/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Shape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency_1"
  input: "real_discriminator/discriminator/layer_1/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_1/lrelu/mul_1/x"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape_1"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Shape"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_1/lrelu/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_1/lrelu/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Shape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Sum_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "real_discriminator/discriminator/layer_1/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Shape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_1/lrelu/mul/x"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Shape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency_1"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_1/lrelu/mul_1/x"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum_1"
  op: "Sum"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape_1"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape_1"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_20"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "discriminator_train/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/AddN_20"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/AddN_20"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_21"
  op: "AddN"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "real_discriminator/discriminator/layer_1/Pad"
  input: "discriminator/layer_1/conv2d/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/ShapeN"
  input: "discriminator/layer_1/conv2d/kernel/read"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "real_discriminator/discriminator/layer_1/Pad"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Const"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 258
          }
          dim {
            size: 258
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "discriminator_train/gradients/AddN_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/AddN_21"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/AddN_21"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "fake_discriminator/discriminator/layer_1/Pad"
  input: "discriminator/layer_1/conv2d/kernel/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/ShapeN"
  input: "discriminator/layer_1/conv2d/kernel/read"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "fake_discriminator/discriminator/layer_1/Pad"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Const"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 258
          }
          dim {
            size: 258
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_22"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/gradients/AddN_23"
  op: "AddN"
  input: "discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/control_dependency_1"
  input: "discriminator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_train/gradients/real_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "discriminator_train/beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator_train/beta1_power/Assign"
  op: "Assign"
  input: "discriminator_train/beta1_power"
  input: "discriminator_train/beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/beta1_power/read"
  op: "Identity"
  input: "discriminator_train/beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "discriminator_train/beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator_train/beta2_power/Assign"
  op: "Assign"
  input: "discriminator_train/beta2_power"
  input: "discriminator_train/beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/beta2_power/read"
  op: "Identity"
  input: "discriminator_train/beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "discriminator/layer_1/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "discriminator/layer_1/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam/Assign"
  op: "Assign"
  input: "discriminator/layer_1/conv2d/kernel/Adam"
  input: "discriminator/layer_1/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam/read"
  op: "Identity"
  input: "discriminator/layer_1/conv2d/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "discriminator/layer_1/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "discriminator/layer_1/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam_1/Assign"
  op: "Assign"
  input: "discriminator/layer_1/conv2d/kernel/Adam_1"
  input: "discriminator/layer_1/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/Adam_1/read"
  op: "Identity"
  input: "discriminator/layer_1/conv2d/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Adam/Assign"
  op: "Assign"
  input: "discriminator/layer_1/conv2d/bias/Adam"
  input: "discriminator/layer_1/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Adam/read"
  op: "Identity"
  input: "discriminator/layer_1/conv2d/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Adam_1/Assign"
  op: "Assign"
  input: "discriminator/layer_1/conv2d/bias/Adam_1"
  input: "discriminator/layer_1/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/Adam_1/read"
  op: "Identity"
  input: "discriminator/layer_1/conv2d/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "discriminator/layer_2/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "discriminator/layer_2/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam/Assign"
  op: "Assign"
  input: "discriminator/layer_2/conv2d/kernel/Adam"
  input: "discriminator/layer_2/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam/read"
  op: "Identity"
  input: "discriminator/layer_2/conv2d/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "discriminator/layer_2/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "discriminator/layer_2/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam_1/Assign"
  op: "Assign"
  input: "discriminator/layer_2/conv2d/kernel/Adam_1"
  input: "discriminator/layer_2/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/Adam_1/read"
  op: "Identity"
  input: "discriminator/layer_2/conv2d/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Adam/Assign"
  op: "Assign"
  input: "discriminator/layer_2/conv2d/bias/Adam"
  input: "discriminator/layer_2/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Adam/read"
  op: "Identity"
  input: "discriminator/layer_2/conv2d/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Adam_1/Assign"
  op: "Assign"
  input: "discriminator/layer_2/conv2d/bias/Adam_1"
  input: "discriminator/layer_2/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/Adam_1/read"
  op: "Identity"
  input: "discriminator/layer_2/conv2d/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam_1"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "discriminator/layer_2/batch_normalization/beta/Adam"
  input: "discriminator/layer_2/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "discriminator/layer_2/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "discriminator/layer_2/batch_normalization/beta/Adam_1"
  input: "discriminator/layer_2/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "discriminator/layer_2/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "discriminator/layer_3/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "discriminator/layer_3/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam/Assign"
  op: "Assign"
  input: "discriminator/layer_3/conv2d/kernel/Adam"
  input: "discriminator/layer_3/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam/read"
  op: "Identity"
  input: "discriminator/layer_3/conv2d/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "discriminator/layer_3/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "discriminator/layer_3/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam_1/Assign"
  op: "Assign"
  input: "discriminator/layer_3/conv2d/kernel/Adam_1"
  input: "discriminator/layer_3/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/Adam_1/read"
  op: "Identity"
  input: "discriminator/layer_3/conv2d/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Adam/Assign"
  op: "Assign"
  input: "discriminator/layer_3/conv2d/bias/Adam"
  input: "discriminator/layer_3/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Adam/read"
  op: "Identity"
  input: "discriminator/layer_3/conv2d/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Adam_1/Assign"
  op: "Assign"
  input: "discriminator/layer_3/conv2d/bias/Adam_1"
  input: "discriminator/layer_3/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/Adam_1/read"
  op: "Identity"
  input: "discriminator/layer_3/conv2d/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam_1"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "discriminator/layer_3/batch_normalization/beta/Adam"
  input: "discriminator/layer_3/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "discriminator/layer_3/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "discriminator/layer_3/batch_normalization/beta/Adam_1"
  input: "discriminator/layer_3/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "discriminator/layer_3/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "discriminator/layer_4/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "discriminator/layer_4/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam/Assign"
  op: "Assign"
  input: "discriminator/layer_4/conv2d/kernel/Adam"
  input: "discriminator/layer_4/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam/read"
  op: "Identity"
  input: "discriminator/layer_4/conv2d/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "discriminator/layer_4/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "discriminator/layer_4/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam_1/Assign"
  op: "Assign"
  input: "discriminator/layer_4/conv2d/kernel/Adam_1"
  input: "discriminator/layer_4/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/Adam_1/read"
  op: "Identity"
  input: "discriminator/layer_4/conv2d/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Adam/Assign"
  op: "Assign"
  input: "discriminator/layer_4/conv2d/bias/Adam"
  input: "discriminator/layer_4/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Adam/read"
  op: "Identity"
  input: "discriminator/layer_4/conv2d/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Adam_1/Assign"
  op: "Assign"
  input: "discriminator/layer_4/conv2d/bias/Adam_1"
  input: "discriminator/layer_4/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/Adam_1/read"
  op: "Identity"
  input: "discriminator/layer_4/conv2d/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam_1"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "discriminator/layer_4/batch_normalization/beta/Adam"
  input: "discriminator/layer_4/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "discriminator/layer_4/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "discriminator/layer_4/batch_normalization/beta/Adam_1"
  input: "discriminator/layer_4/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "discriminator/layer_4/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "discriminator/layer_5/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "discriminator/layer_5/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam/Assign"
  op: "Assign"
  input: "discriminator/layer_5/conv2d/kernel/Adam"
  input: "discriminator/layer_5/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam/read"
  op: "Identity"
  input: "discriminator/layer_5/conv2d/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "discriminator/layer_5/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "discriminator/layer_5/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam_1/Assign"
  op: "Assign"
  input: "discriminator/layer_5/conv2d/kernel/Adam_1"
  input: "discriminator/layer_5/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/Adam_1/read"
  op: "Identity"
  input: "discriminator/layer_5/conv2d/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Adam/Assign"
  op: "Assign"
  input: "discriminator/layer_5/conv2d/bias/Adam"
  input: "discriminator/layer_5/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Adam/read"
  op: "Identity"
  input: "discriminator/layer_5/conv2d/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Adam_1/Assign"
  op: "Assign"
  input: "discriminator/layer_5/conv2d/bias/Adam_1"
  input: "discriminator/layer_5/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/Adam_1/read"
  op: "Identity"
  input: "discriminator/layer_5/conv2d/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "discriminator_train/Adam/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00019999999494757503
      }
    }
  }
}
node {
  name: "discriminator_train/Adam/beta1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "discriminator_train/Adam/beta2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "discriminator_train/Adam/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_1/conv2d/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "discriminator/layer_1/conv2d/kernel"
  input: "discriminator/layer_1/conv2d/kernel/Adam"
  input: "discriminator/layer_1/conv2d/kernel/Adam_1"
  input: "discriminator_train/beta1_power/read"
  input: "discriminator_train/beta2_power/read"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_1/conv2d/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "discriminator/layer_1/conv2d/bias"
  input: "discriminator/layer_1/conv2d/bias/Adam"
  input: "discriminator/layer_1/conv2d/bias/Adam_1"
  input: "discriminator_train/beta1_power/read"
  input: "discriminator_train/beta2_power/read"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_2/conv2d/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "discriminator/layer_2/conv2d/kernel"
  input: "discriminator/layer_2/conv2d/kernel/Adam"
  input: "discriminator/layer_2/conv2d/kernel/Adam_1"
  input: "discriminator_train/beta1_power/read"
  input: "discriminator_train/beta2_power/read"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_2/conv2d/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "discriminator/layer_2/conv2d/bias"
  input: "discriminator/layer_2/conv2d/bias/Adam"
  input: "discriminator/layer_2/conv2d/bias/Adam_1"
  input: "discriminator_train/beta1_power/read"
  input: "discriminator_train/beta2_power/read"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "discriminator/layer_2/batch_normalization/gamma"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam_1"
  input: "discriminator_train/beta1_power/read"
  input: "discriminator_train/beta2_power/read"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "discriminator/layer_2/batch_normalization/beta"
  input: "discriminator/layer_2/batch_normalization/beta/Adam"
  input: "discriminator/layer_2/batch_normalization/beta/Adam_1"
  input: "discriminator_train/beta1_power/read"
  input: "discriminator_train/beta2_power/read"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_3/conv2d/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "discriminator/layer_3/conv2d/kernel"
  input: "discriminator/layer_3/conv2d/kernel/Adam"
  input: "discriminator/layer_3/conv2d/kernel/Adam_1"
  input: "discriminator_train/beta1_power/read"
  input: "discriminator_train/beta2_power/read"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_3/conv2d/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "discriminator/layer_3/conv2d/bias"
  input: "discriminator/layer_3/conv2d/bias/Adam"
  input: "discriminator/layer_3/conv2d/bias/Adam_1"
  input: "discriminator_train/beta1_power/read"
  input: "discriminator_train/beta2_power/read"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "discriminator/layer_3/batch_normalization/gamma"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam_1"
  input: "discriminator_train/beta1_power/read"
  input: "discriminator_train/beta2_power/read"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "discriminator/layer_3/batch_normalization/beta"
  input: "discriminator/layer_3/batch_normalization/beta/Adam"
  input: "discriminator/layer_3/batch_normalization/beta/Adam_1"
  input: "discriminator_train/beta1_power/read"
  input: "discriminator_train/beta2_power/read"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_4/conv2d/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "discriminator/layer_4/conv2d/kernel"
  input: "discriminator/layer_4/conv2d/kernel/Adam"
  input: "discriminator/layer_4/conv2d/kernel/Adam_1"
  input: "discriminator_train/beta1_power/read"
  input: "discriminator_train/beta2_power/read"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_4/conv2d/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "discriminator/layer_4/conv2d/bias"
  input: "discriminator/layer_4/conv2d/bias/Adam"
  input: "discriminator/layer_4/conv2d/bias/Adam_1"
  input: "discriminator_train/beta1_power/read"
  input: "discriminator_train/beta2_power/read"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "discriminator/layer_4/batch_normalization/gamma"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam_1"
  input: "discriminator_train/beta1_power/read"
  input: "discriminator_train/beta2_power/read"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "discriminator/layer_4/batch_normalization/beta"
  input: "discriminator/layer_4/batch_normalization/beta/Adam"
  input: "discriminator/layer_4/batch_normalization/beta/Adam_1"
  input: "discriminator_train/beta1_power/read"
  input: "discriminator_train/beta2_power/read"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_5/conv2d/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "discriminator/layer_5/conv2d/kernel"
  input: "discriminator/layer_5/conv2d/kernel/Adam"
  input: "discriminator/layer_5/conv2d/kernel/Adam_1"
  input: "discriminator_train/beta1_power/read"
  input: "discriminator_train/beta2_power/read"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/update_discriminator/layer_5/conv2d/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "discriminator/layer_5/conv2d/bias"
  input: "discriminator/layer_5/conv2d/bias/Adam"
  input: "discriminator/layer_5/conv2d/bias/Adam_1"
  input: "discriminator_train/beta1_power/read"
  input: "discriminator_train/beta2_power/read"
  input: "discriminator_train/Adam/learning_rate"
  input: "discriminator_train/Adam/beta1"
  input: "discriminator_train/Adam/beta2"
  input: "discriminator_train/Adam/epsilon"
  input: "discriminator_train/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "discriminator_train/Adam/mul"
  op: "Mul"
  input: "discriminator_train/beta1_power/read"
  input: "discriminator_train/Adam/beta1"
  input: "^discriminator_train/Adam/update_discriminator/layer_1/conv2d/bias/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_1/conv2d/kernel/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/beta/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/gamma/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/conv2d/bias/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/conv2d/kernel/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/beta/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/gamma/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/conv2d/bias/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/conv2d/kernel/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/beta/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/gamma/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/conv2d/bias/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/conv2d/kernel/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_5/conv2d/bias/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_5/conv2d/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/Adam/Assign"
  op: "Assign"
  input: "discriminator_train/beta1_power"
  input: "discriminator_train/Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/Adam/mul_1"
  op: "Mul"
  input: "discriminator_train/beta2_power/read"
  input: "discriminator_train/Adam/beta2"
  input: "^discriminator_train/Adam/update_discriminator/layer_1/conv2d/bias/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_1/conv2d/kernel/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/beta/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/gamma/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/conv2d/bias/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/conv2d/kernel/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/beta/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/gamma/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/conv2d/bias/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/conv2d/kernel/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/beta/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/gamma/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/conv2d/bias/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/conv2d/kernel/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_5/conv2d/bias/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_5/conv2d/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator_train/Adam/Assign_1"
  op: "Assign"
  input: "discriminator_train/beta2_power"
  input: "discriminator_train/Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_train/Adam"
  op: "NoOp"
  input: "^discriminator_train/Adam/Assign"
  input: "^discriminator_train/Adam/Assign_1"
  input: "^discriminator_train/Adam/update_discriminator/layer_1/conv2d/bias/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_1/conv2d/kernel/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/beta/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/batch_normalization/gamma/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/conv2d/bias/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_2/conv2d/kernel/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/beta/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/batch_normalization/gamma/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/conv2d/bias/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_3/conv2d/kernel/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/beta/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/batch_normalization/gamma/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/conv2d/bias/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_4/conv2d/kernel/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_5/conv2d/bias/ApplyAdam"
  input: "^discriminator_train/Adam/update_discriminator/layer_5/conv2d/kernel/ApplyAdam"
}
node {
  name: "generator_train/gradients/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/grad_ys_0"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "generator_train/gradients/Fill"
  op: "Fill"
  input: "generator_train/gradients/Shape"
  input: "generator_train/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/Fill"
}
node {
  name: "generator_train/gradients/generator_loss/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/Fill"
  input: "^generator_train/gradients/generator_loss/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/Fill"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/Fill"
  input: "^generator_train/gradients/generator_loss/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/Fill"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator_loss/add_1_grad/tuple/control_dependency"
  input: "generator_loss/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "generator_train/gradients/generator_loss/add_1_grad/tuple/control_dependency"
  input: "generator_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator_loss/mul_grad/Mul"
  input: "^generator_train/gradients/generator_loss/mul_grad/Mul_1"
}
node {
  name: "generator_train/gradients/generator_loss/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator_loss/mul_grad/Mul"
  input: "^generator_train/gradients/generator_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator_loss/mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator_loss/mul_grad/Mul_1"
  input: "^generator_train/gradients/generator_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator_loss/mul_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator_loss/add_1_grad/tuple/control_dependency_1"
  input: "generator_loss/mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/mul_1_grad/Mul_1"
  op: "Mul"
  input: "generator_train/gradients/generator_loss/add_1_grad/tuple/control_dependency_1"
  input: "generator_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator_loss/mul_1_grad/Mul"
  input: "^generator_train/gradients/generator_loss/mul_1_grad/Mul_1"
}
node {
  name: "generator_train/gradients/generator_loss/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator_loss/mul_1_grad/Mul"
  input: "^generator_train/gradients/generator_loss/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator_loss/mul_1_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator_loss/mul_1_grad/Mul_1"
  input: "^generator_train/gradients/generator_loss/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator_loss/mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator_loss/mul_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator_loss/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_grad/Shape"
  op: "Shape"
  input: "generator_loss/Neg"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_grad/Tile"
  op: "Tile"
  input: "generator_train/gradients/generator_loss/Mean_grad/Reshape"
  input: "generator_train/gradients/generator_loss/Mean_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_grad/Shape_1"
  op: "Shape"
  input: "generator_loss/Neg"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_grad/Shape_2"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_grad/Const"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_grad/Prod"
  op: "Prod"
  input: "generator_train/gradients/generator_loss/Mean_grad/Shape_1"
  input: "generator_train/gradients/generator_loss/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_grad/Const_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_grad/Prod_1"
  op: "Prod"
  input: "generator_train/gradients/generator_loss/Mean_grad/Shape_2"
  input: "generator_train/gradients/generator_loss/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_grad/Maximum/y"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_grad/Maximum"
  op: "Maximum"
  input: "generator_train/gradients/generator_loss/Mean_grad/Prod_1"
  input: "generator_train/gradients/generator_loss/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "generator_train/gradients/generator_loss/Mean_grad/Prod"
  input: "generator_train/gradients/generator_loss/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_grad/Cast"
  op: "Cast"
  input: "generator_train/gradients/generator_loss/Mean_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_grad/truediv"
  op: "RealDiv"
  input: "generator_train/gradients/generator_loss/Mean_grad/Tile"
  input: "generator_train/gradients/generator_loss/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_1_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator_loss/mul_1_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator_loss/Mean_1_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_1_grad/Shape"
  op: "Shape"
  input: "generator_loss/Abs"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_1_grad/Tile"
  op: "Tile"
  input: "generator_train/gradients/generator_loss/Mean_1_grad/Reshape"
  input: "generator_train/gradients/generator_loss/Mean_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_1_grad/Shape_1"
  op: "Shape"
  input: "generator_loss/Abs"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_1_grad/Shape_2"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_1_grad/Const"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_1_grad/Prod"
  op: "Prod"
  input: "generator_train/gradients/generator_loss/Mean_1_grad/Shape_1"
  input: "generator_train/gradients/generator_loss/Mean_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_1_grad/Const_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_1_grad/Prod_1"
  op: "Prod"
  input: "generator_train/gradients/generator_loss/Mean_1_grad/Shape_2"
  input: "generator_train/gradients/generator_loss/Mean_1_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_1_grad/Maximum/y"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_1_grad/Maximum"
  op: "Maximum"
  input: "generator_train/gradients/generator_loss/Mean_1_grad/Prod_1"
  input: "generator_train/gradients/generator_loss/Mean_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_1_grad/floordiv"
  op: "FloorDiv"
  input: "generator_train/gradients/generator_loss/Mean_1_grad/Prod"
  input: "generator_train/gradients/generator_loss/Mean_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_1_grad/Cast"
  op: "Cast"
  input: "generator_train/gradients/generator_loss/Mean_1_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Mean_1_grad/truediv"
  op: "RealDiv"
  input: "generator_train/gradients/generator_loss/Mean_1_grad/Tile"
  input: "generator_train/gradients/generator_loss/Mean_1_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Neg_grad/Neg"
  op: "Neg"
  input: "generator_train/gradients/generator_loss/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Abs_grad/Sign"
  op: "Sign"
  input: "generator_loss/sub"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/generator_loss/Mean_1_grad/truediv"
  input: "generator_train/gradients/generator_loss/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "generator_loss/add"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator_loss/Neg_grad/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/Log_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/generator_loss/Neg_grad/Neg"
  input: "generator_train/gradients/generator_loss/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/sub_grad/Shape"
  op: "Shape"
  input: "scaling_flux/preprocess/sub"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "generator/decoder_1/Tanh"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator_loss/sub_grad/Shape"
  input: "generator_train/gradients/generator_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/sub_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator_loss/Abs_grad/mul"
  input: "generator_train/gradients/generator_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator_loss/sub_grad/Sum"
  input: "generator_train/gradients/generator_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator_loss/Abs_grad/mul"
  input: "generator_train/gradients/generator_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/sub_grad/Neg"
  op: "Neg"
  input: "generator_train/gradients/generator_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator_loss/sub_grad/Neg"
  input: "generator_train/gradients/generator_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator_loss/sub_grad/Reshape"
  input: "^generator_train/gradients/generator_loss/sub_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator_loss/sub_grad/Reshape"
  input: "^generator_train/gradients/generator_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator_loss/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator_loss/sub_grad/Reshape_1"
  input: "^generator_train/gradients/generator_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator_loss/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/add_grad/Shape"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_5/Sigmoid"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/add_grad/Shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator_loss/add_grad/Shape"
  input: "generator_train/gradients/generator_loss/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/add_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator_loss/Log_grad/mul"
  input: "generator_train/gradients/generator_loss/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/add_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator_loss/add_grad/Sum"
  input: "generator_train/gradients/generator_loss/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/add_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator_loss/Log_grad/mul"
  input: "generator_train/gradients/generator_loss/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/add_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator_loss/add_grad/Sum_1"
  input: "generator_train/gradients/generator_loss/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator_loss/add_grad/Reshape"
  input: "^generator_train/gradients/generator_loss/add_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator_loss/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator_loss/add_grad/Reshape"
  input: "^generator_train/gradients/generator_loss/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator_loss/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator_loss/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator_loss/add_grad/Reshape_1"
  input: "^generator_train/gradients/generator_loss/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator_loss/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "fake_discriminator/discriminator/layer_5/Sigmoid"
  input: "generator_train/gradients/generator_loss/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_5/Sigmoid_grad/SigmoidGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "fake_discriminator/discriminator/layer_5/Pad"
  input: "discriminator/layer_5/conv2d/kernel/read"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Const"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/ShapeN"
  input: "discriminator/layer_5/conv2d/kernel/read"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "fake_discriminator/discriminator/layer_5/Pad"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Const"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 33
          }
          dim {
            size: 33
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/stack/1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/stack"
  op: "Pack"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Rank"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice/begin"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice"
  op: "Slice"
  input: "fake_discriminator/discriminator/layer_5/Pad/paddings"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice/begin"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Shape"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_4/lrelu/add"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Shape"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_4/lrelu/mul"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_4/lrelu/mul_1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Shape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_5/Pad_grad/Slice_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Sum_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Shape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_4/lrelu/mul/x"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Mul_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Sum_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Abs"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Shape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency_1"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_4/lrelu/mul_1/x"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Mul_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Sum_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "fake_discriminator/discriminator/layer_4/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN"
  op: "AddN"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_1"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_2"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_3"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "generator_train/gradients/AddN"
  input: "fake_discriminator/discriminator/layer_4/conv2d/BiasAdd"
  input: "discriminator/layer_4/batch_normalization/gamma/read"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:3"
  input: "fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 31
          }
          dim {
            size: 31
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "fake_discriminator/discriminator/layer_4/Pad"
  input: "discriminator/layer_4/conv2d/kernel/read"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Const"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/ShapeN"
  input: "discriminator/layer_4/conv2d/kernel/read"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "fake_discriminator/discriminator/layer_4/Pad"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Const"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 34
          }
          dim {
            size: 34
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/stack/1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/stack"
  op: "Pack"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Rank"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice/begin"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice"
  op: "Slice"
  input: "fake_discriminator/discriminator/layer_4/Pad/paddings"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice/begin"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Shape"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_3/lrelu/add"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Shape"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_3/lrelu/mul"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_3/lrelu/mul_1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Shape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_4/Pad_grad/Slice_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Sum_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Shape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_3/lrelu/mul/x"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Mul_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Sum_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Abs"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Shape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency_1"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_3/lrelu/mul_1/x"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Mul_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Sum_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "fake_discriminator/discriminator/layer_3/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_1"
  op: "AddN"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_4"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_5"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_6"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_7"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "generator_train/gradients/AddN_1"
  input: "fake_discriminator/discriminator/layer_3/conv2d/BiasAdd"
  input: "discriminator/layer_3/batch_normalization/gamma/read"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:3"
  input: "fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "fake_discriminator/discriminator/layer_3/Pad"
  input: "discriminator/layer_3/conv2d/kernel/read"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Const"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/ShapeN"
  input: "discriminator/layer_3/conv2d/kernel/read"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "fake_discriminator/discriminator/layer_3/Pad"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Const"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 66
          }
          dim {
            size: 66
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/stack/1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/stack"
  op: "Pack"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Rank"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice/begin"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice"
  op: "Slice"
  input: "fake_discriminator/discriminator/layer_3/Pad/paddings"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice/begin"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Shape"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_2/lrelu/add"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Shape"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_2/lrelu/mul"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_2/lrelu/mul_1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Shape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_3/Pad_grad/Slice_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Sum_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Shape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_2/lrelu/mul/x"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Mul_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Sum_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Abs"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Shape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency_1"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_2/lrelu/mul_1/x"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Mul_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Sum_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "fake_discriminator/discriminator/layer_2/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_2"
  op: "AddN"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_8"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_9"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_10"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_11"
  op: "ZerosLike"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "generator_train/gradients/AddN_2"
  input: "fake_discriminator/discriminator/layer_2/conv2d/BiasAdd"
  input: "discriminator/layer_2/batch_normalization/gamma/read"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:3"
  input: "fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "fake_discriminator/discriminator/layer_2/Pad"
  input: "discriminator/layer_2/conv2d/kernel/read"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Const"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/ShapeN"
  input: "discriminator/layer_2/conv2d/kernel/read"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "fake_discriminator/discriminator/layer_2/Pad"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Const"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 130
          }
          dim {
            size: 130
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/stack/1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/stack"
  op: "Pack"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Rank"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice/begin"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice"
  op: "Slice"
  input: "fake_discriminator/discriminator/layer_2/Pad/paddings"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice/begin"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Shape"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_1/lrelu/add"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Shape"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_1/lrelu/mul"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_1/lrelu/mul_1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Shape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_2/Pad_grad/Slice_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Sum_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Shape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_1/lrelu/mul/x"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Mul_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Sum_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Shape_1"
  op: "Shape"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Abs"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Shape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency_1"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_1/lrelu/mul_1/x"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Mul_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Sum_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "fake_discriminator/discriminator/layer_1/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_3"
  op: "AddN"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/AddN_3"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/AddN_3"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_1/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "fake_discriminator/discriminator/layer_1/Pad"
  input: "discriminator/layer_1/conv2d/kernel/read"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Const"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/ShapeN"
  input: "discriminator/layer_1/conv2d/kernel/read"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "fake_discriminator/discriminator/layer_1/Pad"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Const"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "VALID"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 258
          }
          dim {
            size: 258
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/stack/1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/stack"
  op: "Pack"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Rank"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/stack/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Slice/begin"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Slice"
  op: "Slice"
  input: "fake_discriminator/discriminator/layer_1/Pad/paddings"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Slice/begin"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/stack"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Reshape/shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Shape"
  op: "Shape"
  input: "fake_discriminator/discriminator/concat"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Reshape"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/mod"
  op: "FloorMod"
  input: "fake_discriminator/discriminator/concat/axis"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/Shape"
  op: "Shape"
  input: "concat"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/ShapeN"
  op: "ShapeN"
  input: "concat"
  input: "generator/decoder_1/Tanh"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/mod"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/ShapeN"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/Slice"
  op: "Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Slice_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/ConcatOffset"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/fake_discriminator/discriminator/layer_1/Pad_grad/Slice_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/ConcatOffset:1"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/fake_discriminator/discriminator/concat_grad/Slice"
  input: "^generator_train/gradients/fake_discriminator/discriminator/concat_grad/Slice_1"
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/Slice"
  input: "^generator_train/gradients/fake_discriminator/discriminator/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/Slice_1"
  input: "^generator_train/gradients/fake_discriminator/discriminator/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/fake_discriminator/discriminator/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_4"
  op: "AddN"
  input: "generator_train/gradients/generator_loss/sub_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/fake_discriminator/discriminator/concat_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator_loss/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "generator/decoder_1/Tanh"
  input: "generator_train/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/decoder_1/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_1/Tanh_grad/TanhGrad"
  input: "^generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_1/Tanh_grad/TanhGrad"
  input: "^generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_1/Tanh_grad/TanhGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/Shape"
  input: "generator/decoder_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator/decoder_1/conv2d_transpose/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
}
node {
  name: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/Conv2D"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "generator/decoder_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/concat_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/concat_grad/mod"
  op: "FloorMod"
  input: "generator/decoder_1/concat/axis"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/concat_grad/Shape"
  op: "Shape"
  input: "generator/decoder_2/batch_normalization/FusedBatchNorm"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/concat_grad/ShapeN"
  op: "ShapeN"
  input: "generator/decoder_2/batch_normalization/FusedBatchNorm"
  input: "generator/encoder_1/conv2d/BiasAdd"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/mod"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/ShapeN"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/concat_grad/Slice"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_1/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/ConcatOffset"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/concat_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_1/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/ConcatOffset:1"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_1/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_1/concat_grad/Slice_1"
}
node {
  name: "generator_train/gradients/generator/decoder_1/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_1/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_1/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_1/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/Slice_1"
  input: "^generator_train/gradients/generator/decoder_1/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_1/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_12"
  op: "ZerosLike"
  input: "generator/decoder_2/batch_normalization/FusedBatchNorm:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_13"
  op: "ZerosLike"
  input: "generator/decoder_2/batch_normalization/FusedBatchNorm:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_14"
  op: "ZerosLike"
  input: "generator/decoder_2/batch_normalization/FusedBatchNorm:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_15"
  op: "ZerosLike"
  input: "generator/decoder_2/batch_normalization/FusedBatchNorm:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/tuple/control_dependency"
  input: "generator/decoder_2/conv2d_transpose/BiasAdd"
  input: "generator/decoder_2/batch_normalization/gamma/read"
  input: "generator/decoder_2/batch_normalization/FusedBatchNorm:3"
  input: "generator/decoder_2/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
            size: 64
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/Shape"
  input: "generator/decoder_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator/decoder_2/conv2d_transpose/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
}
node {
  name: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/Conv2D"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "generator/decoder_2/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/concat_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/concat_grad/mod"
  op: "FloorMod"
  input: "generator/decoder_2/concat/axis"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/concat_grad/Shape"
  op: "Shape"
  input: "generator/decoder_3/batch_normalization/FusedBatchNorm"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/concat_grad/ShapeN"
  op: "ShapeN"
  input: "generator/decoder_3/batch_normalization/FusedBatchNorm"
  input: "generator/encoder_2/batch_normalization/FusedBatchNorm"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/mod"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/ShapeN"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/concat_grad/Slice"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_2/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/ConcatOffset"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/concat_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_2/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/ConcatOffset:1"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_2/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_2/concat_grad/Slice_1"
}
node {
  name: "generator_train/gradients/generator/decoder_2/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_2/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_2/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/Slice_1"
  input: "^generator_train/gradients/generator/decoder_2/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_16"
  op: "ZerosLike"
  input: "generator/decoder_3/batch_normalization/FusedBatchNorm:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_17"
  op: "ZerosLike"
  input: "generator/decoder_3/batch_normalization/FusedBatchNorm:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_18"
  op: "ZerosLike"
  input: "generator/decoder_3/batch_normalization/FusedBatchNorm:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_19"
  op: "ZerosLike"
  input: "generator/decoder_3/batch_normalization/FusedBatchNorm:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/tuple/control_dependency"
  input: "generator/decoder_3/conv2d_transpose/BiasAdd"
  input: "generator/decoder_3/batch_normalization/gamma/read"
  input: "generator/decoder_3/batch_normalization/FusedBatchNorm:3"
  input: "generator/decoder_3/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/Shape"
  input: "generator/decoder_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator/decoder_3/conv2d_transpose/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
}
node {
  name: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/Conv2D"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "generator/decoder_3/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/concat_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/concat_grad/mod"
  op: "FloorMod"
  input: "generator/decoder_3/concat/axis"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/concat_grad/Shape"
  op: "Shape"
  input: "generator/decoder_4/batch_normalization/FusedBatchNorm"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/concat_grad/ShapeN"
  op: "ShapeN"
  input: "generator/decoder_4/batch_normalization/FusedBatchNorm"
  input: "generator/encoder_3/batch_normalization/FusedBatchNorm"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/mod"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/ShapeN"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/concat_grad/Slice"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_3/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/ConcatOffset"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/concat_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_3/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/ConcatOffset:1"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_3/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_3/concat_grad/Slice_1"
}
node {
  name: "generator_train/gradients/generator/decoder_3/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_3/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_3/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/Slice_1"
  input: "^generator_train/gradients/generator/decoder_3/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_20"
  op: "ZerosLike"
  input: "generator/decoder_4/batch_normalization/FusedBatchNorm:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_21"
  op: "ZerosLike"
  input: "generator/decoder_4/batch_normalization/FusedBatchNorm:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_22"
  op: "ZerosLike"
  input: "generator/decoder_4/batch_normalization/FusedBatchNorm:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_23"
  op: "ZerosLike"
  input: "generator/decoder_4/batch_normalization/FusedBatchNorm:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/tuple/control_dependency"
  input: "generator/decoder_4/conv2d_transpose/BiasAdd"
  input: "generator/decoder_4/batch_normalization/gamma/read"
  input: "generator/decoder_4/batch_normalization/FusedBatchNorm:3"
  input: "generator/decoder_4/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/Shape"
  input: "generator/decoder_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator/decoder_4/conv2d_transpose/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
}
node {
  name: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/Conv2D"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "generator/decoder_4/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/concat_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/concat_grad/mod"
  op: "FloorMod"
  input: "generator/decoder_4/concat/axis"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/concat_grad/Shape"
  op: "Shape"
  input: "generator/decoder_5/batch_normalization/FusedBatchNorm"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/concat_grad/ShapeN"
  op: "ShapeN"
  input: "generator/decoder_5/batch_normalization/FusedBatchNorm"
  input: "generator/encoder_4/batch_normalization/FusedBatchNorm"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/mod"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/ShapeN"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/concat_grad/Slice"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_4/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/ConcatOffset"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/concat_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_4/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/ConcatOffset:1"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_4/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_4/concat_grad/Slice_1"
}
node {
  name: "generator_train/gradients/generator/decoder_4/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_4/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_4/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/Slice_1"
  input: "^generator_train/gradients/generator/decoder_4/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_24"
  op: "ZerosLike"
  input: "generator/decoder_5/batch_normalization/FusedBatchNorm:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_25"
  op: "ZerosLike"
  input: "generator/decoder_5/batch_normalization/FusedBatchNorm:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_26"
  op: "ZerosLike"
  input: "generator/decoder_5/batch_normalization/FusedBatchNorm:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_27"
  op: "ZerosLike"
  input: "generator/decoder_5/batch_normalization/FusedBatchNorm:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/tuple/control_dependency"
  input: "generator/decoder_5/conv2d_transpose/BiasAdd"
  input: "generator/decoder_5/batch_normalization/gamma/read"
  input: "generator/decoder_5/batch_normalization/FusedBatchNorm:3"
  input: "generator/decoder_5/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/Shape"
  input: "generator/decoder_5/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator/decoder_5/conv2d_transpose/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
}
node {
  name: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/Conv2D"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "generator/decoder_5/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/concat_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/concat_grad/mod"
  op: "FloorMod"
  input: "generator/decoder_5/concat/axis"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/concat_grad/Shape"
  op: "Shape"
  input: "generator/decoder_6/dropout/mul"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/concat_grad/ShapeN"
  op: "ShapeN"
  input: "generator/decoder_6/dropout/mul"
  input: "generator/encoder_5/batch_normalization/FusedBatchNorm"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/mod"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/ShapeN"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/concat_grad/Slice"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_5/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/ConcatOffset"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/concat_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_5/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/ConcatOffset:1"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_5/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_5/concat_grad/Slice_1"
}
node {
  name: "generator_train/gradients/generator/decoder_5/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_5/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_5/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/Slice_1"
  input: "^generator_train/gradients/generator/decoder_5/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/Shape"
  op: "Shape"
  input: "generator/decoder_6/dropout/div"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "generator/decoder_6/dropout/Floor"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/Shape"
  input: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/tuple/control_dependency"
  input: "generator/decoder_6/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/Mul"
  input: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/Sum"
  input: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "generator/decoder_6/dropout/div"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/Mul_1"
  input: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/Sum_1"
  input: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_6/dropout/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/decoder_6/dropout/mul_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/decoder_6/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/Reshape_1"
  input: "^generator_train/gradients/generator/decoder_6/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/div_grad/Shape"
  op: "Shape"
  input: "generator/decoder_6/batch_normalization/FusedBatchNorm"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/div_grad/Shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/decoder_6/dropout/div_grad/Shape"
  input: "generator_train/gradients/generator/decoder_6/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/tuple/control_dependency"
  input: "generator/decoder_6/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/div_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/decoder_6/dropout/div_grad/RealDiv"
  input: "generator_train/gradients/generator/decoder_6/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/decoder_6/dropout/div_grad/Sum"
  input: "generator_train/gradients/generator/decoder_6/dropout/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/div_grad/Neg"
  op: "Neg"
  input: "generator/decoder_6/batch_normalization/FusedBatchNorm"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "generator_train/gradients/generator/decoder_6/dropout/div_grad/Neg"
  input: "generator/decoder_6/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "generator_train/gradients/generator/decoder_6/dropout/div_grad/RealDiv_1"
  input: "generator/decoder_6/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/div_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/generator/decoder_6/dropout/mul_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/decoder_6/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/decoder_6/dropout/div_grad/mul"
  input: "generator_train/gradients/generator/decoder_6/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/decoder_6/dropout/div_grad/Sum_1"
  input: "generator_train/gradients/generator/decoder_6/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_6/dropout/div_grad/Reshape"
  input: "^generator_train/gradients/generator/decoder_6/dropout/div_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/dropout/div_grad/Reshape"
  input: "^generator_train/gradients/generator/decoder_6/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/dropout/div_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/dropout/div_grad/Reshape_1"
  input: "^generator_train/gradients/generator/decoder_6/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/dropout/div_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_28"
  op: "ZerosLike"
  input: "generator/decoder_6/batch_normalization/FusedBatchNorm:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_29"
  op: "ZerosLike"
  input: "generator/decoder_6/batch_normalization/FusedBatchNorm:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_30"
  op: "ZerosLike"
  input: "generator/decoder_6/batch_normalization/FusedBatchNorm:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_31"
  op: "ZerosLike"
  input: "generator/decoder_6/batch_normalization/FusedBatchNorm:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "generator_train/gradients/generator/decoder_6/dropout/div_grad/tuple/control_dependency"
  input: "generator/decoder_6/conv2d_transpose/BiasAdd"
  input: "generator/decoder_6/batch_normalization/gamma/read"
  input: "generator/decoder_6/batch_normalization/FusedBatchNorm:3"
  input: "generator/decoder_6/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/Shape"
  input: "generator/decoder_6/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator/decoder_6/conv2d_transpose/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
}
node {
  name: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/Conv2D"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "generator/decoder_6/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/concat_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/concat_grad/mod"
  op: "FloorMod"
  input: "generator/decoder_6/concat/axis"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/concat_grad/Shape"
  op: "Shape"
  input: "generator/decoder_7/dropout/mul"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/concat_grad/ShapeN"
  op: "ShapeN"
  input: "generator/decoder_7/dropout/mul"
  input: "generator/encoder_6/batch_normalization/FusedBatchNorm"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/mod"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/ShapeN"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/concat_grad/Slice"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_6/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/ConcatOffset"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/concat_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_6/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/ConcatOffset:1"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_6/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_6/concat_grad/Slice_1"
}
node {
  name: "generator_train/gradients/generator/decoder_6/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_6/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_6/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/Slice_1"
  input: "^generator_train/gradients/generator/decoder_6/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/Shape"
  op: "Shape"
  input: "generator/decoder_7/dropout/div"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "generator/decoder_7/dropout/Floor"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/Shape"
  input: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/tuple/control_dependency"
  input: "generator/decoder_7/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/Mul"
  input: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/Sum"
  input: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "generator/decoder_7/dropout/div"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/Mul_1"
  input: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/Sum_1"
  input: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_7/dropout/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/decoder_7/dropout/mul_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/decoder_7/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/Reshape_1"
  input: "^generator_train/gradients/generator/decoder_7/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/div_grad/Shape"
  op: "Shape"
  input: "generator/decoder_7/batch_normalization/FusedBatchNorm"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/div_grad/Shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/decoder_7/dropout/div_grad/Shape"
  input: "generator_train/gradients/generator/decoder_7/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/tuple/control_dependency"
  input: "generator/decoder_7/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/div_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/decoder_7/dropout/div_grad/RealDiv"
  input: "generator_train/gradients/generator/decoder_7/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/decoder_7/dropout/div_grad/Sum"
  input: "generator_train/gradients/generator/decoder_7/dropout/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/div_grad/Neg"
  op: "Neg"
  input: "generator/decoder_7/batch_normalization/FusedBatchNorm"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "generator_train/gradients/generator/decoder_7/dropout/div_grad/Neg"
  input: "generator/decoder_7/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "generator_train/gradients/generator/decoder_7/dropout/div_grad/RealDiv_1"
  input: "generator/decoder_7/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/div_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/generator/decoder_7/dropout/mul_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/decoder_7/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/decoder_7/dropout/div_grad/mul"
  input: "generator_train/gradients/generator/decoder_7/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/decoder_7/dropout/div_grad/Sum_1"
  input: "generator_train/gradients/generator/decoder_7/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_7/dropout/div_grad/Reshape"
  input: "^generator_train/gradients/generator/decoder_7/dropout/div_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/dropout/div_grad/Reshape"
  input: "^generator_train/gradients/generator/decoder_7/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/dropout/div_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/dropout/div_grad/Reshape_1"
  input: "^generator_train/gradients/generator/decoder_7/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/dropout/div_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_32"
  op: "ZerosLike"
  input: "generator/decoder_7/batch_normalization/FusedBatchNorm:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_33"
  op: "ZerosLike"
  input: "generator/decoder_7/batch_normalization/FusedBatchNorm:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_34"
  op: "ZerosLike"
  input: "generator/decoder_7/batch_normalization/FusedBatchNorm:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_35"
  op: "ZerosLike"
  input: "generator/decoder_7/batch_normalization/FusedBatchNorm:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "generator_train/gradients/generator/decoder_7/dropout/div_grad/tuple/control_dependency"
  input: "generator/decoder_7/conv2d_transpose/BiasAdd"
  input: "generator/decoder_7/batch_normalization/gamma/read"
  input: "generator/decoder_7/batch_normalization/FusedBatchNorm:3"
  input: "generator/decoder_7/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/Shape"
  input: "generator/decoder_7/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator/decoder_7/conv2d_transpose/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
}
node {
  name: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/Conv2D"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "generator/decoder_7/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/concat_grad/Rank"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/concat_grad/mod"
  op: "FloorMod"
  input: "generator/decoder_7/concat/axis"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/concat_grad/Shape"
  op: "Shape"
  input: "generator/decoder_8/dropout/mul"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/concat_grad/ShapeN"
  op: "ShapeN"
  input: "generator/decoder_8/dropout/mul"
  input: "generator/encoder_7/batch_normalization/FusedBatchNorm"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/mod"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/ShapeN"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/ShapeN:1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/concat_grad/Slice"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_7/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/ConcatOffset"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/concat_grad/Slice_1"
  op: "Slice"
  input: "generator_train/gradients/generator/decoder_7/Relu_grad/ReluGrad"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/ConcatOffset:1"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_7/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_7/concat_grad/Slice_1"
}
node {
  name: "generator_train/gradients/generator/decoder_7/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/Slice"
  input: "^generator_train/gradients/generator/decoder_7/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_7/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/Slice_1"
  input: "^generator_train/gradients/generator/decoder_7/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/Shape"
  op: "Shape"
  input: "generator/decoder_8/dropout/div"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "generator/decoder_8/dropout/Floor"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/Shape"
  input: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/tuple/control_dependency"
  input: "generator/decoder_8/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/Mul"
  input: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/Sum"
  input: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "generator/decoder_8/dropout/div"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/Mul_1"
  input: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/Sum_1"
  input: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_8/dropout/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/decoder_8/dropout/mul_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/decoder_8/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/dropout/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/Reshape_1"
  input: "^generator_train/gradients/generator/decoder_8/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/dropout/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/div_grad/Shape"
  op: "Shape"
  input: "generator/decoder_8/batch_normalization/FusedBatchNorm"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/div_grad/Shape_1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/div_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/decoder_8/dropout/div_grad/Shape"
  input: "generator_train/gradients/generator/decoder_8/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/div_grad/RealDiv"
  op: "RealDiv"
  input: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/tuple/control_dependency"
  input: "generator/decoder_8/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/div_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/decoder_8/dropout/div_grad/RealDiv"
  input: "generator_train/gradients/generator/decoder_8/dropout/div_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/div_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/decoder_8/dropout/div_grad/Sum"
  input: "generator_train/gradients/generator/decoder_8/dropout/div_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/div_grad/Neg"
  op: "Neg"
  input: "generator/decoder_8/batch_normalization/FusedBatchNorm"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/div_grad/RealDiv_1"
  op: "RealDiv"
  input: "generator_train/gradients/generator/decoder_8/dropout/div_grad/Neg"
  input: "generator/decoder_8/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/div_grad/RealDiv_2"
  op: "RealDiv"
  input: "generator_train/gradients/generator/decoder_8/dropout/div_grad/RealDiv_1"
  input: "generator/decoder_8/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/div_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/generator/decoder_8/dropout/mul_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/decoder_8/dropout/div_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/div_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/decoder_8/dropout/div_grad/mul"
  input: "generator_train/gradients/generator/decoder_8/dropout/div_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/div_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/decoder_8/dropout/div_grad/Sum_1"
  input: "generator_train/gradients/generator/decoder_8/dropout/div_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/div_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_8/dropout/div_grad/Reshape"
  input: "^generator_train/gradients/generator/decoder_8/dropout/div_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/div_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/dropout/div_grad/Reshape"
  input: "^generator_train/gradients/generator/decoder_8/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/dropout/div_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/dropout/div_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/dropout/div_grad/Reshape_1"
  input: "^generator_train/gradients/generator/decoder_8/dropout/div_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/dropout/div_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_36"
  op: "ZerosLike"
  input: "generator/decoder_8/batch_normalization/FusedBatchNorm:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_37"
  op: "ZerosLike"
  input: "generator/decoder_8/batch_normalization/FusedBatchNorm:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_38"
  op: "ZerosLike"
  input: "generator/decoder_8/batch_normalization/FusedBatchNorm:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_39"
  op: "ZerosLike"
  input: "generator/decoder_8/batch_normalization/FusedBatchNorm:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "generator_train/gradients/generator/decoder_8/dropout/div_grad/tuple/control_dependency"
  input: "generator/decoder_8/conv2d_transpose/BiasAdd"
  input: "generator/decoder_8/batch_normalization/gamma/read"
  input: "generator/decoder_8/batch_normalization/FusedBatchNorm:3"
  input: "generator/decoder_8/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/Shape"
  input: "generator/decoder_8/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  op: "Conv2D"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/tuple/control_dependency"
  input: "generator/decoder_8/conv2d_transpose/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
}
node {
  name: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/Conv2D"
  input: "^generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/Conv2D"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/decoder_8/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency_1"
  input: "generator/decoder_8/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_40"
  op: "ZerosLike"
  input: "generator/encoder_8/batch_normalization/FusedBatchNorm:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_41"
  op: "ZerosLike"
  input: "generator/encoder_8/batch_normalization/FusedBatchNorm:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_42"
  op: "ZerosLike"
  input: "generator/encoder_8/batch_normalization/FusedBatchNorm:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_43"
  op: "ZerosLike"
  input: "generator/encoder_8/batch_normalization/FusedBatchNorm:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "generator_train/gradients/generator/decoder_8/Relu_grad/ReluGrad"
  input: "generator/encoder_8/conv2d/BiasAdd"
  input: "generator/encoder_8/batch_normalization/gamma/read"
  input: "generator/encoder_8/batch_normalization/FusedBatchNorm:3"
  input: "generator/encoder_8/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "generator/encoder_8/lrelu/add"
  input: "generator/encoder_8/conv2d/kernel/read"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/Const"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/ShapeN"
  input: "generator/encoder_8/conv2d/kernel/read"
  input: "generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator/encoder_8/lrelu/add"
  input: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/Const"
  input: "generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/Shape"
  op: "Shape"
  input: "generator/encoder_8/lrelu/mul"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/Shape_1"
  op: "Shape"
  input: "generator/encoder_8/lrelu/mul_1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/Shape"
  input: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/Sum"
  input: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/Sum_1"
  input: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/add_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/lrelu/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/Reshape_1"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/lrelu/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Shape_1"
  op: "Shape"
  input: "generator/encoder_8/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Shape"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/tuple/control_dependency"
  input: "generator/encoder_8/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_8/lrelu/mul/x"
  input: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Mul_1"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Sum_1"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Reshape_1"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Shape_1"
  op: "Shape"
  input: "generator/encoder_8/lrelu/Abs"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Shape"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/tuple/control_dependency_1"
  input: "generator/encoder_8/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_8/lrelu/mul_1/x"
  input: "generator_train/gradients/generator/encoder_8/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Mul_1"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Sum_1"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Reshape_1"
  input: "^generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "generator/encoder_8/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_8/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_8/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_5"
  op: "AddN"
  input: "generator_train/gradients/generator/encoder_8/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_8/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_8/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_6"
  op: "AddN"
  input: "generator_train/gradients/generator/decoder_7/concat_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/AddN_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_7/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_44"
  op: "ZerosLike"
  input: "generator/encoder_7/batch_normalization/FusedBatchNorm:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_45"
  op: "ZerosLike"
  input: "generator/encoder_7/batch_normalization/FusedBatchNorm:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_46"
  op: "ZerosLike"
  input: "generator/encoder_7/batch_normalization/FusedBatchNorm:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_47"
  op: "ZerosLike"
  input: "generator/encoder_7/batch_normalization/FusedBatchNorm:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "generator_train/gradients/AddN_6"
  input: "generator/encoder_7/conv2d/BiasAdd"
  input: "generator/encoder_7/batch_normalization/gamma/read"
  input: "generator/encoder_7/batch_normalization/FusedBatchNorm:3"
  input: "generator/encoder_7/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
          dim {
            size: 2
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "generator/encoder_7/lrelu/add"
  input: "generator/encoder_7/conv2d/kernel/read"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/Const"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/ShapeN"
  input: "generator/encoder_7/conv2d/kernel/read"
  input: "generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator/encoder_7/lrelu/add"
  input: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/Const"
  input: "generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/Shape"
  op: "Shape"
  input: "generator/encoder_7/lrelu/mul"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/Shape_1"
  op: "Shape"
  input: "generator/encoder_7/lrelu/mul_1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/Shape"
  input: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/Sum"
  input: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/Sum_1"
  input: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/add_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/lrelu/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/Reshape_1"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/lrelu/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Shape_1"
  op: "Shape"
  input: "generator/encoder_7/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Shape"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/tuple/control_dependency"
  input: "generator/encoder_7/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_7/lrelu/mul/x"
  input: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Mul_1"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Sum_1"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Reshape_1"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Shape_1"
  op: "Shape"
  input: "generator/encoder_7/lrelu/Abs"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Shape"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/tuple/control_dependency_1"
  input: "generator/encoder_7/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_7/lrelu/mul_1/x"
  input: "generator_train/gradients/generator/encoder_7/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Mul_1"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Sum_1"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Reshape_1"
  input: "^generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "generator/encoder_7/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_7/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_7/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_7"
  op: "AddN"
  input: "generator_train/gradients/generator/encoder_7/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_7/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_7/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_8"
  op: "AddN"
  input: "generator_train/gradients/generator/decoder_6/concat_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/AddN_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_6/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_48"
  op: "ZerosLike"
  input: "generator/encoder_6/batch_normalization/FusedBatchNorm:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_49"
  op: "ZerosLike"
  input: "generator/encoder_6/batch_normalization/FusedBatchNorm:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_50"
  op: "ZerosLike"
  input: "generator/encoder_6/batch_normalization/FusedBatchNorm:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_51"
  op: "ZerosLike"
  input: "generator/encoder_6/batch_normalization/FusedBatchNorm:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "generator_train/gradients/AddN_8"
  input: "generator/encoder_6/conv2d/BiasAdd"
  input: "generator/encoder_6/batch_normalization/gamma/read"
  input: "generator/encoder_6/batch_normalization/FusedBatchNorm:3"
  input: "generator/encoder_6/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "generator/encoder_6/lrelu/add"
  input: "generator/encoder_6/conv2d/kernel/read"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/Const"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/ShapeN"
  input: "generator/encoder_6/conv2d/kernel/read"
  input: "generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator/encoder_6/lrelu/add"
  input: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/Const"
  input: "generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/Shape"
  op: "Shape"
  input: "generator/encoder_6/lrelu/mul"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/Shape_1"
  op: "Shape"
  input: "generator/encoder_6/lrelu/mul_1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/Shape"
  input: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/Sum"
  input: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/Sum_1"
  input: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/add_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/lrelu/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/Reshape_1"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/lrelu/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Shape_1"
  op: "Shape"
  input: "generator/encoder_6/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Shape"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/tuple/control_dependency"
  input: "generator/encoder_6/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_6/lrelu/mul/x"
  input: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Mul_1"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Sum_1"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Reshape_1"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Shape_1"
  op: "Shape"
  input: "generator/encoder_6/lrelu/Abs"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Shape"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/tuple/control_dependency_1"
  input: "generator/encoder_6/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_6/lrelu/mul_1/x"
  input: "generator_train/gradients/generator/encoder_6/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Mul_1"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Sum_1"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Reshape_1"
  input: "^generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "generator/encoder_6/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_6/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_6/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_9"
  op: "AddN"
  input: "generator_train/gradients/generator/encoder_6/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_6/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_6/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_10"
  op: "AddN"
  input: "generator_train/gradients/generator/decoder_5/concat_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/AddN_9"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_5/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_52"
  op: "ZerosLike"
  input: "generator/encoder_5/batch_normalization/FusedBatchNorm:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_53"
  op: "ZerosLike"
  input: "generator/encoder_5/batch_normalization/FusedBatchNorm:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_54"
  op: "ZerosLike"
  input: "generator/encoder_5/batch_normalization/FusedBatchNorm:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_55"
  op: "ZerosLike"
  input: "generator/encoder_5/batch_normalization/FusedBatchNorm:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "generator_train/gradients/AddN_10"
  input: "generator/encoder_5/conv2d/BiasAdd"
  input: "generator/encoder_5/batch_normalization/gamma/read"
  input: "generator/encoder_5/batch_normalization/FusedBatchNorm:3"
  input: "generator/encoder_5/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 8
          }
          dim {
            size: 8
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "generator/encoder_5/lrelu/add"
  input: "generator/encoder_5/conv2d/kernel/read"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/Const"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/ShapeN"
  input: "generator/encoder_5/conv2d/kernel/read"
  input: "generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator/encoder_5/lrelu/add"
  input: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/Const"
  input: "generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/Shape"
  op: "Shape"
  input: "generator/encoder_5/lrelu/mul"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/Shape_1"
  op: "Shape"
  input: "generator/encoder_5/lrelu/mul_1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/Shape"
  input: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/Sum"
  input: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/Sum_1"
  input: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/add_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/lrelu/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/Reshape_1"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/lrelu/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Shape_1"
  op: "Shape"
  input: "generator/encoder_5/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Shape"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/tuple/control_dependency"
  input: "generator/encoder_5/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_5/lrelu/mul/x"
  input: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Mul_1"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Sum_1"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Reshape_1"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Shape_1"
  op: "Shape"
  input: "generator/encoder_5/lrelu/Abs"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Shape"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/tuple/control_dependency_1"
  input: "generator/encoder_5/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_5/lrelu/mul_1/x"
  input: "generator_train/gradients/generator/encoder_5/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Mul_1"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Sum_1"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Reshape_1"
  input: "^generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "generator/encoder_5/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_5/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_5/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_11"
  op: "AddN"
  input: "generator_train/gradients/generator/encoder_5/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_5/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_5/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_12"
  op: "AddN"
  input: "generator_train/gradients/generator/decoder_4/concat_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/AddN_11"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_4/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_56"
  op: "ZerosLike"
  input: "generator/encoder_4/batch_normalization/FusedBatchNorm:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_57"
  op: "ZerosLike"
  input: "generator/encoder_4/batch_normalization/FusedBatchNorm:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_58"
  op: "ZerosLike"
  input: "generator/encoder_4/batch_normalization/FusedBatchNorm:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_59"
  op: "ZerosLike"
  input: "generator/encoder_4/batch_normalization/FusedBatchNorm:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "generator_train/gradients/AddN_12"
  input: "generator/encoder_4/conv2d/BiasAdd"
  input: "generator/encoder_4/batch_normalization/gamma/read"
  input: "generator/encoder_4/batch_normalization/FusedBatchNorm:3"
  input: "generator/encoder_4/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
            size: 512
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 16
          }
          dim {
            size: 16
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "generator/encoder_4/lrelu/add"
  input: "generator/encoder_4/conv2d/kernel/read"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/Const"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/ShapeN"
  input: "generator/encoder_4/conv2d/kernel/read"
  input: "generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator/encoder_4/lrelu/add"
  input: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/Const"
  input: "generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/Shape"
  op: "Shape"
  input: "generator/encoder_4/lrelu/mul"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/Shape_1"
  op: "Shape"
  input: "generator/encoder_4/lrelu/mul_1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/Shape"
  input: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/Sum"
  input: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/Sum_1"
  input: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/add_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/lrelu/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/Reshape_1"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/lrelu/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Shape_1"
  op: "Shape"
  input: "generator/encoder_4/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Shape"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/tuple/control_dependency"
  input: "generator/encoder_4/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_4/lrelu/mul/x"
  input: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Mul_1"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Sum_1"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Reshape_1"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Shape_1"
  op: "Shape"
  input: "generator/encoder_4/lrelu/Abs"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Shape"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/tuple/control_dependency_1"
  input: "generator/encoder_4/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_4/lrelu/mul_1/x"
  input: "generator_train/gradients/generator/encoder_4/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Mul_1"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Sum_1"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Reshape_1"
  input: "^generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "generator/encoder_4/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_4/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_4/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_13"
  op: "AddN"
  input: "generator_train/gradients/generator/encoder_4/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_4/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_4/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_14"
  op: "AddN"
  input: "generator_train/gradients/generator/decoder_3/concat_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/AddN_13"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_3/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_60"
  op: "ZerosLike"
  input: "generator/encoder_3/batch_normalization/FusedBatchNorm:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_61"
  op: "ZerosLike"
  input: "generator/encoder_3/batch_normalization/FusedBatchNorm:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_62"
  op: "ZerosLike"
  input: "generator/encoder_3/batch_normalization/FusedBatchNorm:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_63"
  op: "ZerosLike"
  input: "generator/encoder_3/batch_normalization/FusedBatchNorm:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "generator_train/gradients/AddN_14"
  input: "generator/encoder_3/conv2d/BiasAdd"
  input: "generator/encoder_3/batch_normalization/gamma/read"
  input: "generator/encoder_3/batch_normalization/FusedBatchNorm:3"
  input: "generator/encoder_3/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 32
          }
          dim {
            size: 32
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "generator/encoder_3/lrelu/add"
  input: "generator/encoder_3/conv2d/kernel/read"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/Const"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/ShapeN"
  input: "generator/encoder_3/conv2d/kernel/read"
  input: "generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator/encoder_3/lrelu/add"
  input: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/Const"
  input: "generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/Shape"
  op: "Shape"
  input: "generator/encoder_3/lrelu/mul"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/Shape_1"
  op: "Shape"
  input: "generator/encoder_3/lrelu/mul_1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/Shape"
  input: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/Sum"
  input: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/Sum_1"
  input: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/add_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/lrelu/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/Reshape_1"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/lrelu/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Shape_1"
  op: "Shape"
  input: "generator/encoder_3/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Shape"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/tuple/control_dependency"
  input: "generator/encoder_3/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_3/lrelu/mul/x"
  input: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Mul_1"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Sum_1"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Reshape_1"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Shape_1"
  op: "Shape"
  input: "generator/encoder_3/lrelu/Abs"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Shape"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/tuple/control_dependency_1"
  input: "generator/encoder_3/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_3/lrelu/mul_1/x"
  input: "generator_train/gradients/generator/encoder_3/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Mul_1"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Sum_1"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Reshape_1"
  input: "^generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "generator/encoder_3/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_3/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_3/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_15"
  op: "AddN"
  input: "generator_train/gradients/generator/encoder_3/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_3/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_3/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_16"
  op: "AddN"
  input: "generator_train/gradients/generator/decoder_2/concat_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/AddN_15"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_2/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_64"
  op: "ZerosLike"
  input: "generator/encoder_2/batch_normalization/FusedBatchNorm:1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_65"
  op: "ZerosLike"
  input: "generator/encoder_2/batch_normalization/FusedBatchNorm:2"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_66"
  op: "ZerosLike"
  input: "generator/encoder_2/batch_normalization/FusedBatchNorm:3"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/zeros_like_67"
  op: "ZerosLike"
  input: "generator/encoder_2/batch_normalization/FusedBatchNorm:4"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  op: "FusedBatchNormGrad"
  input: "generator_train/gradients/AddN_16"
  input: "generator/encoder_2/conv2d/BiasAdd"
  input: "generator/encoder_2/batch_normalization/gamma/read"
  input: "generator/encoder_2/batch_normalization/FusedBatchNorm:3"
  input: "generator/encoder_2/batch_normalization/FusedBatchNorm:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
            size: 128
          }
        }
        shape {
          dim {
          }
        }
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "epsilon"
    value {
      f: 1.0009999641624745e-05
    }
  }
  attr {
    key: "is_training"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
  input: "^generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:1"
  input: "^generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:2"
  input: "^generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_3"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:3"
  input: "^generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_4"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad:4"
  input: "^generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency"
  input: "^generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/FusedBatchNormGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 64
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "generator/encoder_2/lrelu/add"
  input: "generator/encoder_2/conv2d/kernel/read"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/Const"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/ShapeN"
  input: "generator/encoder_2/conv2d/kernel/read"
  input: "generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "generator/encoder_2/lrelu/add"
  input: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/Const"
  input: "generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/Shape"
  op: "Shape"
  input: "generator/encoder_2/lrelu/mul"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/Shape_1"
  op: "Shape"
  input: "generator/encoder_2/lrelu/mul_1"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/Shape"
  input: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/Sum"
  input: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/tuple/control_dependency"
  input: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/Sum_1"
  input: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/add_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/lrelu/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/Reshape_1"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/lrelu/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Shape_1"
  op: "Shape"
  input: "generator/encoder_2/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Shape"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/tuple/control_dependency"
  input: "generator/encoder_2/lrelu/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Mul"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Sum"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_2/lrelu/mul/x"
  input: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Mul_1"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Sum_1"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Reshape_1"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Shape"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Shape_1"
  op: "Shape"
  input: "generator/encoder_2/lrelu/Abs"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Shape"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/tuple/control_dependency_1"
  input: "generator/encoder_2/lrelu/Abs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Sum"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Mul"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Reshape"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Sum"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Mul_1"
  op: "Mul"
  input: "generator/encoder_2/lrelu/mul_1/x"
  input: "generator_train/gradients/generator/encoder_2/lrelu/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Sum_1"
  op: "Sum"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Mul_1"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Sum_1"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Reshape_1"
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Reshape"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Reshape_1"
  input: "^generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/Abs_grad/Sign"
  op: "Sign"
  input: "generator/encoder_2/lrelu/Identity"
  input: "^discriminator_train/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_2/lrelu/Abs_grad/mul"
  op: "Mul"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_1_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_2/lrelu/Abs_grad/Sign"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_17"
  op: "AddN"
  input: "generator_train/gradients/generator/encoder_2/lrelu/mul_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/generator/encoder_2/lrelu/Abs_grad/mul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_2/lrelu/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/AddN_18"
  op: "AddN"
  input: "generator_train/gradients/generator/decoder_1/concat_grad/tuple/control_dependency_1"
  input: "generator_train/gradients/AddN_17"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_1/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "generator_train/gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/AddN_18"
  input: "^generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/AddN_18"
  input: "^generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/decoder_1/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 128
          }
          dim {
            size: 128
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/BiasAddGrad"
  input: "^generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "concat"
  input: "generator/encoder_1/conv2d/kernel/read"
  input: "^discriminator_train/Adam"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/Const"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\002\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/ShapeN"
  input: "generator/encoder_1/conv2d/kernel/read"
  input: "generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "concat"
  input: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/Const"
  input: "generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
  input: "^generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
  input: "^generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "generator_train/beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator_train/beta1_power/Assign"
  op: "Assign"
  input: "generator_train/beta1_power"
  input: "generator_train/beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/beta1_power/read"
  op: "Identity"
  input: "generator_train/beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "generator_train/beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator_train/beta2_power/Assign"
  op: "Assign"
  input: "generator_train/beta2_power"
  input: "generator_train/beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/beta2_power/read"
  op: "Identity"
  input: "generator_train/beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\002\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_1/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_1/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 2
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_1/conv2d/kernel/Adam"
  input: "generator/encoder_1/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam/read"
  op: "Identity"
  input: "generator/encoder_1/conv2d/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\002\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_1/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_1/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 2
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_1/conv2d/kernel/Adam_1"
  input: "generator/encoder_1/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_1/conv2d/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_1/conv2d/bias/Adam"
  input: "generator/encoder_1/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Adam/read"
  op: "Identity"
  input: "generator/encoder_1/conv2d/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_1/conv2d/bias/Adam_1"
  input: "generator/encoder_1/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_1/conv2d/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_2/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_2/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_2/conv2d/kernel/Adam"
  input: "generator/encoder_2/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam/read"
  op: "Identity"
  input: "generator/encoder_2/conv2d/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_2/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_2/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_2/conv2d/kernel/Adam_1"
  input: "generator/encoder_2/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_2/conv2d/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_2/conv2d/bias/Adam"
  input: "generator/encoder_2/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Adam/read"
  op: "Identity"
  input: "generator/encoder_2/conv2d/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_2/conv2d/bias/Adam_1"
  input: "generator/encoder_2/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_2/conv2d/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_2/batch_normalization/gamma/Adam"
  input: "generator/encoder_2/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "generator/encoder_2/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_2/batch_normalization/gamma/Adam_1"
  input: "generator/encoder_2/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_2/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_2/batch_normalization/beta/Adam"
  input: "generator/encoder_2/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "generator/encoder_2/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_2/batch_normalization/beta/Adam_1"
  input: "generator/encoder_2/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_2/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_3/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_3/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_3/conv2d/kernel/Adam"
  input: "generator/encoder_3/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam/read"
  op: "Identity"
  input: "generator/encoder_3/conv2d/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_3/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_3/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_3/conv2d/kernel/Adam_1"
  input: "generator/encoder_3/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_3/conv2d/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_3/conv2d/bias/Adam"
  input: "generator/encoder_3/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Adam/read"
  op: "Identity"
  input: "generator/encoder_3/conv2d/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_3/conv2d/bias/Adam_1"
  input: "generator/encoder_3/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_3/conv2d/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_3/batch_normalization/gamma/Adam"
  input: "generator/encoder_3/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "generator/encoder_3/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_3/batch_normalization/gamma/Adam_1"
  input: "generator/encoder_3/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_3/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_3/batch_normalization/beta/Adam"
  input: "generator/encoder_3/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "generator/encoder_3/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_3/batch_normalization/beta/Adam_1"
  input: "generator/encoder_3/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_3/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_4/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_4/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_4/conv2d/kernel/Adam"
  input: "generator/encoder_4/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam/read"
  op: "Identity"
  input: "generator/encoder_4/conv2d/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_4/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_4/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_4/conv2d/kernel/Adam_1"
  input: "generator/encoder_4/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_4/conv2d/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_4/conv2d/bias/Adam"
  input: "generator/encoder_4/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Adam/read"
  op: "Identity"
  input: "generator/encoder_4/conv2d/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_4/conv2d/bias/Adam_1"
  input: "generator/encoder_4/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_4/conv2d/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_4/batch_normalization/gamma/Adam"
  input: "generator/encoder_4/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "generator/encoder_4/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_4/batch_normalization/gamma/Adam_1"
  input: "generator/encoder_4/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_4/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_4/batch_normalization/beta/Adam"
  input: "generator/encoder_4/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "generator/encoder_4/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_4/batch_normalization/beta/Adam_1"
  input: "generator/encoder_4/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_4/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_5/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_5/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_5/conv2d/kernel/Adam"
  input: "generator/encoder_5/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam/read"
  op: "Identity"
  input: "generator/encoder_5/conv2d/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_5/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_5/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_5/conv2d/kernel/Adam_1"
  input: "generator/encoder_5/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_5/conv2d/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_5/conv2d/bias/Adam"
  input: "generator/encoder_5/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Adam/read"
  op: "Identity"
  input: "generator/encoder_5/conv2d/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_5/conv2d/bias/Adam_1"
  input: "generator/encoder_5/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_5/conv2d/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_5/batch_normalization/gamma/Adam"
  input: "generator/encoder_5/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "generator/encoder_5/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_5/batch_normalization/gamma/Adam_1"
  input: "generator/encoder_5/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_5/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_5/batch_normalization/beta/Adam"
  input: "generator/encoder_5/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "generator/encoder_5/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_5/batch_normalization/beta/Adam_1"
  input: "generator/encoder_5/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_5/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_6/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_6/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_6/conv2d/kernel/Adam"
  input: "generator/encoder_6/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam/read"
  op: "Identity"
  input: "generator/encoder_6/conv2d/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_6/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_6/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_6/conv2d/kernel/Adam_1"
  input: "generator/encoder_6/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_6/conv2d/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_6/conv2d/bias/Adam"
  input: "generator/encoder_6/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Adam/read"
  op: "Identity"
  input: "generator/encoder_6/conv2d/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_6/conv2d/bias/Adam_1"
  input: "generator/encoder_6/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_6/conv2d/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_6/batch_normalization/gamma/Adam"
  input: "generator/encoder_6/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "generator/encoder_6/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_6/batch_normalization/gamma/Adam_1"
  input: "generator/encoder_6/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_6/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_6/batch_normalization/beta/Adam"
  input: "generator/encoder_6/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "generator/encoder_6/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_6/batch_normalization/beta/Adam_1"
  input: "generator/encoder_6/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_6/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_7/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_7/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_7/conv2d/kernel/Adam"
  input: "generator/encoder_7/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam/read"
  op: "Identity"
  input: "generator/encoder_7/conv2d/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_7/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_7/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_7/conv2d/kernel/Adam_1"
  input: "generator/encoder_7/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_7/conv2d/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_7/conv2d/bias/Adam"
  input: "generator/encoder_7/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Adam/read"
  op: "Identity"
  input: "generator/encoder_7/conv2d/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_7/conv2d/bias/Adam_1"
  input: "generator/encoder_7/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_7/conv2d/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_7/batch_normalization/gamma/Adam"
  input: "generator/encoder_7/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "generator/encoder_7/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_7/batch_normalization/gamma/Adam_1"
  input: "generator/encoder_7/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_7/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_7/batch_normalization/beta/Adam"
  input: "generator/encoder_7/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "generator/encoder_7/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_7/batch_normalization/beta/Adam_1"
  input: "generator/encoder_7/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_7/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_8/conv2d/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_8/conv2d/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_8/conv2d/kernel/Adam"
  input: "generator/encoder_8/conv2d/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam/read"
  op: "Identity"
  input: "generator/encoder_8/conv2d/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/encoder_8/conv2d/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/encoder_8/conv2d/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_8/conv2d/kernel/Adam_1"
  input: "generator/encoder_8/conv2d/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_8/conv2d/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_8/conv2d/bias/Adam"
  input: "generator/encoder_8/conv2d/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Adam/read"
  op: "Identity"
  input: "generator/encoder_8/conv2d/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_8/conv2d/bias/Adam_1"
  input: "generator/encoder_8/conv2d/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_8/conv2d/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_8/batch_normalization/gamma/Adam"
  input: "generator/encoder_8/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "generator/encoder_8/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_8/batch_normalization/gamma/Adam_1"
  input: "generator/encoder_8/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_8/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "generator/encoder_8/batch_normalization/beta/Adam"
  input: "generator/encoder_8/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "generator/encoder_8/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "generator/encoder_8/batch_normalization/beta/Adam_1"
  input: "generator/encoder_8/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "generator/encoder_8/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam/read"
  op: "Identity"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Adam/read"
  op: "Identity"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_8/batch_normalization/gamma/Adam"
  input: "generator/decoder_8/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "generator/decoder_8/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_8/batch_normalization/gamma/Adam_1"
  input: "generator/decoder_8/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_8/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_8/batch_normalization/beta/Adam"
  input: "generator/decoder_8/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "generator/decoder_8/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_8/batch_normalization/beta/Adam_1"
  input: "generator/decoder_8/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_8/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam/read"
  op: "Identity"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Adam/read"
  op: "Identity"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_7/batch_normalization/gamma/Adam"
  input: "generator/decoder_7/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "generator/decoder_7/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_7/batch_normalization/gamma/Adam_1"
  input: "generator/decoder_7/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_7/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_7/batch_normalization/beta/Adam"
  input: "generator/decoder_7/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "generator/decoder_7/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_7/batch_normalization/beta/Adam_1"
  input: "generator/decoder_7/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_7/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam/read"
  op: "Identity"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Adam/read"
  op: "Identity"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_6/batch_normalization/gamma/Adam"
  input: "generator/decoder_6/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "generator/decoder_6/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_6/batch_normalization/gamma/Adam_1"
  input: "generator/decoder_6/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_6/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_6/batch_normalization/beta/Adam"
  input: "generator/decoder_6/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "generator/decoder_6/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_6/batch_normalization/beta/Adam_1"
  input: "generator/decoder_6/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_6/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam/read"
  op: "Identity"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 512
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Adam/read"
  op: "Identity"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_5/batch_normalization/gamma/Adam"
  input: "generator/decoder_5/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "generator/decoder_5/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_5/batch_normalization/gamma/Adam_1"
  input: "generator/decoder_5/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_5/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_5/batch_normalization/beta/Adam"
  input: "generator/decoder_5/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "generator/decoder_5/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_5/batch_normalization/beta/Adam_1"
  input: "generator/decoder_5/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_5/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 256
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam/read"
  op: "Identity"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 256
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Adam/read"
  op: "Identity"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_4/batch_normalization/gamma/Adam"
  input: "generator/decoder_4/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "generator/decoder_4/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_4/batch_normalization/gamma/Adam_1"
  input: "generator/decoder_4/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_4/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_4/batch_normalization/beta/Adam"
  input: "generator/decoder_4/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "generator/decoder_4/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_4/batch_normalization/beta/Adam_1"
  input: "generator/decoder_4/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_4/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam/read"
  op: "Identity"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 128
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Adam/read"
  op: "Identity"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_3/batch_normalization/gamma/Adam"
  input: "generator/decoder_3/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "generator/decoder_3/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_3/batch_normalization/gamma/Adam_1"
  input: "generator/decoder_3/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_3/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_3/batch_normalization/beta/Adam"
  input: "generator/decoder_3/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "generator/decoder_3/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_3/batch_normalization/beta/Adam_1"
  input: "generator/decoder_3/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_3/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam/read"
  op: "Identity"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Adam/read"
  op: "Identity"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_2/batch_normalization/gamma/Adam"
  input: "generator/decoder_2/batch_normalization/gamma/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Adam/read"
  op: "Identity"
  input: "generator/decoder_2/batch_normalization/gamma/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_2/batch_normalization/gamma/Adam_1"
  input: "generator/decoder_2/batch_normalization/gamma/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_2/batch_normalization/gamma/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_2/batch_normalization/beta/Adam"
  input: "generator/decoder_2/batch_normalization/beta/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Adam/read"
  op: "Identity"
  input: "generator/decoder_2/batch_normalization/beta/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_2/batch_normalization/beta/Adam_1"
  input: "generator/decoder_2/batch_normalization/beta/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_2/batch_normalization/beta/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 1
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam/read"
  op: "Identity"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4
        }
        dim {
          size: 4
        }
        dim {
          size: 1
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Adam/Assign"
  op: "Assign"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Adam/read"
  op: "Identity"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Adam_1/Assign"
  op: "Assign"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/Adam_1/read"
  op: "Identity"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "generator_train/Adam/learning_rate"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.00019999999494757503
      }
    }
  }
}
node {
  name: "generator_train/Adam/beta1"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "generator_train/Adam/beta2"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "generator_train/Adam/epsilon"
  op: "Const"
  input: "^discriminator_train/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_1/conv2d/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_1/conv2d/kernel"
  input: "generator/encoder_1/conv2d/kernel/Adam"
  input: "generator/encoder_1/conv2d/kernel/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_1/conv2d/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_1/conv2d/bias"
  input: "generator/encoder_1/conv2d/bias/Adam"
  input: "generator/encoder_1/conv2d/bias/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_2/conv2d/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_2/conv2d/kernel"
  input: "generator/encoder_2/conv2d/kernel/Adam"
  input: "generator/encoder_2/conv2d/kernel/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_2/conv2d/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_2/conv2d/bias"
  input: "generator/encoder_2/conv2d/bias/Adam"
  input: "generator/encoder_2/conv2d/bias/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_2/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_2/batch_normalization/gamma"
  input: "generator/encoder_2/batch_normalization/gamma/Adam"
  input: "generator/encoder_2/batch_normalization/gamma/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_2/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_2/batch_normalization/beta"
  input: "generator/encoder_2/batch_normalization/beta/Adam"
  input: "generator/encoder_2/batch_normalization/beta/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_3/conv2d/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_3/conv2d/kernel"
  input: "generator/encoder_3/conv2d/kernel/Adam"
  input: "generator/encoder_3/conv2d/kernel/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_3/conv2d/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_3/conv2d/bias"
  input: "generator/encoder_3/conv2d/bias/Adam"
  input: "generator/encoder_3/conv2d/bias/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_3/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_3/batch_normalization/gamma"
  input: "generator/encoder_3/batch_normalization/gamma/Adam"
  input: "generator/encoder_3/batch_normalization/gamma/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_3/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_3/batch_normalization/beta"
  input: "generator/encoder_3/batch_normalization/beta/Adam"
  input: "generator/encoder_3/batch_normalization/beta/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_4/conv2d/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_4/conv2d/kernel"
  input: "generator/encoder_4/conv2d/kernel/Adam"
  input: "generator/encoder_4/conv2d/kernel/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_4/conv2d/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_4/conv2d/bias"
  input: "generator/encoder_4/conv2d/bias/Adam"
  input: "generator/encoder_4/conv2d/bias/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_4/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_4/batch_normalization/gamma"
  input: "generator/encoder_4/batch_normalization/gamma/Adam"
  input: "generator/encoder_4/batch_normalization/gamma/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_4/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_4/batch_normalization/beta"
  input: "generator/encoder_4/batch_normalization/beta/Adam"
  input: "generator/encoder_4/batch_normalization/beta/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_5/conv2d/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_5/conv2d/kernel"
  input: "generator/encoder_5/conv2d/kernel/Adam"
  input: "generator/encoder_5/conv2d/kernel/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_5/conv2d/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_5/conv2d/bias"
  input: "generator/encoder_5/conv2d/bias/Adam"
  input: "generator/encoder_5/conv2d/bias/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_5/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_5/batch_normalization/gamma"
  input: "generator/encoder_5/batch_normalization/gamma/Adam"
  input: "generator/encoder_5/batch_normalization/gamma/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_5/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_5/batch_normalization/beta"
  input: "generator/encoder_5/batch_normalization/beta/Adam"
  input: "generator/encoder_5/batch_normalization/beta/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_6/conv2d/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_6/conv2d/kernel"
  input: "generator/encoder_6/conv2d/kernel/Adam"
  input: "generator/encoder_6/conv2d/kernel/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_6/conv2d/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_6/conv2d/bias"
  input: "generator/encoder_6/conv2d/bias/Adam"
  input: "generator/encoder_6/conv2d/bias/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_6/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_6/batch_normalization/gamma"
  input: "generator/encoder_6/batch_normalization/gamma/Adam"
  input: "generator/encoder_6/batch_normalization/gamma/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_6/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_6/batch_normalization/beta"
  input: "generator/encoder_6/batch_normalization/beta/Adam"
  input: "generator/encoder_6/batch_normalization/beta/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_7/conv2d/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_7/conv2d/kernel"
  input: "generator/encoder_7/conv2d/kernel/Adam"
  input: "generator/encoder_7/conv2d/kernel/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_7/conv2d/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_7/conv2d/bias"
  input: "generator/encoder_7/conv2d/bias/Adam"
  input: "generator/encoder_7/conv2d/bias/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_7/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_7/batch_normalization/gamma"
  input: "generator/encoder_7/batch_normalization/gamma/Adam"
  input: "generator/encoder_7/batch_normalization/gamma/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_7/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_7/batch_normalization/beta"
  input: "generator/encoder_7/batch_normalization/beta/Adam"
  input: "generator/encoder_7/batch_normalization/beta/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_8/conv2d/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_8/conv2d/kernel"
  input: "generator/encoder_8/conv2d/kernel/Adam"
  input: "generator/encoder_8/conv2d/kernel/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_8/conv2d/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_8/conv2d/bias"
  input: "generator/encoder_8/conv2d/bias/Adam"
  input: "generator/encoder_8/conv2d/bias/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_8/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_8/batch_normalization/gamma"
  input: "generator/encoder_8/batch_normalization/gamma/Adam"
  input: "generator/encoder_8/batch_normalization/gamma/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/encoder_8/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/encoder_8/batch_normalization/beta"
  input: "generator/encoder_8/batch_normalization/beta/Adam"
  input: "generator/encoder_8/batch_normalization/beta/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_8/conv2d_transpose/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_8/conv2d_transpose/kernel"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_8/conv2d_transpose/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_8/conv2d_transpose/bias"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_8/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_8/batch_normalization/gamma"
  input: "generator/decoder_8/batch_normalization/gamma/Adam"
  input: "generator/decoder_8/batch_normalization/gamma/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_8/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_8/batch_normalization/beta"
  input: "generator/decoder_8/batch_normalization/beta/Adam"
  input: "generator/decoder_8/batch_normalization/beta/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_7/conv2d_transpose/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_7/conv2d_transpose/kernel"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_7/conv2d_transpose/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_7/conv2d_transpose/bias"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_7/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_7/batch_normalization/gamma"
  input: "generator/decoder_7/batch_normalization/gamma/Adam"
  input: "generator/decoder_7/batch_normalization/gamma/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_7/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_7/batch_normalization/beta"
  input: "generator/decoder_7/batch_normalization/beta/Adam"
  input: "generator/decoder_7/batch_normalization/beta/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_6/conv2d_transpose/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_6/conv2d_transpose/kernel"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_6/conv2d_transpose/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_6/conv2d_transpose/bias"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_6/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_6/batch_normalization/gamma"
  input: "generator/decoder_6/batch_normalization/gamma/Adam"
  input: "generator/decoder_6/batch_normalization/gamma/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_6/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_6/batch_normalization/beta"
  input: "generator/decoder_6/batch_normalization/beta/Adam"
  input: "generator/decoder_6/batch_normalization/beta/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_5/conv2d_transpose/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_5/conv2d_transpose/kernel"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_5/conv2d_transpose/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_5/conv2d_transpose/bias"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_5/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_5/batch_normalization/gamma"
  input: "generator/decoder_5/batch_normalization/gamma/Adam"
  input: "generator/decoder_5/batch_normalization/gamma/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_5/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_5/batch_normalization/beta"
  input: "generator/decoder_5/batch_normalization/beta/Adam"
  input: "generator/decoder_5/batch_normalization/beta/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_4/conv2d_transpose/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_4/conv2d_transpose/kernel"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_4/conv2d_transpose/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_4/conv2d_transpose/bias"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_4/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_4/batch_normalization/gamma"
  input: "generator/decoder_4/batch_normalization/gamma/Adam"
  input: "generator/decoder_4/batch_normalization/gamma/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_4/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_4/batch_normalization/beta"
  input: "generator/decoder_4/batch_normalization/beta/Adam"
  input: "generator/decoder_4/batch_normalization/beta/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_3/conv2d_transpose/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_3/conv2d_transpose/kernel"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_3/conv2d_transpose/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_3/conv2d_transpose/bias"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_3/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_3/batch_normalization/gamma"
  input: "generator/decoder_3/batch_normalization/gamma/Adam"
  input: "generator/decoder_3/batch_normalization/gamma/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_3/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_3/batch_normalization/beta"
  input: "generator/decoder_3/batch_normalization/beta/Adam"
  input: "generator/decoder_3/batch_normalization/beta/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_2/conv2d_transpose/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_2/conv2d_transpose/kernel"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_2/conv2d_transpose/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_2/conv2d_transpose/bias"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_2/batch_normalization/gamma/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_2/batch_normalization/gamma"
  input: "generator/decoder_2/batch_normalization/gamma/Adam"
  input: "generator/decoder_2/batch_normalization/gamma/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_2/batch_normalization/beta/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_2/batch_normalization/beta"
  input: "generator/decoder_2/batch_normalization/beta/Adam"
  input: "generator/decoder_2/batch_normalization/beta/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_1/conv2d_transpose/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_1/conv2d_transpose/kernel"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/update_generator/decoder_1/conv2d_transpose/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "generator/decoder_1/conv2d_transpose/bias"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam_1"
  input: "generator_train/beta1_power/read"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/learning_rate"
  input: "generator_train/Adam/beta1"
  input: "generator_train/Adam/beta2"
  input: "generator_train/Adam/epsilon"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "generator_train/Adam/mul"
  op: "Mul"
  input: "generator_train/beta1_power/read"
  input: "generator_train/Adam/beta1"
  input: "^generator_train/Adam/update_generator/decoder_1/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_1/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_1/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_1/conv2d/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/conv2d/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/conv2d/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/conv2d/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/conv2d/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/conv2d/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/conv2d/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/conv2d/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/Adam/Assign"
  op: "Assign"
  input: "generator_train/beta1_power"
  input: "generator_train/Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/Adam/mul_1"
  op: "Mul"
  input: "generator_train/beta2_power/read"
  input: "generator_train/Adam/beta2"
  input: "^generator_train/Adam/update_generator/decoder_1/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_1/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_1/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_1/conv2d/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/conv2d/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/conv2d/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/conv2d/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/conv2d/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/conv2d/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/conv2d/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/conv2d/kernel/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_train/Adam/Assign_1"
  op: "Assign"
  input: "generator_train/beta2_power"
  input: "generator_train/Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator_train/Adam"
  op: "NoOp"
  input: "^discriminator_train/Adam"
  input: "^generator_train/Adam/Assign"
  input: "^generator_train/Adam/Assign_1"
  input: "^generator_train/Adam/update_generator/decoder_1/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_1/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_2/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_3/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_4/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_5/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_6/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_7/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/conv2d_transpose/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/decoder_8/conv2d_transpose/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_1/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_1/conv2d/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_2/conv2d/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_3/conv2d/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_4/conv2d/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_5/conv2d/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_6/conv2d/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_7/conv2d/kernel/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/batch_normalization/beta/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/batch_normalization/gamma/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/conv2d/bias/ApplyAdam"
  input: "^generator_train/Adam/update_generator/encoder_8/conv2d/kernel/ApplyAdam"
}
node {
  name: "discriminator_loss/Mean/ExponentialMovingAverage/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "discriminator_loss/Mean/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "discriminator_loss/Mean/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "discriminator_loss/Mean/ExponentialMovingAverage"
  input: "discriminator_loss/Mean/ExponentialMovingAverage/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "discriminator_loss/Mean/ExponentialMovingAverage/read"
  op: "Identity"
  input: "discriminator_loss/Mean/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_loss/Mean/ExponentialMovingAverage/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator_loss/Mean/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator_loss/Mean/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "generator_loss/Mean/ExponentialMovingAverage"
  input: "generator_loss/Mean/ExponentialMovingAverage/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator_loss/Mean/ExponentialMovingAverage/read"
  op: "Identity"
  input: "generator_loss/Mean/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_loss/Mean_1/ExponentialMovingAverage/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean_1/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "generator_loss/Mean_1/ExponentialMovingAverage"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean_1/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "generator_loss/Mean_1/ExponentialMovingAverage/Assign"
  op: "Assign"
  input: "generator_loss/Mean_1/ExponentialMovingAverage"
  input: "generator_loss/Mean_1/ExponentialMovingAverage/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean_1/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "generator_loss/Mean_1/ExponentialMovingAverage/read"
  op: "Identity"
  input: "generator_loss/Mean_1/ExponentialMovingAverage"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean_1/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/decay"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9900000095367432
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg/sub/x"
  input: "ExponentialMovingAverage/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/sub_1"
  op: "Sub"
  input: "discriminator_loss/Mean/ExponentialMovingAverage/read"
  input: "discriminator_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg"
  op: "AssignSub"
  input: "discriminator_loss/Mean/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/sub/x"
  input: "ExponentialMovingAverage/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/sub_1"
  op: "Sub"
  input: "generator_loss/Mean/ExponentialMovingAverage/read"
  input: "generator_loss/Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_1"
  op: "AssignSub"
  input: "generator_loss/Mean/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/sub/x"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean_1/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/sub"
  op: "Sub"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/sub/x"
  input: "ExponentialMovingAverage/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean_1/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/sub_1"
  op: "Sub"
  input: "generator_loss/Mean_1/ExponentialMovingAverage/read"
  input: "generator_loss/Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean_1/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2/mul"
  op: "Mul"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/sub_1"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean_1/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialMovingAverage/AssignMovingAvg_2"
  op: "AssignSub"
  input: "generator_loss/Mean_1/ExponentialMovingAverage"
  input: "ExponentialMovingAverage/AssignMovingAvg_2/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean_1/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "ExponentialMovingAverage"
  op: "NoOp"
  input: "^ExponentialMovingAverage/AssignMovingAvg"
  input: "^ExponentialMovingAverage/AssignMovingAvg_1"
  input: "^ExponentialMovingAverage/AssignMovingAvg_2"
}
node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "global_step/read"
  input: "add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "global_step"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^Assign"
  input: "^ExponentialMovingAverage"
  input: "^generator_train/Adam"
}
node {
  name: "deprocess/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "deprocess/add"
  op: "Add"
  input: "generator/decoder_1/Tanh"
  input: "deprocess/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "deprocess/truediv/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "deprocess/truediv"
  op: "RealDiv"
  input: "IteratorGetNext:2"
  input: "deprocess/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "deprocess/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "deprocess/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "deprocess/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "deprocess/strided_slice"
  op: "StridedSlice"
  input: "deprocess/truediv"
  input: "deprocess/strided_slice/stack"
  input: "deprocess/strided_slice/stack_1"
  input: "deprocess/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 14
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "deprocess/mul"
  op: "Mul"
  input: "deprocess/add"
  input: "deprocess/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "calculate_residuals/pad_to_bounding_box/Shape"
  op: "Shape"
  input: "IteratorGetNext:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "calculate_residuals/pad_to_bounding_box/assert_positive/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "calculate_residuals/pad_to_bounding_box/assert_positive/assert_less/Less"
  op: "Less"
  input: "calculate_residuals/pad_to_bounding_box/assert_positive/Const"
  input: "calculate_residuals/pad_to_bounding_box/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
}
node {
  name: "calculate_residuals/pad_to_bounding_box/assert_positive/assert_less/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "calculate_residuals/pad_to_bounding_box/assert_positive/assert_less/All"
  op: "All"
  input: "calculate_residuals/pad_to_bounding_box/assert_positive/assert_less/Less"
  input: "calculate_residuals/pad_to_bounding_box/assert_positive/assert_less/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "calculate_residuals/pad_to_bounding_box/assert_positive/assert_less/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "calculate_residuals/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "all dims of \'image.shape\' must be > 0."
      }
    }
  }
}
node {
  name: "calculate_residuals/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  op: "Assert"
  input: "calculate_residuals/pad_to_bounding_box/assert_positive/assert_less/All"
  input: "calculate_residuals/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert/data_0"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "calculate_residuals/pad_to_bounding_box/Shape_1"
  op: "Shape"
  input: "IteratorGetNext:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "calculate_residuals/pad_to_bounding_box/unstack"
  op: "Unpack"
  input: "calculate_residuals/pad_to_bounding_box/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  attr {
    key: "num"
    value {
      i: 4
    }
  }
}
node {
  name: "calculate_residuals/pad_to_bounding_box/control_dependency"
  op: "Identity"
  input: "IteratorGetNext:3"
  input: "^calculate_residuals/pad_to_bounding_box/assert_positive/assert_less/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorGetNext"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "calculate_residuals/pad_to_bounding_box/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 8
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 8
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "calculate_residuals/pad_to_bounding_box/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "calculate_residuals/pad_to_bounding_box/Reshape"
  op: "Reshape"
  input: "calculate_residuals/pad_to_bounding_box/stack"
  input: "calculate_residuals/pad_to_bounding_box/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "calculate_residuals/pad_to_bounding_box/Pad"
  op: "Pad"
  input: "calculate_residuals/pad_to_bounding_box/control_dependency"
  input: "calculate_residuals/pad_to_bounding_box/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tpaddings"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 257
          }
          dim {
            size: 257
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "calculate_residuals/Squeeze"
  op: "Squeeze"
  input: "calculate_residuals/pad_to_bounding_box/Pad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
      }
    }
  }
}
node {
  name: "calculate_residuals/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "calculate_residuals/ExpandDims"
  op: "ExpandDims"
  input: "calculate_residuals/Squeeze"
  input: "calculate_residuals/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "calculate_residuals/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "calculate_residuals/ExpandDims_1"
  op: "ExpandDims"
  input: "calculate_residuals/ExpandDims"
  input: "calculate_residuals/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "calculate_residuals/Conv2D"
  op: "Conv2D"
  input: "deprocess/mul"
  input: "calculate_residuals/ExpandDims_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "calculate_residuals/sub"
  op: "Sub"
  input: "IteratorGetNext:4"
  input: "calculate_residuals/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "convert_images/add"
  op: "Add"
  input: "scaling_flux/preprocess_1/sub"
  input: "convert_images/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/truediv/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "convert_images/truediv"
  op: "RealDiv"
  input: "convert_images/add"
  input: "convert_images/truediv/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/convert_image/Mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.5
      }
    }
  }
}
node {
  name: "convert_images/convert_image/Mul"
  op: "Mul"
  input: "convert_images/truediv"
  input: "convert_images/convert_image/Mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/convert_image/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convert_images/convert_image/Maximum"
  op: "Maximum"
  input: "convert_images/convert_image/Mul"
  input: "convert_images/convert_image/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/convert_image/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.0
      }
    }
  }
}
node {
  name: "convert_images/convert_image/Minimum"
  op: "Minimum"
  input: "convert_images/convert_image/Maximum"
  input: "convert_images/convert_image/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/convert_image"
  op: "Cast"
  input: "convert_images/convert_image/Minimum"
  attr {
    key: "DstT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/add_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "convert_images/add_1"
  op: "Add"
  input: "scaling_flux/preprocess/sub"
  input: "convert_images/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/truediv_1/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "convert_images/truediv_1"
  op: "RealDiv"
  input: "convert_images/add_1"
  input: "convert_images/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/convert_image_1/Mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.5
      }
    }
  }
}
node {
  name: "convert_images/convert_image_1/Mul"
  op: "Mul"
  input: "convert_images/truediv_1"
  input: "convert_images/convert_image_1/Mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/convert_image_1/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convert_images/convert_image_1/Maximum"
  op: "Maximum"
  input: "convert_images/convert_image_1/Mul"
  input: "convert_images/convert_image_1/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/convert_image_1/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.0
      }
    }
  }
}
node {
  name: "convert_images/convert_image_1/Minimum"
  op: "Minimum"
  input: "convert_images/convert_image_1/Maximum"
  input: "convert_images/convert_image_1/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/convert_image_1"
  op: "Cast"
  input: "convert_images/convert_image_1/Minimum"
  attr {
    key: "DstT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/add_2/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "convert_images/add_2"
  op: "Add"
  input: "generator/decoder_1/Tanh"
  input: "convert_images/add_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/truediv_2/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "convert_images/truediv_2"
  op: "RealDiv"
  input: "convert_images/add_2"
  input: "convert_images/truediv_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/convert_image_2/Mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.5
      }
    }
  }
}
node {
  name: "convert_images/convert_image_2/Mul"
  op: "Mul"
  input: "convert_images/truediv_2"
  input: "convert_images/convert_image_2/Mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/convert_image_2/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convert_images/convert_image_2/Maximum"
  op: "Maximum"
  input: "convert_images/convert_image_2/Mul"
  input: "convert_images/convert_image_2/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/convert_image_2/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.0
      }
    }
  }
}
node {
  name: "convert_images/convert_image_2/Minimum"
  op: "Minimum"
  input: "convert_images/convert_image_2/Maximum"
  input: "convert_images/convert_image_2/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/convert_image_2"
  op: "Cast"
  input: "convert_images/convert_image_2/Minimum"
  attr {
    key: "DstT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/add_3/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "convert_images/add_3"
  op: "Add"
  input: "scaling_flux/sub"
  input: "convert_images/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/truediv_3/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "convert_images/truediv_3"
  op: "RealDiv"
  input: "convert_images/add_3"
  input: "convert_images/truediv_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/convert_image_3/Mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.5
      }
    }
  }
}
node {
  name: "convert_images/convert_image_3/Mul"
  op: "Mul"
  input: "convert_images/truediv_3"
  input: "convert_images/convert_image_3/Mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/convert_image_3/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convert_images/convert_image_3/Maximum"
  op: "Maximum"
  input: "convert_images/convert_image_3/Mul"
  input: "convert_images/convert_image_3/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/convert_image_3/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.0
      }
    }
  }
}
node {
  name: "convert_images/convert_image_3/Minimum"
  op: "Minimum"
  input: "convert_images/convert_image_3/Maximum"
  input: "convert_images/convert_image_3/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/convert_image_3"
  op: "Cast"
  input: "convert_images/convert_image_3/Minimum"
  attr {
    key: "DstT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/add_4/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "convert_images/add_4"
  op: "Add"
  input: "calculate_residuals/sub"
  input: "convert_images/add_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/truediv_4/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "convert_images/truediv_4"
  op: "RealDiv"
  input: "convert_images/add_4"
  input: "convert_images/truediv_4/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/convert_image_4/Mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.5
      }
    }
  }
}
node {
  name: "convert_images/convert_image_4/Mul"
  op: "Mul"
  input: "convert_images/truediv_4"
  input: "convert_images/convert_image_4/Mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/convert_image_4/min"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convert_images/convert_image_4/Maximum"
  op: "Maximum"
  input: "convert_images/convert_image_4/Mul"
  input: "convert_images/convert_image_4/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/convert_image_4/max"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.0
      }
    }
  }
}
node {
  name: "convert_images/convert_image_4/Minimum"
  op: "Minimum"
  input: "convert_images/convert_image_4/Maximum"
  input: "convert_images/convert_image_4/max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "convert_images/convert_image_4"
  op: "Cast"
  input: "convert_images/convert_image_4/Minimum"
  attr {
    key: "DstT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/Shape"
  op: "Shape"
  input: "convert_images/convert_image"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encode_images/input_pngs/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/strided_slice"
  op: "StridedSlice"
  input: "encode_images/input_pngs/Shape"
  input: "encode_images/input_pngs/strided_slice/stack"
  input: "encode_images/input_pngs/strided_slice/stack_1"
  input: "encode_images/input_pngs/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArray"
  op: "TensorArrayV3"
  input: "encode_images/input_pngs/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "convert_images/convert_image"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encode_images/input_pngs/TensorArrayUnstack/Shape"
  input: "encode_images/input_pngs/TensorArrayUnstack/strided_slice/stack"
  input: "encode_images/input_pngs/TensorArrayUnstack/strided_slice/stack_1"
  input: "encode_images/input_pngs/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayUnstack/range"
  op: "Range"
  input: "encode_images/input_pngs/TensorArrayUnstack/range/start"
  input: "encode_images/input_pngs/TensorArrayUnstack/strided_slice"
  input: "encode_images/input_pngs/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encode_images/input_pngs/TensorArray"
  input: "encode_images/input_pngs/TensorArrayUnstack/range"
  input: "convert_images/convert_image"
  input: "encode_images/input_pngs/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convert_images/convert_image"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArray_1"
  op: "TensorArrayV3"
  input: "encode_images/input_pngs/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encode_images/input_pngs/while/Enter"
  op: "Enter"
  input: "encode_images/input_pngs/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/input_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/input_pngs/while/Enter_1"
  op: "Enter"
  input: "encode_images/input_pngs/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/input_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/input_pngs/while/Merge"
  op: "Merge"
  input: "encode_images/input_pngs/while/Enter"
  input: "encode_images/input_pngs/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/while/Merge_1"
  op: "Merge"
  input: "encode_images/input_pngs/while/Enter_1"
  input: "encode_images/input_pngs/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/while/Less"
  op: "Less"
  input: "encode_images/input_pngs/while/Merge"
  input: "encode_images/input_pngs/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/while/Less/Enter"
  op: "Enter"
  input: "encode_images/input_pngs/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/input_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/input_pngs/while/LoopCond"
  op: "LoopCond"
  input: "encode_images/input_pngs/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/while/Switch"
  op: "Switch"
  input: "encode_images/input_pngs/while/Merge"
  input: "encode_images/input_pngs/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/input_pngs/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/while/Switch_1"
  op: "Switch"
  input: "encode_images/input_pngs/while/Merge_1"
  input: "encode_images/input_pngs/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/input_pngs/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/while/Identity"
  op: "Identity"
  input: "encode_images/input_pngs/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/while/Identity_1"
  op: "Identity"
  input: "encode_images/input_pngs/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encode_images/input_pngs/while/TensorArrayReadV3/Enter"
  input: "encode_images/input_pngs/while/Identity"
  input: "encode_images/input_pngs/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "encode_images/input_pngs/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encode_images/input_pngs/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/input_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/input_pngs/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encode_images/input_pngs/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/input_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/input_pngs/while/EncodePng"
  op: "EncodePng"
  input: "encode_images/input_pngs/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "compression"
    value {
      i: -1
    }
  }
}
node {
  name: "encode_images/input_pngs/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encode_images/input_pngs/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encode_images/input_pngs/while/Identity"
  input: "encode_images/input_pngs/while/EncodePng"
  input: "encode_images/input_pngs/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/input_pngs/while/EncodePng"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encode_images/input_pngs/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/input_pngs/while/EncodePng"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/input_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/input_pngs/while/add/y"
  op: "Const"
  input: "^encode_images/input_pngs/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/while/add"
  op: "Add"
  input: "encode_images/input_pngs/while/Identity"
  input: "encode_images/input_pngs/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/while/NextIteration"
  op: "NextIteration"
  input: "encode_images/input_pngs/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/while/NextIteration_1"
  op: "NextIteration"
  input: "encode_images/input_pngs/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/while/Exit"
  op: "Exit"
  input: "encode_images/input_pngs/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/while/Exit_1"
  op: "Exit"
  input: "encode_images/input_pngs/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "encode_images/input_pngs/TensorArray_1"
  input: "encode_images/input_pngs/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/input_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/input_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/input_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayStack/range"
  op: "Range"
  input: "encode_images/input_pngs/TensorArrayStack/range/start"
  input: "encode_images/input_pngs/TensorArrayStack/TensorArraySizeV3"
  input: "encode_images/input_pngs/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/input_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encode_images/input_pngs/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encode_images/input_pngs/TensorArray_1"
  input: "encode_images/input_pngs/TensorArrayStack/range"
  input: "encode_images/input_pngs/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/input_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/Shape"
  op: "Shape"
  input: "convert_images/convert_image_1"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encode_images/target_pngs/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/strided_slice"
  op: "StridedSlice"
  input: "encode_images/target_pngs/Shape"
  input: "encode_images/target_pngs/strided_slice/stack"
  input: "encode_images/target_pngs/strided_slice/stack_1"
  input: "encode_images/target_pngs/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArray"
  op: "TensorArrayV3"
  input: "encode_images/target_pngs/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "convert_images/convert_image_1"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encode_images/target_pngs/TensorArrayUnstack/Shape"
  input: "encode_images/target_pngs/TensorArrayUnstack/strided_slice/stack"
  input: "encode_images/target_pngs/TensorArrayUnstack/strided_slice/stack_1"
  input: "encode_images/target_pngs/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayUnstack/range"
  op: "Range"
  input: "encode_images/target_pngs/TensorArrayUnstack/range/start"
  input: "encode_images/target_pngs/TensorArrayUnstack/strided_slice"
  input: "encode_images/target_pngs/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encode_images/target_pngs/TensorArray"
  input: "encode_images/target_pngs/TensorArrayUnstack/range"
  input: "convert_images/convert_image_1"
  input: "encode_images/target_pngs/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convert_images/convert_image_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArray_1"
  op: "TensorArrayV3"
  input: "encode_images/target_pngs/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encode_images/target_pngs/while/Enter"
  op: "Enter"
  input: "encode_images/target_pngs/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/target_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/target_pngs/while/Enter_1"
  op: "Enter"
  input: "encode_images/target_pngs/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/target_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/target_pngs/while/Merge"
  op: "Merge"
  input: "encode_images/target_pngs/while/Enter"
  input: "encode_images/target_pngs/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/while/Merge_1"
  op: "Merge"
  input: "encode_images/target_pngs/while/Enter_1"
  input: "encode_images/target_pngs/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/while/Less"
  op: "Less"
  input: "encode_images/target_pngs/while/Merge"
  input: "encode_images/target_pngs/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/while/Less/Enter"
  op: "Enter"
  input: "encode_images/target_pngs/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/target_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/target_pngs/while/LoopCond"
  op: "LoopCond"
  input: "encode_images/target_pngs/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/while/Switch"
  op: "Switch"
  input: "encode_images/target_pngs/while/Merge"
  input: "encode_images/target_pngs/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/target_pngs/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/while/Switch_1"
  op: "Switch"
  input: "encode_images/target_pngs/while/Merge_1"
  input: "encode_images/target_pngs/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/target_pngs/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/while/Identity"
  op: "Identity"
  input: "encode_images/target_pngs/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/while/Identity_1"
  op: "Identity"
  input: "encode_images/target_pngs/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encode_images/target_pngs/while/TensorArrayReadV3/Enter"
  input: "encode_images/target_pngs/while/Identity"
  input: "encode_images/target_pngs/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "encode_images/target_pngs/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encode_images/target_pngs/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/target_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/target_pngs/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encode_images/target_pngs/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/target_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/target_pngs/while/EncodePng"
  op: "EncodePng"
  input: "encode_images/target_pngs/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "compression"
    value {
      i: -1
    }
  }
}
node {
  name: "encode_images/target_pngs/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encode_images/target_pngs/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encode_images/target_pngs/while/Identity"
  input: "encode_images/target_pngs/while/EncodePng"
  input: "encode_images/target_pngs/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/target_pngs/while/EncodePng"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encode_images/target_pngs/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/target_pngs/while/EncodePng"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/target_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/target_pngs/while/add/y"
  op: "Const"
  input: "^encode_images/target_pngs/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/while/add"
  op: "Add"
  input: "encode_images/target_pngs/while/Identity"
  input: "encode_images/target_pngs/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/while/NextIteration"
  op: "NextIteration"
  input: "encode_images/target_pngs/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/while/NextIteration_1"
  op: "NextIteration"
  input: "encode_images/target_pngs/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/while/Exit"
  op: "Exit"
  input: "encode_images/target_pngs/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/while/Exit_1"
  op: "Exit"
  input: "encode_images/target_pngs/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "encode_images/target_pngs/TensorArray_1"
  input: "encode_images/target_pngs/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/target_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/target_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/target_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayStack/range"
  op: "Range"
  input: "encode_images/target_pngs/TensorArrayStack/range/start"
  input: "encode_images/target_pngs/TensorArrayStack/TensorArraySizeV3"
  input: "encode_images/target_pngs/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/target_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encode_images/target_pngs/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encode_images/target_pngs/TensorArray_1"
  input: "encode_images/target_pngs/TensorArrayStack/range"
  input: "encode_images/target_pngs/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/target_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/Shape"
  op: "Shape"
  input: "convert_images/convert_image_2"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encode_images/output_pngs/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/strided_slice"
  op: "StridedSlice"
  input: "encode_images/output_pngs/Shape"
  input: "encode_images/output_pngs/strided_slice/stack"
  input: "encode_images/output_pngs/strided_slice/stack_1"
  input: "encode_images/output_pngs/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArray"
  op: "TensorArrayV3"
  input: "encode_images/output_pngs/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "convert_images/convert_image_2"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encode_images/output_pngs/TensorArrayUnstack/Shape"
  input: "encode_images/output_pngs/TensorArrayUnstack/strided_slice/stack"
  input: "encode_images/output_pngs/TensorArrayUnstack/strided_slice/stack_1"
  input: "encode_images/output_pngs/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayUnstack/range"
  op: "Range"
  input: "encode_images/output_pngs/TensorArrayUnstack/range/start"
  input: "encode_images/output_pngs/TensorArrayUnstack/strided_slice"
  input: "encode_images/output_pngs/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encode_images/output_pngs/TensorArray"
  input: "encode_images/output_pngs/TensorArrayUnstack/range"
  input: "convert_images/convert_image_2"
  input: "encode_images/output_pngs/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convert_images/convert_image_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArray_1"
  op: "TensorArrayV3"
  input: "encode_images/output_pngs/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encode_images/output_pngs/while/Enter"
  op: "Enter"
  input: "encode_images/output_pngs/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/output_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/output_pngs/while/Enter_1"
  op: "Enter"
  input: "encode_images/output_pngs/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/output_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/output_pngs/while/Merge"
  op: "Merge"
  input: "encode_images/output_pngs/while/Enter"
  input: "encode_images/output_pngs/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/while/Merge_1"
  op: "Merge"
  input: "encode_images/output_pngs/while/Enter_1"
  input: "encode_images/output_pngs/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/while/Less"
  op: "Less"
  input: "encode_images/output_pngs/while/Merge"
  input: "encode_images/output_pngs/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/while/Less/Enter"
  op: "Enter"
  input: "encode_images/output_pngs/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/output_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/output_pngs/while/LoopCond"
  op: "LoopCond"
  input: "encode_images/output_pngs/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/while/Switch"
  op: "Switch"
  input: "encode_images/output_pngs/while/Merge"
  input: "encode_images/output_pngs/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/output_pngs/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/while/Switch_1"
  op: "Switch"
  input: "encode_images/output_pngs/while/Merge_1"
  input: "encode_images/output_pngs/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/output_pngs/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/while/Identity"
  op: "Identity"
  input: "encode_images/output_pngs/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/while/Identity_1"
  op: "Identity"
  input: "encode_images/output_pngs/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encode_images/output_pngs/while/TensorArrayReadV3/Enter"
  input: "encode_images/output_pngs/while/Identity"
  input: "encode_images/output_pngs/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "encode_images/output_pngs/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encode_images/output_pngs/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/output_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/output_pngs/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encode_images/output_pngs/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/output_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/output_pngs/while/EncodePng"
  op: "EncodePng"
  input: "encode_images/output_pngs/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "compression"
    value {
      i: -1
    }
  }
}
node {
  name: "encode_images/output_pngs/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encode_images/output_pngs/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encode_images/output_pngs/while/Identity"
  input: "encode_images/output_pngs/while/EncodePng"
  input: "encode_images/output_pngs/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/output_pngs/while/EncodePng"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encode_images/output_pngs/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/output_pngs/while/EncodePng"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/output_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/output_pngs/while/add/y"
  op: "Const"
  input: "^encode_images/output_pngs/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/while/add"
  op: "Add"
  input: "encode_images/output_pngs/while/Identity"
  input: "encode_images/output_pngs/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/while/NextIteration"
  op: "NextIteration"
  input: "encode_images/output_pngs/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/while/NextIteration_1"
  op: "NextIteration"
  input: "encode_images/output_pngs/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/while/Exit"
  op: "Exit"
  input: "encode_images/output_pngs/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/while/Exit_1"
  op: "Exit"
  input: "encode_images/output_pngs/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "encode_images/output_pngs/TensorArray_1"
  input: "encode_images/output_pngs/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/output_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/output_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/output_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayStack/range"
  op: "Range"
  input: "encode_images/output_pngs/TensorArrayStack/range/start"
  input: "encode_images/output_pngs/TensorArrayStack/TensorArraySizeV3"
  input: "encode_images/output_pngs/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/output_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encode_images/output_pngs/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encode_images/output_pngs/TensorArray_1"
  input: "encode_images/output_pngs/TensorArrayStack/range"
  input: "encode_images/output_pngs/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/output_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/Shape"
  op: "Shape"
  input: "convert_images/convert_image_3"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encode_images/psf_pngs/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/strided_slice"
  op: "StridedSlice"
  input: "encode_images/psf_pngs/Shape"
  input: "encode_images/psf_pngs/strided_slice/stack"
  input: "encode_images/psf_pngs/strided_slice/stack_1"
  input: "encode_images/psf_pngs/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encode_images/psf_pngs/TensorArray"
  op: "TensorArrayV3"
  input: "encode_images/psf_pngs/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encode_images/psf_pngs/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "convert_images/convert_image_3"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encode_images/psf_pngs/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encode_images/psf_pngs/TensorArrayUnstack/Shape"
  input: "encode_images/psf_pngs/TensorArrayUnstack/strided_slice/stack"
  input: "encode_images/psf_pngs/TensorArrayUnstack/strided_slice/stack_1"
  input: "encode_images/psf_pngs/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encode_images/psf_pngs/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/TensorArrayUnstack/range"
  op: "Range"
  input: "encode_images/psf_pngs/TensorArrayUnstack/range/start"
  input: "encode_images/psf_pngs/TensorArrayUnstack/strided_slice"
  input: "encode_images/psf_pngs/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encode_images/psf_pngs/TensorArray"
  input: "encode_images/psf_pngs/TensorArrayUnstack/range"
  input: "convert_images/convert_image_3"
  input: "encode_images/psf_pngs/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convert_images/convert_image_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/TensorArray_1"
  op: "TensorArrayV3"
  input: "encode_images/psf_pngs/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/Enter"
  op: "Enter"
  input: "encode_images/psf_pngs/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/psf_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/Enter_1"
  op: "Enter"
  input: "encode_images/psf_pngs/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/psf_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/Merge"
  op: "Merge"
  input: "encode_images/psf_pngs/while/Enter"
  input: "encode_images/psf_pngs/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/Merge_1"
  op: "Merge"
  input: "encode_images/psf_pngs/while/Enter_1"
  input: "encode_images/psf_pngs/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/Less"
  op: "Less"
  input: "encode_images/psf_pngs/while/Merge"
  input: "encode_images/psf_pngs/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/Less/Enter"
  op: "Enter"
  input: "encode_images/psf_pngs/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/psf_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/LoopCond"
  op: "LoopCond"
  input: "encode_images/psf_pngs/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/Switch"
  op: "Switch"
  input: "encode_images/psf_pngs/while/Merge"
  input: "encode_images/psf_pngs/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/psf_pngs/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/Switch_1"
  op: "Switch"
  input: "encode_images/psf_pngs/while/Merge_1"
  input: "encode_images/psf_pngs/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/psf_pngs/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/Identity"
  op: "Identity"
  input: "encode_images/psf_pngs/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/Identity_1"
  op: "Identity"
  input: "encode_images/psf_pngs/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encode_images/psf_pngs/while/TensorArrayReadV3/Enter"
  input: "encode_images/psf_pngs/while/Identity"
  input: "encode_images/psf_pngs/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encode_images/psf_pngs/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/psf_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encode_images/psf_pngs/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/psf_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/EncodePng"
  op: "EncodePng"
  input: "encode_images/psf_pngs/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "compression"
    value {
      i: -1
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encode_images/psf_pngs/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encode_images/psf_pngs/while/Identity"
  input: "encode_images/psf_pngs/while/EncodePng"
  input: "encode_images/psf_pngs/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/psf_pngs/while/EncodePng"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encode_images/psf_pngs/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/psf_pngs/while/EncodePng"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/psf_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/add/y"
  op: "Const"
  input: "^encode_images/psf_pngs/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/add"
  op: "Add"
  input: "encode_images/psf_pngs/while/Identity"
  input: "encode_images/psf_pngs/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/NextIteration"
  op: "NextIteration"
  input: "encode_images/psf_pngs/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/NextIteration_1"
  op: "NextIteration"
  input: "encode_images/psf_pngs/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/Exit"
  op: "Exit"
  input: "encode_images/psf_pngs/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/while/Exit_1"
  op: "Exit"
  input: "encode_images/psf_pngs/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "encode_images/psf_pngs/TensorArray_1"
  input: "encode_images/psf_pngs/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/psf_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/psf_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/psf_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/TensorArrayStack/range"
  op: "Range"
  input: "encode_images/psf_pngs/TensorArrayStack/range/start"
  input: "encode_images/psf_pngs/TensorArrayStack/TensorArraySizeV3"
  input: "encode_images/psf_pngs/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/psf_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encode_images/psf_pngs/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encode_images/psf_pngs/TensorArray_1"
  input: "encode_images/psf_pngs/TensorArrayStack/range"
  input: "encode_images/psf_pngs/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/psf_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/Shape"
  op: "Shape"
  input: "convert_images/convert_image_4"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encode_images/residual_pngs/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/strided_slice"
  op: "StridedSlice"
  input: "encode_images/residual_pngs/Shape"
  input: "encode_images/residual_pngs/strided_slice/stack"
  input: "encode_images/residual_pngs/strided_slice/stack_1"
  input: "encode_images/residual_pngs/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encode_images/residual_pngs/TensorArray"
  op: "TensorArrayV3"
  input: "encode_images/residual_pngs/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encode_images/residual_pngs/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "convert_images/convert_image_4"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encode_images/residual_pngs/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encode_images/residual_pngs/TensorArrayUnstack/Shape"
  input: "encode_images/residual_pngs/TensorArrayUnstack/strided_slice/stack"
  input: "encode_images/residual_pngs/TensorArrayUnstack/strided_slice/stack_1"
  input: "encode_images/residual_pngs/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encode_images/residual_pngs/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/TensorArrayUnstack/range"
  op: "Range"
  input: "encode_images/residual_pngs/TensorArrayUnstack/range/start"
  input: "encode_images/residual_pngs/TensorArrayUnstack/strided_slice"
  input: "encode_images/residual_pngs/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encode_images/residual_pngs/TensorArray"
  input: "encode_images/residual_pngs/TensorArrayUnstack/range"
  input: "convert_images/convert_image_4"
  input: "encode_images/residual_pngs/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convert_images/convert_image_4"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/TensorArray_1"
  op: "TensorArrayV3"
  input: "encode_images/residual_pngs/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/Enter"
  op: "Enter"
  input: "encode_images/residual_pngs/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/residual_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/Enter_1"
  op: "Enter"
  input: "encode_images/residual_pngs/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/residual_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/Merge"
  op: "Merge"
  input: "encode_images/residual_pngs/while/Enter"
  input: "encode_images/residual_pngs/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/Merge_1"
  op: "Merge"
  input: "encode_images/residual_pngs/while/Enter_1"
  input: "encode_images/residual_pngs/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/Less"
  op: "Less"
  input: "encode_images/residual_pngs/while/Merge"
  input: "encode_images/residual_pngs/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/Less/Enter"
  op: "Enter"
  input: "encode_images/residual_pngs/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/residual_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/LoopCond"
  op: "LoopCond"
  input: "encode_images/residual_pngs/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/Switch"
  op: "Switch"
  input: "encode_images/residual_pngs/while/Merge"
  input: "encode_images/residual_pngs/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/residual_pngs/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/Switch_1"
  op: "Switch"
  input: "encode_images/residual_pngs/while/Merge_1"
  input: "encode_images/residual_pngs/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/residual_pngs/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/Identity"
  op: "Identity"
  input: "encode_images/residual_pngs/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/Identity_1"
  op: "Identity"
  input: "encode_images/residual_pngs/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encode_images/residual_pngs/while/TensorArrayReadV3/Enter"
  input: "encode_images/residual_pngs/while/Identity"
  input: "encode_images/residual_pngs/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_UINT8
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encode_images/residual_pngs/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/residual_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encode_images/residual_pngs/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/residual_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/EncodePng"
  op: "EncodePng"
  input: "encode_images/residual_pngs/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "compression"
    value {
      i: -1
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encode_images/residual_pngs/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encode_images/residual_pngs/while/Identity"
  input: "encode_images/residual_pngs/while/EncodePng"
  input: "encode_images/residual_pngs/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/residual_pngs/while/EncodePng"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encode_images/residual_pngs/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/residual_pngs/while/EncodePng"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_images/residual_pngs/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/add/y"
  op: "Const"
  input: "^encode_images/residual_pngs/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/add"
  op: "Add"
  input: "encode_images/residual_pngs/while/Identity"
  input: "encode_images/residual_pngs/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/NextIteration"
  op: "NextIteration"
  input: "encode_images/residual_pngs/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/NextIteration_1"
  op: "NextIteration"
  input: "encode_images/residual_pngs/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/Exit"
  op: "Exit"
  input: "encode_images/residual_pngs/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/while/Exit_1"
  op: "Exit"
  input: "encode_images/residual_pngs/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "encode_images/residual_pngs/TensorArray_1"
  input: "encode_images/residual_pngs/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/residual_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/residual_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/residual_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/TensorArrayStack/range"
  op: "Range"
  input: "encode_images/residual_pngs/TensorArrayStack/range/start"
  input: "encode_images/residual_pngs/TensorArrayStack/TensorArraySizeV3"
  input: "encode_images/residual_pngs/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/residual_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encode_images/residual_pngs/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encode_images/residual_pngs/TensorArray_1"
  input: "encode_images/residual_pngs/TensorArrayStack/range"
  input: "encode_images/residual_pngs/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_images/residual_pngs/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/Shape"
  op: "Shape"
  input: "IteratorGetNext:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encode_fitss/input_fits/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/strided_slice"
  op: "StridedSlice"
  input: "encode_fitss/input_fits/Shape"
  input: "encode_fitss/input_fits/strided_slice/stack"
  input: "encode_fitss/input_fits/strided_slice/stack_1"
  input: "encode_fitss/input_fits/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encode_fitss/input_fits/TensorArray"
  op: "TensorArrayV3"
  input: "encode_fitss/input_fits/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encode_fitss/input_fits/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "IteratorGetNext:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encode_fitss/input_fits/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encode_fitss/input_fits/TensorArrayUnstack/Shape"
  input: "encode_fitss/input_fits/TensorArrayUnstack/strided_slice/stack"
  input: "encode_fitss/input_fits/TensorArrayUnstack/strided_slice/stack_1"
  input: "encode_fitss/input_fits/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encode_fitss/input_fits/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/TensorArrayUnstack/range"
  op: "Range"
  input: "encode_fitss/input_fits/TensorArrayUnstack/range/start"
  input: "encode_fitss/input_fits/TensorArrayUnstack/strided_slice"
  input: "encode_fitss/input_fits/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encode_fitss/input_fits/TensorArray"
  input: "encode_fitss/input_fits/TensorArrayUnstack/range"
  input: "IteratorGetNext:4"
  input: "encode_fitss/input_fits/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorGetNext"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/TensorArray_1"
  op: "TensorArrayV3"
  input: "encode_fitss/input_fits/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/Enter"
  op: "Enter"
  input: "encode_fitss/input_fits/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/input_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/Enter_1"
  op: "Enter"
  input: "encode_fitss/input_fits/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/input_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/Merge"
  op: "Merge"
  input: "encode_fitss/input_fits/while/Enter"
  input: "encode_fitss/input_fits/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/Merge_1"
  op: "Merge"
  input: "encode_fitss/input_fits/while/Enter_1"
  input: "encode_fitss/input_fits/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/Less"
  op: "Less"
  input: "encode_fitss/input_fits/while/Merge"
  input: "encode_fitss/input_fits/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/Less/Enter"
  op: "Enter"
  input: "encode_fitss/input_fits/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/input_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/LoopCond"
  op: "LoopCond"
  input: "encode_fitss/input_fits/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/Switch"
  op: "Switch"
  input: "encode_fitss/input_fits/while/Merge"
  input: "encode_fitss/input_fits/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/input_fits/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/Switch_1"
  op: "Switch"
  input: "encode_fitss/input_fits/while/Merge_1"
  input: "encode_fitss/input_fits/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/input_fits/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/Identity"
  op: "Identity"
  input: "encode_fitss/input_fits/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/Identity_1"
  op: "Identity"
  input: "encode_fitss/input_fits/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encode_fitss/input_fits/while/TensorArrayReadV3/Enter"
  input: "encode_fitss/input_fits/while/Identity"
  input: "encode_fitss/input_fits/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encode_fitss/input_fits/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/input_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encode_fitss/input_fits/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/input_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/PyFunc"
  op: "PyFunc"
  input: "encode_fitss/input_fits/while/TensorArrayReadV3"
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "token"
    value {
      s: "pyfunc_3"
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encode_fitss/input_fits/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encode_fitss/input_fits/while/Identity"
  input: "encode_fitss/input_fits/while/PyFunc"
  input: "encode_fitss/input_fits/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/input_fits/while/PyFunc"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encode_fitss/input_fits/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/input_fits/while/PyFunc"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/input_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/add/y"
  op: "Const"
  input: "^encode_fitss/input_fits/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/add"
  op: "Add"
  input: "encode_fitss/input_fits/while/Identity"
  input: "encode_fitss/input_fits/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/NextIteration"
  op: "NextIteration"
  input: "encode_fitss/input_fits/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/NextIteration_1"
  op: "NextIteration"
  input: "encode_fitss/input_fits/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/Exit"
  op: "Exit"
  input: "encode_fitss/input_fits/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/while/Exit_1"
  op: "Exit"
  input: "encode_fitss/input_fits/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "encode_fitss/input_fits/TensorArray_1"
  input: "encode_fitss/input_fits/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/input_fits/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/input_fits/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/input_fits/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/TensorArrayStack/range"
  op: "Range"
  input: "encode_fitss/input_fits/TensorArrayStack/range/start"
  input: "encode_fitss/input_fits/TensorArrayStack/TensorArraySizeV3"
  input: "encode_fitss/input_fits/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/input_fits/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encode_fitss/input_fits/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encode_fitss/input_fits/TensorArray_1"
  input: "encode_fitss/input_fits/TensorArrayStack/range"
  input: "encode_fitss/input_fits/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/input_fits/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/Shape"
  op: "Shape"
  input: "IteratorGetNext:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encode_fitss/target_fits/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/strided_slice"
  op: "StridedSlice"
  input: "encode_fitss/target_fits/Shape"
  input: "encode_fitss/target_fits/strided_slice/stack"
  input: "encode_fitss/target_fits/strided_slice/stack_1"
  input: "encode_fitss/target_fits/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encode_fitss/target_fits/TensorArray"
  op: "TensorArrayV3"
  input: "encode_fitss/target_fits/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encode_fitss/target_fits/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "IteratorGetNext:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encode_fitss/target_fits/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encode_fitss/target_fits/TensorArrayUnstack/Shape"
  input: "encode_fitss/target_fits/TensorArrayUnstack/strided_slice/stack"
  input: "encode_fitss/target_fits/TensorArrayUnstack/strided_slice/stack_1"
  input: "encode_fitss/target_fits/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encode_fitss/target_fits/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/TensorArrayUnstack/range"
  op: "Range"
  input: "encode_fitss/target_fits/TensorArrayUnstack/range/start"
  input: "encode_fitss/target_fits/TensorArrayUnstack/strided_slice"
  input: "encode_fitss/target_fits/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encode_fitss/target_fits/TensorArray"
  input: "encode_fitss/target_fits/TensorArrayUnstack/range"
  input: "IteratorGetNext:5"
  input: "encode_fitss/target_fits/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorGetNext"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/TensorArray_1"
  op: "TensorArrayV3"
  input: "encode_fitss/target_fits/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/Enter"
  op: "Enter"
  input: "encode_fitss/target_fits/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/target_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/Enter_1"
  op: "Enter"
  input: "encode_fitss/target_fits/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/target_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/Merge"
  op: "Merge"
  input: "encode_fitss/target_fits/while/Enter"
  input: "encode_fitss/target_fits/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/Merge_1"
  op: "Merge"
  input: "encode_fitss/target_fits/while/Enter_1"
  input: "encode_fitss/target_fits/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/Less"
  op: "Less"
  input: "encode_fitss/target_fits/while/Merge"
  input: "encode_fitss/target_fits/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/Less/Enter"
  op: "Enter"
  input: "encode_fitss/target_fits/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/target_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/LoopCond"
  op: "LoopCond"
  input: "encode_fitss/target_fits/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/Switch"
  op: "Switch"
  input: "encode_fitss/target_fits/while/Merge"
  input: "encode_fitss/target_fits/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/target_fits/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/Switch_1"
  op: "Switch"
  input: "encode_fitss/target_fits/while/Merge_1"
  input: "encode_fitss/target_fits/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/target_fits/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/Identity"
  op: "Identity"
  input: "encode_fitss/target_fits/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/Identity_1"
  op: "Identity"
  input: "encode_fitss/target_fits/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encode_fitss/target_fits/while/TensorArrayReadV3/Enter"
  input: "encode_fitss/target_fits/while/Identity"
  input: "encode_fitss/target_fits/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encode_fitss/target_fits/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/target_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encode_fitss/target_fits/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/target_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/PyFunc"
  op: "PyFunc"
  input: "encode_fitss/target_fits/while/TensorArrayReadV3"
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "token"
    value {
      s: "pyfunc_4"
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encode_fitss/target_fits/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encode_fitss/target_fits/while/Identity"
  input: "encode_fitss/target_fits/while/PyFunc"
  input: "encode_fitss/target_fits/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/target_fits/while/PyFunc"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encode_fitss/target_fits/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/target_fits/while/PyFunc"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/target_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/add/y"
  op: "Const"
  input: "^encode_fitss/target_fits/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/add"
  op: "Add"
  input: "encode_fitss/target_fits/while/Identity"
  input: "encode_fitss/target_fits/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/NextIteration"
  op: "NextIteration"
  input: "encode_fitss/target_fits/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/NextIteration_1"
  op: "NextIteration"
  input: "encode_fitss/target_fits/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/Exit"
  op: "Exit"
  input: "encode_fitss/target_fits/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/while/Exit_1"
  op: "Exit"
  input: "encode_fitss/target_fits/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "encode_fitss/target_fits/TensorArray_1"
  input: "encode_fitss/target_fits/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/target_fits/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/target_fits/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/target_fits/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/TensorArrayStack/range"
  op: "Range"
  input: "encode_fitss/target_fits/TensorArrayStack/range/start"
  input: "encode_fitss/target_fits/TensorArrayStack/TensorArraySizeV3"
  input: "encode_fitss/target_fits/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/target_fits/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encode_fitss/target_fits/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encode_fitss/target_fits/TensorArray_1"
  input: "encode_fitss/target_fits/TensorArrayStack/range"
  input: "encode_fitss/target_fits/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/target_fits/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/Shape"
  op: "Shape"
  input: "deprocess/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encode_fitss/output_fits/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/strided_slice"
  op: "StridedSlice"
  input: "encode_fitss/output_fits/Shape"
  input: "encode_fitss/output_fits/strided_slice/stack"
  input: "encode_fitss/output_fits/strided_slice/stack_1"
  input: "encode_fitss/output_fits/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encode_fitss/output_fits/TensorArray"
  op: "TensorArrayV3"
  input: "encode_fitss/output_fits/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encode_fitss/output_fits/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "deprocess/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encode_fitss/output_fits/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encode_fitss/output_fits/TensorArrayUnstack/Shape"
  input: "encode_fitss/output_fits/TensorArrayUnstack/strided_slice/stack"
  input: "encode_fitss/output_fits/TensorArrayUnstack/strided_slice/stack_1"
  input: "encode_fitss/output_fits/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encode_fitss/output_fits/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/TensorArrayUnstack/range"
  op: "Range"
  input: "encode_fitss/output_fits/TensorArrayUnstack/range/start"
  input: "encode_fitss/output_fits/TensorArrayUnstack/strided_slice"
  input: "encode_fitss/output_fits/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encode_fitss/output_fits/TensorArray"
  input: "encode_fitss/output_fits/TensorArrayUnstack/range"
  input: "deprocess/mul"
  input: "encode_fitss/output_fits/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@deprocess/mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/TensorArray_1"
  op: "TensorArrayV3"
  input: "encode_fitss/output_fits/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/Enter"
  op: "Enter"
  input: "encode_fitss/output_fits/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/output_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/Enter_1"
  op: "Enter"
  input: "encode_fitss/output_fits/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/output_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/Merge"
  op: "Merge"
  input: "encode_fitss/output_fits/while/Enter"
  input: "encode_fitss/output_fits/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/Merge_1"
  op: "Merge"
  input: "encode_fitss/output_fits/while/Enter_1"
  input: "encode_fitss/output_fits/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/Less"
  op: "Less"
  input: "encode_fitss/output_fits/while/Merge"
  input: "encode_fitss/output_fits/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/Less/Enter"
  op: "Enter"
  input: "encode_fitss/output_fits/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/output_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/LoopCond"
  op: "LoopCond"
  input: "encode_fitss/output_fits/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/Switch"
  op: "Switch"
  input: "encode_fitss/output_fits/while/Merge"
  input: "encode_fitss/output_fits/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/output_fits/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/Switch_1"
  op: "Switch"
  input: "encode_fitss/output_fits/while/Merge_1"
  input: "encode_fitss/output_fits/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/output_fits/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/Identity"
  op: "Identity"
  input: "encode_fitss/output_fits/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/Identity_1"
  op: "Identity"
  input: "encode_fitss/output_fits/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encode_fitss/output_fits/while/TensorArrayReadV3/Enter"
  input: "encode_fitss/output_fits/while/Identity"
  input: "encode_fitss/output_fits/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encode_fitss/output_fits/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/output_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encode_fitss/output_fits/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/output_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/PyFunc"
  op: "PyFunc"
  input: "encode_fitss/output_fits/while/TensorArrayReadV3"
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "token"
    value {
      s: "pyfunc_5"
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encode_fitss/output_fits/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encode_fitss/output_fits/while/Identity"
  input: "encode_fitss/output_fits/while/PyFunc"
  input: "encode_fitss/output_fits/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/output_fits/while/PyFunc"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encode_fitss/output_fits/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/output_fits/while/PyFunc"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/output_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/add/y"
  op: "Const"
  input: "^encode_fitss/output_fits/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/add"
  op: "Add"
  input: "encode_fitss/output_fits/while/Identity"
  input: "encode_fitss/output_fits/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/NextIteration"
  op: "NextIteration"
  input: "encode_fitss/output_fits/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/NextIteration_1"
  op: "NextIteration"
  input: "encode_fitss/output_fits/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/Exit"
  op: "Exit"
  input: "encode_fitss/output_fits/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/while/Exit_1"
  op: "Exit"
  input: "encode_fitss/output_fits/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "encode_fitss/output_fits/TensorArray_1"
  input: "encode_fitss/output_fits/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/output_fits/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/output_fits/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/output_fits/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/TensorArrayStack/range"
  op: "Range"
  input: "encode_fitss/output_fits/TensorArrayStack/range/start"
  input: "encode_fitss/output_fits/TensorArrayStack/TensorArraySizeV3"
  input: "encode_fitss/output_fits/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/output_fits/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encode_fitss/output_fits/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encode_fitss/output_fits/TensorArray_1"
  input: "encode_fitss/output_fits/TensorArrayStack/range"
  input: "encode_fitss/output_fits/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/output_fits/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/Shape"
  op: "Shape"
  input: "calculate_residuals/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/strided_slice"
  op: "StridedSlice"
  input: "encode_fitss/residuals_fits/Shape"
  input: "encode_fitss/residuals_fits/strided_slice/stack"
  input: "encode_fitss/residuals_fits/strided_slice/stack_1"
  input: "encode_fitss/residuals_fits/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/TensorArray"
  op: "TensorArrayV3"
  input: "encode_fitss/residuals_fits/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "calculate_residuals/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encode_fitss/residuals_fits/TensorArrayUnstack/Shape"
  input: "encode_fitss/residuals_fits/TensorArrayUnstack/strided_slice/stack"
  input: "encode_fitss/residuals_fits/TensorArrayUnstack/strided_slice/stack_1"
  input: "encode_fitss/residuals_fits/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/TensorArrayUnstack/range"
  op: "Range"
  input: "encode_fitss/residuals_fits/TensorArrayUnstack/range/start"
  input: "encode_fitss/residuals_fits/TensorArrayUnstack/strided_slice"
  input: "encode_fitss/residuals_fits/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encode_fitss/residuals_fits/TensorArray"
  input: "encode_fitss/residuals_fits/TensorArrayUnstack/range"
  input: "calculate_residuals/sub"
  input: "encode_fitss/residuals_fits/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@calculate_residuals/sub"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/TensorArray_1"
  op: "TensorArrayV3"
  input: "encode_fitss/residuals_fits/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "identical_element_shapes"
    value {
      b: true
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/Enter"
  op: "Enter"
  input: "encode_fitss/residuals_fits/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/residuals_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/Enter_1"
  op: "Enter"
  input: "encode_fitss/residuals_fits/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/residuals_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/Merge"
  op: "Merge"
  input: "encode_fitss/residuals_fits/while/Enter"
  input: "encode_fitss/residuals_fits/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/Merge_1"
  op: "Merge"
  input: "encode_fitss/residuals_fits/while/Enter_1"
  input: "encode_fitss/residuals_fits/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/Less"
  op: "Less"
  input: "encode_fitss/residuals_fits/while/Merge"
  input: "encode_fitss/residuals_fits/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/Less/Enter"
  op: "Enter"
  input: "encode_fitss/residuals_fits/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/residuals_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/LoopCond"
  op: "LoopCond"
  input: "encode_fitss/residuals_fits/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/Switch"
  op: "Switch"
  input: "encode_fitss/residuals_fits/while/Merge"
  input: "encode_fitss/residuals_fits/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/residuals_fits/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/Switch_1"
  op: "Switch"
  input: "encode_fitss/residuals_fits/while/Merge_1"
  input: "encode_fitss/residuals_fits/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/residuals_fits/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/Identity"
  op: "Identity"
  input: "encode_fitss/residuals_fits/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/Identity_1"
  op: "Identity"
  input: "encode_fitss/residuals_fits/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encode_fitss/residuals_fits/while/TensorArrayReadV3/Enter"
  input: "encode_fitss/residuals_fits/while/Identity"
  input: "encode_fitss/residuals_fits/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 256
          }
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encode_fitss/residuals_fits/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/residuals_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encode_fitss/residuals_fits/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/residuals_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/PyFunc"
  op: "PyFunc"
  input: "encode_fitss/residuals_fits/while/TensorArrayReadV3"
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "token"
    value {
      s: "pyfunc_6"
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encode_fitss/residuals_fits/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encode_fitss/residuals_fits/while/Identity"
  input: "encode_fitss/residuals_fits/while/PyFunc"
  input: "encode_fitss/residuals_fits/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/residuals_fits/while/PyFunc"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encode_fitss/residuals_fits/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/residuals_fits/while/PyFunc"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encode_fitss/residuals_fits/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 10
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/add/y"
  op: "Const"
  input: "^encode_fitss/residuals_fits/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/add"
  op: "Add"
  input: "encode_fitss/residuals_fits/while/Identity"
  input: "encode_fitss/residuals_fits/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/NextIteration"
  op: "NextIteration"
  input: "encode_fitss/residuals_fits/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/NextIteration_1"
  op: "NextIteration"
  input: "encode_fitss/residuals_fits/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/Exit"
  op: "Exit"
  input: "encode_fitss/residuals_fits/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/while/Exit_1"
  op: "Exit"
  input: "encode_fitss/residuals_fits/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "encode_fitss/residuals_fits/TensorArray_1"
  input: "encode_fitss/residuals_fits/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/residuals_fits/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/residuals_fits/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/residuals_fits/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/TensorArrayStack/range"
  op: "Range"
  input: "encode_fitss/residuals_fits/TensorArrayStack/range/start"
  input: "encode_fitss/residuals_fits/TensorArrayStack/TensorArraySizeV3"
  input: "encode_fitss/residuals_fits/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/residuals_fits/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encode_fitss/residuals_fits/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encode_fitss/residuals_fits/TensorArray_1"
  input: "encode_fitss/residuals_fits/TensorArrayStack/range"
  input: "encode_fitss/residuals_fits/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encode_fitss/residuals_fits/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "combined_summary/inputs/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "combined_summary/inputs"
      }
    }
  }
}
node {
  name: "combined_summary/inputs"
  op: "ImageSummary"
  input: "combined_summary/inputs/tag"
  input: "convert_images/convert_image"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "bad_color"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 4
          }
        }
        int_val: 255
        int_val: 0
        int_val: 0
        int_val: 255
      }
    }
  }
  attr {
    key: "max_images"
    value {
      i: 3
    }
  }
}
node {
  name: "combined_summary/outputs/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "combined_summary/outputs"
      }
    }
  }
}
node {
  name: "combined_summary/outputs"
  op: "ImageSummary"
  input: "combined_summary/outputs/tag"
  input: "convert_images/convert_image_2"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "bad_color"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 4
          }
        }
        int_val: 255
        int_val: 0
        int_val: 0
        int_val: 255
      }
    }
  }
  attr {
    key: "max_images"
    value {
      i: 3
    }
  }
}
node {
  name: "combined_summary/targets/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "combined_summary/targets"
      }
    }
  }
}
node {
  name: "combined_summary/targets"
  op: "ImageSummary"
  input: "combined_summary/targets/tag"
  input: "convert_images/convert_image_1"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "bad_color"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 4
          }
        }
        int_val: 255
        int_val: 0
        int_val: 0
        int_val: 255
      }
    }
  }
  attr {
    key: "max_images"
    value {
      i: 3
    }
  }
}
node {
  name: "combined_summary/residuals/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "combined_summary/residuals"
      }
    }
  }
}
node {
  name: "combined_summary/residuals"
  op: "ImageSummary"
  input: "combined_summary/residuals/tag"
  input: "convert_images/convert_image_4"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "bad_color"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 4
          }
        }
        int_val: 255
        int_val: 0
        int_val: 0
        int_val: 255
      }
    }
  }
  attr {
    key: "max_images"
    value {
      i: 3
    }
  }
}
node {
  name: "psfs_summary/psfss/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "psfs_summary/psfss"
      }
    }
  }
}
node {
  name: "psfs_summary/psfss"
  op: "ImageSummary"
  input: "psfs_summary/psfss/tag"
  input: "convert_images/convert_image_3"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "bad_color"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 4
          }
        }
        int_val: 255
        int_val: 0
        int_val: 0
        int_val: 255
      }
    }
  }
  attr {
    key: "max_images"
    value {
      i: 3
    }
  }
}
node {
  name: "predict_real_summary/convert_image/Mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.5
      }
    }
  }
}
node {
  name: "predict_real_summary/convert_image/Mul"
  op: "Mul"
  input: "real_discriminator/discriminator/layer_5/Sigmoid"
  input: "predict_real_summary/convert_image/Mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "predict_real_summary/convert_image"
  op: "Cast"
  input: "predict_real_summary/convert_image/Mul"
  attr {
    key: "DstT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "predict_real_summary/predict_real/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predict_real_summary/predict_real"
      }
    }
  }
}
node {
  name: "predict_real_summary/predict_real"
  op: "ImageSummary"
  input: "predict_real_summary/predict_real/tag"
  input: "predict_real_summary/convert_image"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "bad_color"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 4
          }
        }
        int_val: 255
        int_val: 0
        int_val: 0
        int_val: 255
      }
    }
  }
  attr {
    key: "max_images"
    value {
      i: 3
    }
  }
}
node {
  name: "predict_fake_summary/convert_image/Mul/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 255.5
      }
    }
  }
}
node {
  name: "predict_fake_summary/convert_image/Mul"
  op: "Mul"
  input: "fake_discriminator/discriminator/layer_5/Sigmoid"
  input: "predict_fake_summary/convert_image/Mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "predict_fake_summary/convert_image"
  op: "Cast"
  input: "predict_fake_summary/convert_image/Mul"
  attr {
    key: "DstT"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
          dim {
            size: 30
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "predict_fake_summary/predict_fake/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "predict_fake_summary/predict_fake"
      }
    }
  }
}
node {
  name: "predict_fake_summary/predict_fake"
  op: "ImageSummary"
  input: "predict_fake_summary/predict_fake/tag"
  input: "predict_fake_summary/convert_image"
  attr {
    key: "T"
    value {
      type: DT_UINT8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "bad_color"
    value {
      tensor {
        dtype: DT_UINT8
        tensor_shape {
          dim {
            size: 4
          }
        }
        int_val: 255
        int_val: 0
        int_val: 0
        int_val: 255
      }
    }
  }
  attr {
    key: "max_images"
    value {
      i: 3
    }
  }
}
node {
  name: "discriminator_loss_1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator_loss_1"
      }
    }
  }
}
node {
  name: "discriminator_loss_1"
  op: "ScalarSummary"
  input: "discriminator_loss_1/tags"
  input: "discriminator_loss/Mean/ExponentialMovingAverage/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_loss_GAN/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator_loss_GAN"
      }
    }
  }
}
node {
  name: "generator_loss_GAN"
  op: "ScalarSummary"
  input: "generator_loss_GAN/tags"
  input: "generator_loss/Mean/ExponentialMovingAverage/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator_loss_L1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator_loss_L1"
      }
    }
  }
}
node {
  name: "generator_loss_L1"
  op: "ScalarSummary"
  input: "generator_loss_L1/tags"
  input: "generator_loss/Mean_1/ExponentialMovingAverage/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_1/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "generator/encoder_1/conv2d/kernel/values/tag"
  input: "generator/encoder_1/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_1/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/values"
  op: "HistogramSummary"
  input: "generator/encoder_1/conv2d/bias/values/tag"
  input: "generator/encoder_1/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_2/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "generator/encoder_2/conv2d/kernel/values/tag"
  input: "generator/encoder_2/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_2/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/values"
  op: "HistogramSummary"
  input: "generator/encoder_2/conv2d/bias/values/tag"
  input: "generator/encoder_2/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_2/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/encoder_2/batch_normalization/gamma/values/tag"
  input: "generator/encoder_2/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_2/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/encoder_2/batch_normalization/beta/values/tag"
  input: "generator/encoder_2/batch_normalization/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_3/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "generator/encoder_3/conv2d/kernel/values/tag"
  input: "generator/encoder_3/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_3/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/values"
  op: "HistogramSummary"
  input: "generator/encoder_3/conv2d/bias/values/tag"
  input: "generator/encoder_3/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_3/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/encoder_3/batch_normalization/gamma/values/tag"
  input: "generator/encoder_3/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_3/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/encoder_3/batch_normalization/beta/values/tag"
  input: "generator/encoder_3/batch_normalization/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_4/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "generator/encoder_4/conv2d/kernel/values/tag"
  input: "generator/encoder_4/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_4/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/values"
  op: "HistogramSummary"
  input: "generator/encoder_4/conv2d/bias/values/tag"
  input: "generator/encoder_4/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_4/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/encoder_4/batch_normalization/gamma/values/tag"
  input: "generator/encoder_4/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_4/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/encoder_4/batch_normalization/beta/values/tag"
  input: "generator/encoder_4/batch_normalization/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_5/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "generator/encoder_5/conv2d/kernel/values/tag"
  input: "generator/encoder_5/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_5/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/values"
  op: "HistogramSummary"
  input: "generator/encoder_5/conv2d/bias/values/tag"
  input: "generator/encoder_5/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_5/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/encoder_5/batch_normalization/gamma/values/tag"
  input: "generator/encoder_5/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_5/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/encoder_5/batch_normalization/beta/values/tag"
  input: "generator/encoder_5/batch_normalization/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_6/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "generator/encoder_6/conv2d/kernel/values/tag"
  input: "generator/encoder_6/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_6/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/values"
  op: "HistogramSummary"
  input: "generator/encoder_6/conv2d/bias/values/tag"
  input: "generator/encoder_6/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_6/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/encoder_6/batch_normalization/gamma/values/tag"
  input: "generator/encoder_6/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_6/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/encoder_6/batch_normalization/beta/values/tag"
  input: "generator/encoder_6/batch_normalization/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_7/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "generator/encoder_7/conv2d/kernel/values/tag"
  input: "generator/encoder_7/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_7/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/values"
  op: "HistogramSummary"
  input: "generator/encoder_7/conv2d/bias/values/tag"
  input: "generator/encoder_7/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_7/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/encoder_7/batch_normalization/gamma/values/tag"
  input: "generator/encoder_7/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_7/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/encoder_7/batch_normalization/beta/values/tag"
  input: "generator/encoder_7/batch_normalization/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_8/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "generator/encoder_8/conv2d/kernel/values/tag"
  input: "generator/encoder_8/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_8/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/values"
  op: "HistogramSummary"
  input: "generator/encoder_8/conv2d/bias/values/tag"
  input: "generator/encoder_8/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_8/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/encoder_8/batch_normalization/gamma/values/tag"
  input: "generator/encoder_8/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_8/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/encoder_8/batch_normalization/beta/values/tag"
  input: "generator/encoder_8/batch_normalization/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_8/conv2d_transpose/kernel/values"
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/values"
  op: "HistogramSummary"
  input: "generator/decoder_8/conv2d_transpose/kernel/values/tag"
  input: "generator/decoder_8/conv2d_transpose/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_8/conv2d_transpose/bias/values"
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/values"
  op: "HistogramSummary"
  input: "generator/decoder_8/conv2d_transpose/bias/values/tag"
  input: "generator/decoder_8/conv2d_transpose/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_8/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/decoder_8/batch_normalization/gamma/values/tag"
  input: "generator/decoder_8/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_8/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/decoder_8/batch_normalization/beta/values/tag"
  input: "generator/decoder_8/batch_normalization/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_7/conv2d_transpose/kernel/values"
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/values"
  op: "HistogramSummary"
  input: "generator/decoder_7/conv2d_transpose/kernel/values/tag"
  input: "generator/decoder_7/conv2d_transpose/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_7/conv2d_transpose/bias/values"
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/values"
  op: "HistogramSummary"
  input: "generator/decoder_7/conv2d_transpose/bias/values/tag"
  input: "generator/decoder_7/conv2d_transpose/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_7/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/decoder_7/batch_normalization/gamma/values/tag"
  input: "generator/decoder_7/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_7/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/decoder_7/batch_normalization/beta/values/tag"
  input: "generator/decoder_7/batch_normalization/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_6/conv2d_transpose/kernel/values"
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/values"
  op: "HistogramSummary"
  input: "generator/decoder_6/conv2d_transpose/kernel/values/tag"
  input: "generator/decoder_6/conv2d_transpose/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_6/conv2d_transpose/bias/values"
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/values"
  op: "HistogramSummary"
  input: "generator/decoder_6/conv2d_transpose/bias/values/tag"
  input: "generator/decoder_6/conv2d_transpose/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_6/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/decoder_6/batch_normalization/gamma/values/tag"
  input: "generator/decoder_6/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_6/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/decoder_6/batch_normalization/beta/values/tag"
  input: "generator/decoder_6/batch_normalization/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_5/conv2d_transpose/kernel/values"
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/values"
  op: "HistogramSummary"
  input: "generator/decoder_5/conv2d_transpose/kernel/values/tag"
  input: "generator/decoder_5/conv2d_transpose/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_5/conv2d_transpose/bias/values"
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/values"
  op: "HistogramSummary"
  input: "generator/decoder_5/conv2d_transpose/bias/values/tag"
  input: "generator/decoder_5/conv2d_transpose/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_5/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/decoder_5/batch_normalization/gamma/values/tag"
  input: "generator/decoder_5/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_5/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/decoder_5/batch_normalization/beta/values/tag"
  input: "generator/decoder_5/batch_normalization/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_4/conv2d_transpose/kernel/values"
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/values"
  op: "HistogramSummary"
  input: "generator/decoder_4/conv2d_transpose/kernel/values/tag"
  input: "generator/decoder_4/conv2d_transpose/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_4/conv2d_transpose/bias/values"
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/values"
  op: "HistogramSummary"
  input: "generator/decoder_4/conv2d_transpose/bias/values/tag"
  input: "generator/decoder_4/conv2d_transpose/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_4/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/decoder_4/batch_normalization/gamma/values/tag"
  input: "generator/decoder_4/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_4/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/decoder_4/batch_normalization/beta/values/tag"
  input: "generator/decoder_4/batch_normalization/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_3/conv2d_transpose/kernel/values"
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/values"
  op: "HistogramSummary"
  input: "generator/decoder_3/conv2d_transpose/kernel/values/tag"
  input: "generator/decoder_3/conv2d_transpose/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_3/conv2d_transpose/bias/values"
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/values"
  op: "HistogramSummary"
  input: "generator/decoder_3/conv2d_transpose/bias/values/tag"
  input: "generator/decoder_3/conv2d_transpose/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_3/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/decoder_3/batch_normalization/gamma/values/tag"
  input: "generator/decoder_3/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_3/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/decoder_3/batch_normalization/beta/values/tag"
  input: "generator/decoder_3/batch_normalization/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_2/conv2d_transpose/kernel/values"
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/values"
  op: "HistogramSummary"
  input: "generator/decoder_2/conv2d_transpose/kernel/values/tag"
  input: "generator/decoder_2/conv2d_transpose/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_2/conv2d_transpose/bias/values"
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/values"
  op: "HistogramSummary"
  input: "generator/decoder_2/conv2d_transpose/bias/values/tag"
  input: "generator/decoder_2/conv2d_transpose/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_2/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "generator/decoder_2/batch_normalization/gamma/values/tag"
  input: "generator/decoder_2/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_2/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "generator/decoder_2/batch_normalization/beta/values/tag"
  input: "generator/decoder_2/batch_normalization/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_1/conv2d_transpose/kernel/values"
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/values"
  op: "HistogramSummary"
  input: "generator/decoder_1/conv2d_transpose/kernel/values/tag"
  input: "generator/decoder_1/conv2d_transpose/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_1/conv2d_transpose/bias/values"
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/values"
  op: "HistogramSummary"
  input: "generator/decoder_1/conv2d_transpose/bias/values/tag"
  input: "generator/decoder_1/conv2d_transpose/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_1/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "discriminator/layer_1/conv2d/kernel/values/tag"
  input: "discriminator/layer_1/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_1/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/values"
  op: "HistogramSummary"
  input: "discriminator/layer_1/conv2d/bias/values/tag"
  input: "discriminator/layer_1/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_2/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "discriminator/layer_2/conv2d/kernel/values/tag"
  input: "discriminator/layer_2/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_2/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/values"
  op: "HistogramSummary"
  input: "discriminator/layer_2/conv2d/bias/values/tag"
  input: "discriminator/layer_2/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_2/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "discriminator/layer_2/batch_normalization/gamma/values/tag"
  input: "discriminator/layer_2/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_2/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "discriminator/layer_2/batch_normalization/beta/values/tag"
  input: "discriminator/layer_2/batch_normalization/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_3/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "discriminator/layer_3/conv2d/kernel/values/tag"
  input: "discriminator/layer_3/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_3/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/values"
  op: "HistogramSummary"
  input: "discriminator/layer_3/conv2d/bias/values/tag"
  input: "discriminator/layer_3/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_3/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "discriminator/layer_3/batch_normalization/gamma/values/tag"
  input: "discriminator/layer_3/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_3/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "discriminator/layer_3/batch_normalization/beta/values/tag"
  input: "discriminator/layer_3/batch_normalization/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_4/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "discriminator/layer_4/conv2d/kernel/values/tag"
  input: "discriminator/layer_4/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_4/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/values"
  op: "HistogramSummary"
  input: "discriminator/layer_4/conv2d/bias/values/tag"
  input: "discriminator/layer_4/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_4/batch_normalization/gamma/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/values"
  op: "HistogramSummary"
  input: "discriminator/layer_4/batch_normalization/gamma/values/tag"
  input: "discriminator/layer_4/batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_4/batch_normalization/beta/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/values"
  op: "HistogramSummary"
  input: "discriminator/layer_4/batch_normalization/beta/values/tag"
  input: "discriminator/layer_4/batch_normalization/beta/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_5/conv2d/kernel/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/values"
  op: "HistogramSummary"
  input: "discriminator/layer_5/conv2d/kernel/values/tag"
  input: "discriminator/layer_5/conv2d/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/values/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_5/conv2d/bias/values"
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/values"
  op: "HistogramSummary"
  input: "discriminator/layer_5/conv2d/bias/values/tag"
  input: "discriminator/layer_5/conv2d/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_1/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_1/conv2d/kernel/gradients/tag"
  input: "discriminator_train/gradients/AddN_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_1/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_1/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_1/conv2d/bias/gradients/tag"
  input: "discriminator_train/gradients/AddN_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_2/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_2/conv2d/kernel/gradients/tag"
  input: "discriminator_train/gradients/AddN_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_2/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_2/conv2d/bias/gradients/tag"
  input: "discriminator_train/gradients/AddN_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_2/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_2/batch_normalization/gamma/gradients/tag"
  input: "discriminator_train/gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_2/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_2/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_2/batch_normalization/beta/gradients/tag"
  input: "discriminator_train/gradients/AddN_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_3/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_3/conv2d/kernel/gradients/tag"
  input: "discriminator_train/gradients/AddN_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_3/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_3/conv2d/bias/gradients/tag"
  input: "discriminator_train/gradients/AddN_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_3/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_3/batch_normalization/gamma/gradients/tag"
  input: "discriminator_train/gradients/AddN_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_3/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_3/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_3/batch_normalization/beta/gradients/tag"
  input: "discriminator_train/gradients/AddN_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_4/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_4/conv2d/kernel/gradients/tag"
  input: "discriminator_train/gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_4/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_4/conv2d/bias/gradients/tag"
  input: "discriminator_train/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_4/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_4/batch_normalization/gamma/gradients/tag"
  input: "discriminator_train/gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_4/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_4/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_4/batch_normalization/beta/gradients/tag"
  input: "discriminator_train/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_5/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_5/conv2d/kernel/gradients/tag"
  input: "discriminator_train/gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "discriminator/layer_5/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "discriminator/layer_5/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "discriminator/layer_5/conv2d/bias/gradients/tag"
  input: "discriminator_train/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_1/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_1/conv2d/kernel/gradients/tag"
  input: "generator_train/gradients/generator/encoder_1/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_1/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_1/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_1/conv2d/bias/gradients/tag"
  input: "generator_train/gradients/generator/encoder_1/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_2/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_2/conv2d/kernel/gradients/tag"
  input: "generator_train/gradients/generator/encoder_2/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_2/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_2/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_2/conv2d/bias/gradients/tag"
  input: "generator_train/gradients/generator/encoder_2/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_2/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_2/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_2/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_2/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_2/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/encoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_3/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_3/conv2d/kernel/gradients/tag"
  input: "generator_train/gradients/generator/encoder_3/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_3/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_3/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_3/conv2d/bias/gradients/tag"
  input: "generator_train/gradients/generator/encoder_3/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_3/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_3/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_3/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_3/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_3/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/encoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_4/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_4/conv2d/kernel/gradients/tag"
  input: "generator_train/gradients/generator/encoder_4/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_4/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_4/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_4/conv2d/bias/gradients/tag"
  input: "generator_train/gradients/generator/encoder_4/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_4/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_4/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_4/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_4/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_4/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/encoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_5/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_5/conv2d/kernel/gradients/tag"
  input: "generator_train/gradients/generator/encoder_5/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_5/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_5/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_5/conv2d/bias/gradients/tag"
  input: "generator_train/gradients/generator/encoder_5/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_5/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_5/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_5/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_5/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_5/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/encoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_6/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_6/conv2d/kernel/gradients/tag"
  input: "generator_train/gradients/generator/encoder_6/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_6/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_6/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_6/conv2d/bias/gradients/tag"
  input: "generator_train/gradients/generator/encoder_6/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_6/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_6/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_6/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_6/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_6/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/encoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_7/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_7/conv2d/kernel/gradients/tag"
  input: "generator_train/gradients/generator/encoder_7/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_7/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_7/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_7/conv2d/bias/gradients/tag"
  input: "generator_train/gradients/generator/encoder_7/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_7/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_7/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_7/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_7/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_7/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/encoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_8/conv2d/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_8/conv2d/kernel/gradients/tag"
  input: "generator_train/gradients/generator/encoder_8/conv2d/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_8/conv2d/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_8/conv2d/bias/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_8/conv2d/bias/gradients/tag"
  input: "generator_train/gradients/generator/encoder_8/conv2d/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_8/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_8/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/encoder_8/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/encoder_8/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/encoder_8/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/encoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_8/conv2d_transpose/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_8/conv2d_transpose/kernel/gradients/tag"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_8/conv2d_transpose/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_8/conv2d_transpose/bias/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_8/conv2d_transpose/bias/gradients/tag"
  input: "generator_train/gradients/generator/decoder_8/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_8/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_8/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_8/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_8/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_8/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/decoder_8/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_7/conv2d_transpose/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_7/conv2d_transpose/kernel/gradients/tag"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_7/conv2d_transpose/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_7/conv2d_transpose/bias/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_7/conv2d_transpose/bias/gradients/tag"
  input: "generator_train/gradients/generator/decoder_7/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_7/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_7/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_7/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_7/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_7/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/decoder_7/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_6/conv2d_transpose/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_6/conv2d_transpose/kernel/gradients/tag"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_6/conv2d_transpose/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_6/conv2d_transpose/bias/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_6/conv2d_transpose/bias/gradients/tag"
  input: "generator_train/gradients/generator/decoder_6/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_6/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_6/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_6/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_6/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_6/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/decoder_6/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_5/conv2d_transpose/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_5/conv2d_transpose/kernel/gradients/tag"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_5/conv2d_transpose/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_5/conv2d_transpose/bias/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_5/conv2d_transpose/bias/gradients/tag"
  input: "generator_train/gradients/generator/decoder_5/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_5/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_5/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_5/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_5/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_5/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/decoder_5/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_4/conv2d_transpose/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_4/conv2d_transpose/kernel/gradients/tag"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_4/conv2d_transpose/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_4/conv2d_transpose/bias/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_4/conv2d_transpose/bias/gradients/tag"
  input: "generator_train/gradients/generator/decoder_4/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_4/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_4/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_4/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_4/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_4/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/decoder_4/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_3/conv2d_transpose/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_3/conv2d_transpose/kernel/gradients/tag"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_3/conv2d_transpose/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_3/conv2d_transpose/bias/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_3/conv2d_transpose/bias/gradients/tag"
  input: "generator_train/gradients/generator/decoder_3/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_3/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_3/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_3/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_3/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_3/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/decoder_3/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_2/conv2d_transpose/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_2/conv2d_transpose/kernel/gradients/tag"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_2/conv2d_transpose/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_2/conv2d_transpose/bias/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_2/conv2d_transpose/bias/gradients/tag"
  input: "generator_train/gradients/generator/decoder_2/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_2/batch_normalization/gamma/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/gamma/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_2/batch_normalization/gamma/gradients/tag"
  input: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_2/batch_normalization/beta/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_2/batch_normalization/beta/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_2/batch_normalization/beta/gradients/tag"
  input: "generator_train/gradients/generator/decoder_2/batch_normalization/FusedBatchNorm_grad/tuple/control_dependency_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_1/conv2d_transpose/kernel/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/kernel/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_1/conv2d_transpose/kernel/gradients/tag"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/conv2d_transpose_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/gradients/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "generator/decoder_1/conv2d_transpose/bias/gradients"
      }
    }
  }
}
node {
  name: "generator/decoder_1/conv2d_transpose/bias/gradients"
  op: "HistogramSummary"
  input: "generator/decoder_1/conv2d_transpose/bias/gradients/tag"
  input: "generator_train/gradients/generator/decoder_1/conv2d_transpose/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "parameter_count/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\002\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod"
  op: "Prod"
  input: "parameter_count/Shape"
  input: "parameter_count/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_1"
  op: "Prod"
  input: "parameter_count/Shape_1"
  input: "parameter_count/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_2"
  op: "Prod"
  input: "parameter_count/Shape_2"
  input: "parameter_count/Const_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_3"
  op: "Prod"
  input: "parameter_count/Shape_3"
  input: "parameter_count/Const_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_4"
  op: "Prod"
  input: "parameter_count/Shape_4"
  input: "parameter_count/Const_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_5"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_5"
  op: "Prod"
  input: "parameter_count/Shape_5"
  input: "parameter_count/Const_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_6"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_6"
  op: "Prod"
  input: "parameter_count/Shape_6"
  input: "parameter_count/Const_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "parameter_count/Const_7"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_7"
  op: "Prod"
  input: "parameter_count/Shape_7"
  input: "parameter_count/Const_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "parameter_count/Const_8"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_8"
  op: "Prod"
  input: "parameter_count/Shape_8"
  input: "parameter_count/Const_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "parameter_count/Const_9"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_9"
  op: "Prod"
  input: "parameter_count/Shape_9"
  input: "parameter_count/Const_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_10"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_10"
  op: "Prod"
  input: "parameter_count/Shape_10"
  input: "parameter_count/Const_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_11"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_11"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_11"
  op: "Prod"
  input: "parameter_count/Shape_11"
  input: "parameter_count/Const_11"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_12"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_12"
  op: "Prod"
  input: "parameter_count/Shape_12"
  input: "parameter_count/Const_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_13"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_13"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_13"
  op: "Prod"
  input: "parameter_count/Shape_13"
  input: "parameter_count/Const_13"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_14"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_14"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_14"
  op: "Prod"
  input: "parameter_count/Shape_14"
  input: "parameter_count/Const_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_15"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_15"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_15"
  op: "Prod"
  input: "parameter_count/Shape_15"
  input: "parameter_count/Const_15"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_16"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_16"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_16"
  op: "Prod"
  input: "parameter_count/Shape_16"
  input: "parameter_count/Const_16"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_17"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_17"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_17"
  op: "Prod"
  input: "parameter_count/Shape_17"
  input: "parameter_count/Const_17"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_18"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_18"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_18"
  op: "Prod"
  input: "parameter_count/Shape_18"
  input: "parameter_count/Const_18"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_19"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_19"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_19"
  op: "Prod"
  input: "parameter_count/Shape_19"
  input: "parameter_count/Const_19"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_20"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_20"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_20"
  op: "Prod"
  input: "parameter_count/Shape_20"
  input: "parameter_count/Const_20"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_21"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_21"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_21"
  op: "Prod"
  input: "parameter_count/Shape_21"
  input: "parameter_count/Const_21"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_22"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_22"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_22"
  op: "Prod"
  input: "parameter_count/Shape_22"
  input: "parameter_count/Const_22"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_23"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_23"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_23"
  op: "Prod"
  input: "parameter_count/Shape_23"
  input: "parameter_count/Const_23"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_24"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_24"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_24"
  op: "Prod"
  input: "parameter_count/Shape_24"
  input: "parameter_count/Const_24"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_25"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_25"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_25"
  op: "Prod"
  input: "parameter_count/Shape_25"
  input: "parameter_count/Const_25"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_26"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_26"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_26"
  op: "Prod"
  input: "parameter_count/Shape_26"
  input: "parameter_count/Const_26"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_27"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_27"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_27"
  op: "Prod"
  input: "parameter_count/Shape_27"
  input: "parameter_count/Const_27"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_28"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_28"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_28"
  op: "Prod"
  input: "parameter_count/Shape_28"
  input: "parameter_count/Const_28"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_29"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_29"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_29"
  op: "Prod"
  input: "parameter_count/Shape_29"
  input: "parameter_count/Const_29"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_30"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_30"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_30"
  op: "Prod"
  input: "parameter_count/Shape_30"
  input: "parameter_count/Const_30"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_31"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_31"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_31"
  op: "Prod"
  input: "parameter_count/Shape_31"
  input: "parameter_count/Const_31"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_32"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_32"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_32"
  op: "Prod"
  input: "parameter_count/Shape_32"
  input: "parameter_count/Const_32"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_33"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_33"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_33"
  op: "Prod"
  input: "parameter_count/Shape_33"
  input: "parameter_count/Const_33"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_34"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_34"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_34"
  op: "Prod"
  input: "parameter_count/Shape_34"
  input: "parameter_count/Const_34"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_35"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_35"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_35"
  op: "Prod"
  input: "parameter_count/Shape_35"
  input: "parameter_count/Const_35"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_36"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_36"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_36"
  op: "Prod"
  input: "parameter_count/Shape_36"
  input: "parameter_count/Const_36"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_37"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_37"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_37"
  op: "Prod"
  input: "parameter_count/Shape_37"
  input: "parameter_count/Const_37"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_38"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_38"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_38"
  op: "Prod"
  input: "parameter_count/Shape_38"
  input: "parameter_count/Const_38"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_39"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_39"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_39"
  op: "Prod"
  input: "parameter_count/Shape_39"
  input: "parameter_count/Const_39"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_40"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_40"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_40"
  op: "Prod"
  input: "parameter_count/Shape_40"
  input: "parameter_count/Const_40"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_41"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_41"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_41"
  op: "Prod"
  input: "parameter_count/Shape_41"
  input: "parameter_count/Const_41"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_42"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_42"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_42"
  op: "Prod"
  input: "parameter_count/Shape_42"
  input: "parameter_count/Const_42"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_43"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_43"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_43"
  op: "Prod"
  input: "parameter_count/Shape_43"
  input: "parameter_count/Const_43"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_44"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_44"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_44"
  op: "Prod"
  input: "parameter_count/Shape_44"
  input: "parameter_count/Const_44"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_45"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_45"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_45"
  op: "Prod"
  input: "parameter_count/Shape_45"
  input: "parameter_count/Const_45"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_46"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_46"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_46"
  op: "Prod"
  input: "parameter_count/Shape_46"
  input: "parameter_count/Const_46"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_47"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "parameter_count/Const_47"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_47"
  op: "Prod"
  input: "parameter_count/Shape_47"
  input: "parameter_count/Const_47"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_48"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "parameter_count/Const_48"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_48"
  op: "Prod"
  input: "parameter_count/Shape_48"
  input: "parameter_count/Const_48"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_49"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "parameter_count/Const_49"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_49"
  op: "Prod"
  input: "parameter_count/Shape_49"
  input: "parameter_count/Const_49"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_50"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_50"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_50"
  op: "Prod"
  input: "parameter_count/Shape_50"
  input: "parameter_count/Const_50"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_51"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_51"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_51"
  op: "Prod"
  input: "parameter_count/Shape_51"
  input: "parameter_count/Const_51"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_52"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_52"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_52"
  op: "Prod"
  input: "parameter_count/Shape_52"
  input: "parameter_count/Const_52"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_53"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_53"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_53"
  op: "Prod"
  input: "parameter_count/Shape_53"
  input: "parameter_count/Const_53"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_54"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_54"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_54"
  op: "Prod"
  input: "parameter_count/Shape_54"
  input: "parameter_count/Const_54"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_55"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_55"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_55"
  op: "Prod"
  input: "parameter_count/Shape_55"
  input: "parameter_count/Const_55"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_56"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_56"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_56"
  op: "Prod"
  input: "parameter_count/Shape_56"
  input: "parameter_count/Const_56"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_57"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_57"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_57"
  op: "Prod"
  input: "parameter_count/Shape_57"
  input: "parameter_count/Const_57"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_58"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\001\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_58"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_58"
  op: "Prod"
  input: "parameter_count/Shape_58"
  input: "parameter_count/Const_58"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_59"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "parameter_count/Const_59"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_59"
  op: "Prod"
  input: "parameter_count/Shape_59"
  input: "parameter_count/Const_59"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_60"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_60"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_60"
  op: "Prod"
  input: "parameter_count/Shape_60"
  input: "parameter_count/Const_60"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_61"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "parameter_count/Const_61"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_61"
  op: "Prod"
  input: "parameter_count/Shape_61"
  input: "parameter_count/Const_61"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_62"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_62"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_62"
  op: "Prod"
  input: "parameter_count/Shape_62"
  input: "parameter_count/Const_62"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_63"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_63"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_63"
  op: "Prod"
  input: "parameter_count/Shape_63"
  input: "parameter_count/Const_63"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_64"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_64"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_64"
  op: "Prod"
  input: "parameter_count/Shape_64"
  input: "parameter_count/Const_64"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_65"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "parameter_count/Const_65"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_65"
  op: "Prod"
  input: "parameter_count/Shape_65"
  input: "parameter_count/Const_65"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_66"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_66"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_66"
  op: "Prod"
  input: "parameter_count/Shape_66"
  input: "parameter_count/Const_66"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_67"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "parameter_count/Const_67"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_67"
  op: "Prod"
  input: "parameter_count/Shape_67"
  input: "parameter_count/Const_67"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_68"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "parameter_count/Const_68"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_68"
  op: "Prod"
  input: "parameter_count/Shape_68"
  input: "parameter_count/Const_68"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_69"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "parameter_count/Const_69"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_69"
  op: "Prod"
  input: "parameter_count/Shape_69"
  input: "parameter_count/Const_69"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_70"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_70"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_70"
  op: "Prod"
  input: "parameter_count/Shape_70"
  input: "parameter_count/Const_70"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_71"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_71"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_71"
  op: "Prod"
  input: "parameter_count/Shape_71"
  input: "parameter_count/Const_71"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_72"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_72"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_72"
  op: "Prod"
  input: "parameter_count/Shape_72"
  input: "parameter_count/Const_72"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_73"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "parameter_count/Const_73"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_73"
  op: "Prod"
  input: "parameter_count/Shape_73"
  input: "parameter_count/Const_73"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_74"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\004\000\000\000\004\000\000\000\000\002\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "parameter_count/Const_74"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_74"
  op: "Prod"
  input: "parameter_count/Shape_74"
  input: "parameter_count/Const_74"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Shape_75"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "parameter_count/Const_75"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/Prod_75"
  op: "Prod"
  input: "parameter_count/Shape_75"
  input: "parameter_count/Const_75"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "parameter_count/Rank/packed"
  op: "Pack"
  input: "parameter_count/Prod"
  input: "parameter_count/Prod_1"
  input: "parameter_count/Prod_2"
  input: "parameter_count/Prod_3"
  input: "parameter_count/Prod_4"
  input: "parameter_count/Prod_5"
  input: "parameter_count/Prod_6"
  input: "parameter_count/Prod_7"
  input: "parameter_count/Prod_8"
  input: "parameter_count/Prod_9"
  input: "parameter_count/Prod_10"
  input: "parameter_count/Prod_11"
  input: "parameter_count/Prod_12"
  input: "parameter_count/Prod_13"
  input: "parameter_count/Prod_14"
  input: "parameter_count/Prod_15"
  input: "parameter_count/Prod_16"
  input: "parameter_count/Prod_17"
  input: "parameter_count/Prod_18"
  input: "parameter_count/Prod_19"
  input: "parameter_count/Prod_20"
  input: "parameter_count/Prod_21"
  input: "parameter_count/Prod_22"
  input: "parameter_count/Prod_23"
  input: "parameter_count/Prod_24"
  input: "parameter_count/Prod_25"
  input: "parameter_count/Prod_26"
  input: "parameter_count/Prod_27"
  input: "parameter_count/Prod_28"
  input: "parameter_count/Prod_29"
  input: "parameter_count/Prod_30"
  input: "parameter_count/Prod_31"
  input: "parameter_count/Prod_32"
  input: "parameter_count/Prod_33"
  input: "parameter_count/Prod_34"
  input: "parameter_count/Prod_35"
  input: "parameter_count/Prod_36"
  input: "parameter_count/Prod_37"
  input: "parameter_count/Prod_38"
  input: "parameter_count/Prod_39"
  input: "parameter_count/Prod_40"
  input: "parameter_count/Prod_41"
  input: "parameter_count/Prod_42"
  input: "parameter_count/Prod_43"
  input: "parameter_count/Prod_44"
  input: "parameter_count/Prod_45"
  input: "parameter_count/Prod_46"
  input: "parameter_count/Prod_47"
  input: "parameter_count/Prod_48"
  input: "parameter_count/Prod_49"
  input: "parameter_count/Prod_50"
  input: "parameter_count/Prod_51"
  input: "parameter_count/Prod_52"
  input: "parameter_count/Prod_53"
  input: "parameter_count/Prod_54"
  input: "parameter_count/Prod_55"
  input: "parameter_count/Prod_56"
  input: "parameter_count/Prod_57"
  input: "parameter_count/Prod_58"
  input: "parameter_count/Prod_59"
  input: "parameter_count/Prod_60"
  input: "parameter_count/Prod_61"
  input: "parameter_count/Prod_62"
  input: "parameter_count/Prod_63"
  input: "parameter_count/Prod_64"
  input: "parameter_count/Prod_65"
  input: "parameter_count/Prod_66"
  input: "parameter_count/Prod_67"
  input: "parameter_count/Prod_68"
  input: "parameter_count/Prod_69"
  input: "parameter_count/Prod_70"
  input: "parameter_count/Prod_71"
  input: "parameter_count/Prod_72"
  input: "parameter_count/Prod_73"
  input: "parameter_count/Prod_74"
  input: "parameter_count/Prod_75"
  attr {
    key: "N"
    value {
      i: 76
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 76
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "parameter_count/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "parameter_count/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "parameter_count/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "parameter_count/range"
  op: "Range"
  input: "parameter_count/range/start"
  input: "parameter_count/Rank"
  input: "parameter_count/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "parameter_count/Sum/input"
  op: "Pack"
  input: "parameter_count/Prod"
  input: "parameter_count/Prod_1"
  input: "parameter_count/Prod_2"
  input: "parameter_count/Prod_3"
  input: "parameter_count/Prod_4"
  input: "parameter_count/Prod_5"
  input: "parameter_count/Prod_6"
  input: "parameter_count/Prod_7"
  input: "parameter_count/Prod_8"
  input: "parameter_count/Prod_9"
  input: "parameter_count/Prod_10"
  input: "parameter_count/Prod_11"
  input: "parameter_count/Prod_12"
  input: "parameter_count/Prod_13"
  input: "parameter_count/Prod_14"
  input: "parameter_count/Prod_15"
  input: "parameter_count/Prod_16"
  input: "parameter_count/Prod_17"
  input: "parameter_count/Prod_18"
  input: "parameter_count/Prod_19"
  input: "parameter_count/Prod_20"
  input: "parameter_count/Prod_21"
  input: "parameter_count/Prod_22"
  input: "parameter_count/Prod_23"
  input: "parameter_count/Prod_24"
  input: "parameter_count/Prod_25"
  input: "parameter_count/Prod_26"
  input: "parameter_count/Prod_27"
  input: "parameter_count/Prod_28"
  input: "parameter_count/Prod_29"
  input: "parameter_count/Prod_30"
  input: "parameter_count/Prod_31"
  input: "parameter_count/Prod_32"
  input: "parameter_count/Prod_33"
  input: "parameter_count/Prod_34"
  input: "parameter_count/Prod_35"
  input: "parameter_count/Prod_36"
  input: "parameter_count/Prod_37"
  input: "parameter_count/Prod_38"
  input: "parameter_count/Prod_39"
  input: "parameter_count/Prod_40"
  input: "parameter_count/Prod_41"
  input: "parameter_count/Prod_42"
  input: "parameter_count/Prod_43"
  input: "parameter_count/Prod_44"
  input: "parameter_count/Prod_45"
  input: "parameter_count/Prod_46"
  input: "parameter_count/Prod_47"
  input: "parameter_count/Prod_48"
  input: "parameter_count/Prod_49"
  input: "parameter_count/Prod_50"
  input: "parameter_count/Prod_51"
  input: "parameter_count/Prod_52"
  input: "parameter_count/Prod_53"
  input: "parameter_count/Prod_54"
  input: "parameter_count/Prod_55"
  input: "parameter_count/Prod_56"
  input: "parameter_count/Prod_57"
  input: "parameter_count/Prod_58"
  input: "parameter_count/Prod_59"
  input: "parameter_count/Prod_60"
  input: "parameter_count/Prod_61"
  input: "parameter_count/Prod_62"
  input: "parameter_count/Prod_63"
  input: "parameter_count/Prod_64"
  input: "parameter_count/Prod_65"
  input: "parameter_count/Prod_66"
  input: "parameter_count/Prod_67"
  input: "parameter_count/Prod_68"
  input: "parameter_count/Prod_69"
  input: "parameter_count/Prod_70"
  input: "parameter_count/Prod_71"
  input: "parameter_count/Prod_72"
  input: "parameter_count/Prod_73"
  input: "parameter_count/Prod_74"
  input: "parameter_count/Prod_75"
  attr {
    key: "N"
    value {
      i: 76
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 76
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "parameter_count/Sum"
  op: "Sum"
  input: "parameter_count/Sum/input"
  input: "parameter_count/range"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 270
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 270
          }
        }
        string_val: "discriminator/layer_1/conv2d/bias"
        string_val: "discriminator/layer_1/conv2d/bias/Adam"
        string_val: "discriminator/layer_1/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_1/conv2d/kernel"
        string_val: "discriminator/layer_1/conv2d/kernel/Adam"
        string_val: "discriminator/layer_1/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_2/batch_normalization/beta"
        string_val: "discriminator/layer_2/batch_normalization/beta/Adam"
        string_val: "discriminator/layer_2/batch_normalization/beta/Adam_1"
        string_val: "discriminator/layer_2/batch_normalization/gamma"
        string_val: "discriminator/layer_2/batch_normalization/gamma/Adam"
        string_val: "discriminator/layer_2/batch_normalization/gamma/Adam_1"
        string_val: "discriminator/layer_2/batch_normalization/moving_mean"
        string_val: "discriminator/layer_2/batch_normalization/moving_variance"
        string_val: "discriminator/layer_2/conv2d/bias"
        string_val: "discriminator/layer_2/conv2d/bias/Adam"
        string_val: "discriminator/layer_2/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_2/conv2d/kernel"
        string_val: "discriminator/layer_2/conv2d/kernel/Adam"
        string_val: "discriminator/layer_2/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_3/batch_normalization/beta"
        string_val: "discriminator/layer_3/batch_normalization/beta/Adam"
        string_val: "discriminator/layer_3/batch_normalization/beta/Adam_1"
        string_val: "discriminator/layer_3/batch_normalization/gamma"
        string_val: "discriminator/layer_3/batch_normalization/gamma/Adam"
        string_val: "discriminator/layer_3/batch_normalization/gamma/Adam_1"
        string_val: "discriminator/layer_3/batch_normalization/moving_mean"
        string_val: "discriminator/layer_3/batch_normalization/moving_variance"
        string_val: "discriminator/layer_3/conv2d/bias"
        string_val: "discriminator/layer_3/conv2d/bias/Adam"
        string_val: "discriminator/layer_3/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_3/conv2d/kernel"
        string_val: "discriminator/layer_3/conv2d/kernel/Adam"
        string_val: "discriminator/layer_3/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_4/batch_normalization/beta"
        string_val: "discriminator/layer_4/batch_normalization/beta/Adam"
        string_val: "discriminator/layer_4/batch_normalization/beta/Adam_1"
        string_val: "discriminator/layer_4/batch_normalization/gamma"
        string_val: "discriminator/layer_4/batch_normalization/gamma/Adam"
        string_val: "discriminator/layer_4/batch_normalization/gamma/Adam_1"
        string_val: "discriminator/layer_4/batch_normalization/moving_mean"
        string_val: "discriminator/layer_4/batch_normalization/moving_variance"
        string_val: "discriminator/layer_4/conv2d/bias"
        string_val: "discriminator/layer_4/conv2d/bias/Adam"
        string_val: "discriminator/layer_4/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_4/conv2d/kernel"
        string_val: "discriminator/layer_4/conv2d/kernel/Adam"
        string_val: "discriminator/layer_4/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_5/conv2d/bias"
        string_val: "discriminator/layer_5/conv2d/bias/Adam"
        string_val: "discriminator/layer_5/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_5/conv2d/kernel"
        string_val: "discriminator/layer_5/conv2d/kernel/Adam"
        string_val: "discriminator/layer_5/conv2d/kernel/Adam_1"
        string_val: "discriminator_loss/Mean/ExponentialMovingAverage"
        string_val: "discriminator_train/beta1_power"
        string_val: "discriminator_train/beta2_power"
        string_val: "generator/decoder_1/conv2d_transpose/bias"
        string_val: "generator/decoder_1/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_1/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_1/conv2d_transpose/kernel"
        string_val: "generator/decoder_1/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_1/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_2/batch_normalization/beta"
        string_val: "generator/decoder_2/batch_normalization/beta/Adam"
        string_val: "generator/decoder_2/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_2/batch_normalization/gamma"
        string_val: "generator/decoder_2/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_2/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_2/batch_normalization/moving_mean"
        string_val: "generator/decoder_2/batch_normalization/moving_variance"
        string_val: "generator/decoder_2/conv2d_transpose/bias"
        string_val: "generator/decoder_2/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_2/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_2/conv2d_transpose/kernel"
        string_val: "generator/decoder_2/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_2/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_3/batch_normalization/beta"
        string_val: "generator/decoder_3/batch_normalization/beta/Adam"
        string_val: "generator/decoder_3/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_3/batch_normalization/gamma"
        string_val: "generator/decoder_3/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_3/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_3/batch_normalization/moving_mean"
        string_val: "generator/decoder_3/batch_normalization/moving_variance"
        string_val: "generator/decoder_3/conv2d_transpose/bias"
        string_val: "generator/decoder_3/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_3/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_3/conv2d_transpose/kernel"
        string_val: "generator/decoder_3/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_3/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_4/batch_normalization/beta"
        string_val: "generator/decoder_4/batch_normalization/beta/Adam"
        string_val: "generator/decoder_4/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_4/batch_normalization/gamma"
        string_val: "generator/decoder_4/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_4/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_4/batch_normalization/moving_mean"
        string_val: "generator/decoder_4/batch_normalization/moving_variance"
        string_val: "generator/decoder_4/conv2d_transpose/bias"
        string_val: "generator/decoder_4/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_4/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_4/conv2d_transpose/kernel"
        string_val: "generator/decoder_4/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_4/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_5/batch_normalization/beta"
        string_val: "generator/decoder_5/batch_normalization/beta/Adam"
        string_val: "generator/decoder_5/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_5/batch_normalization/gamma"
        string_val: "generator/decoder_5/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_5/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_5/batch_normalization/moving_mean"
        string_val: "generator/decoder_5/batch_normalization/moving_variance"
        string_val: "generator/decoder_5/conv2d_transpose/bias"
        string_val: "generator/decoder_5/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_5/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_5/conv2d_transpose/kernel"
        string_val: "generator/decoder_5/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_5/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_6/batch_normalization/beta"
        string_val: "generator/decoder_6/batch_normalization/beta/Adam"
        string_val: "generator/decoder_6/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_6/batch_normalization/gamma"
        string_val: "generator/decoder_6/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_6/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_6/batch_normalization/moving_mean"
        string_val: "generator/decoder_6/batch_normalization/moving_variance"
        string_val: "generator/decoder_6/conv2d_transpose/bias"
        string_val: "generator/decoder_6/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_6/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_6/conv2d_transpose/kernel"
        string_val: "generator/decoder_6/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_6/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_7/batch_normalization/beta"
        string_val: "generator/decoder_7/batch_normalization/beta/Adam"
        string_val: "generator/decoder_7/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_7/batch_normalization/gamma"
        string_val: "generator/decoder_7/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_7/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_7/batch_normalization/moving_mean"
        string_val: "generator/decoder_7/batch_normalization/moving_variance"
        string_val: "generator/decoder_7/conv2d_transpose/bias"
        string_val: "generator/decoder_7/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_7/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_7/conv2d_transpose/kernel"
        string_val: "generator/decoder_7/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_7/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_8/batch_normalization/beta"
        string_val: "generator/decoder_8/batch_normalization/beta/Adam"
        string_val: "generator/decoder_8/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_8/batch_normalization/gamma"
        string_val: "generator/decoder_8/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_8/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_8/batch_normalization/moving_mean"
        string_val: "generator/decoder_8/batch_normalization/moving_variance"
        string_val: "generator/decoder_8/conv2d_transpose/bias"
        string_val: "generator/decoder_8/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_8/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_8/conv2d_transpose/kernel"
        string_val: "generator/decoder_8/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_8/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/encoder_1/conv2d/bias"
        string_val: "generator/encoder_1/conv2d/bias/Adam"
        string_val: "generator/encoder_1/conv2d/bias/Adam_1"
        string_val: "generator/encoder_1/conv2d/kernel"
        string_val: "generator/encoder_1/conv2d/kernel/Adam"
        string_val: "generator/encoder_1/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_2/batch_normalization/beta"
        string_val: "generator/encoder_2/batch_normalization/beta/Adam"
        string_val: "generator/encoder_2/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_2/batch_normalization/gamma"
        string_val: "generator/encoder_2/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_2/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_2/batch_normalization/moving_mean"
        string_val: "generator/encoder_2/batch_normalization/moving_variance"
        string_val: "generator/encoder_2/conv2d/bias"
        string_val: "generator/encoder_2/conv2d/bias/Adam"
        string_val: "generator/encoder_2/conv2d/bias/Adam_1"
        string_val: "generator/encoder_2/conv2d/kernel"
        string_val: "generator/encoder_2/conv2d/kernel/Adam"
        string_val: "generator/encoder_2/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_3/batch_normalization/beta"
        string_val: "generator/encoder_3/batch_normalization/beta/Adam"
        string_val: "generator/encoder_3/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_3/batch_normalization/gamma"
        string_val: "generator/encoder_3/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_3/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_3/batch_normalization/moving_mean"
        string_val: "generator/encoder_3/batch_normalization/moving_variance"
        string_val: "generator/encoder_3/conv2d/bias"
        string_val: "generator/encoder_3/conv2d/bias/Adam"
        string_val: "generator/encoder_3/conv2d/bias/Adam_1"
        string_val: "generator/encoder_3/conv2d/kernel"
        string_val: "generator/encoder_3/conv2d/kernel/Adam"
        string_val: "generator/encoder_3/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_4/batch_normalization/beta"
        string_val: "generator/encoder_4/batch_normalization/beta/Adam"
        string_val: "generator/encoder_4/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_4/batch_normalization/gamma"
        string_val: "generator/encoder_4/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_4/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_4/batch_normalization/moving_mean"
        string_val: "generator/encoder_4/batch_normalization/moving_variance"
        string_val: "generator/encoder_4/conv2d/bias"
        string_val: "generator/encoder_4/conv2d/bias/Adam"
        string_val: "generator/encoder_4/conv2d/bias/Adam_1"
        string_val: "generator/encoder_4/conv2d/kernel"
        string_val: "generator/encoder_4/conv2d/kernel/Adam"
        string_val: "generator/encoder_4/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_5/batch_normalization/beta"
        string_val: "generator/encoder_5/batch_normalization/beta/Adam"
        string_val: "generator/encoder_5/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_5/batch_normalization/gamma"
        string_val: "generator/encoder_5/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_5/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_5/batch_normalization/moving_mean"
        string_val: "generator/encoder_5/batch_normalization/moving_variance"
        string_val: "generator/encoder_5/conv2d/bias"
        string_val: "generator/encoder_5/conv2d/bias/Adam"
        string_val: "generator/encoder_5/conv2d/bias/Adam_1"
        string_val: "generator/encoder_5/conv2d/kernel"
        string_val: "generator/encoder_5/conv2d/kernel/Adam"
        string_val: "generator/encoder_5/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_6/batch_normalization/beta"
        string_val: "generator/encoder_6/batch_normalization/beta/Adam"
        string_val: "generator/encoder_6/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_6/batch_normalization/gamma"
        string_val: "generator/encoder_6/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_6/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_6/batch_normalization/moving_mean"
        string_val: "generator/encoder_6/batch_normalization/moving_variance"
        string_val: "generator/encoder_6/conv2d/bias"
        string_val: "generator/encoder_6/conv2d/bias/Adam"
        string_val: "generator/encoder_6/conv2d/bias/Adam_1"
        string_val: "generator/encoder_6/conv2d/kernel"
        string_val: "generator/encoder_6/conv2d/kernel/Adam"
        string_val: "generator/encoder_6/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_7/batch_normalization/beta"
        string_val: "generator/encoder_7/batch_normalization/beta/Adam"
        string_val: "generator/encoder_7/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_7/batch_normalization/gamma"
        string_val: "generator/encoder_7/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_7/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_7/batch_normalization/moving_mean"
        string_val: "generator/encoder_7/batch_normalization/moving_variance"
        string_val: "generator/encoder_7/conv2d/bias"
        string_val: "generator/encoder_7/conv2d/bias/Adam"
        string_val: "generator/encoder_7/conv2d/bias/Adam_1"
        string_val: "generator/encoder_7/conv2d/kernel"
        string_val: "generator/encoder_7/conv2d/kernel/Adam"
        string_val: "generator/encoder_7/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_8/batch_normalization/beta"
        string_val: "generator/encoder_8/batch_normalization/beta/Adam"
        string_val: "generator/encoder_8/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_8/batch_normalization/gamma"
        string_val: "generator/encoder_8/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_8/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_8/batch_normalization/moving_mean"
        string_val: "generator/encoder_8/batch_normalization/moving_variance"
        string_val: "generator/encoder_8/conv2d/bias"
        string_val: "generator/encoder_8/conv2d/bias/Adam"
        string_val: "generator/encoder_8/conv2d/bias/Adam_1"
        string_val: "generator/encoder_8/conv2d/kernel"
        string_val: "generator/encoder_8/conv2d/kernel/Adam"
        string_val: "generator/encoder_8/conv2d/kernel/Adam_1"
        string_val: "generator_loss/Mean/ExponentialMovingAverage"
        string_val: "generator_loss/Mean_1/ExponentialMovingAverage"
        string_val: "generator_train/beta1_power"
        string_val: "generator_train/beta2_power"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 270
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 270
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "discriminator/layer_1/conv2d/bias"
  input: "discriminator/layer_1/conv2d/bias/Adam"
  input: "discriminator/layer_1/conv2d/bias/Adam_1"
  input: "discriminator/layer_1/conv2d/kernel"
  input: "discriminator/layer_1/conv2d/kernel/Adam"
  input: "discriminator/layer_1/conv2d/kernel/Adam_1"
  input: "discriminator/layer_2/batch_normalization/beta"
  input: "discriminator/layer_2/batch_normalization/beta/Adam"
  input: "discriminator/layer_2/batch_normalization/beta/Adam_1"
  input: "discriminator/layer_2/batch_normalization/gamma"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam_1"
  input: "discriminator/layer_2/batch_normalization/moving_mean"
  input: "discriminator/layer_2/batch_normalization/moving_variance"
  input: "discriminator/layer_2/conv2d/bias"
  input: "discriminator/layer_2/conv2d/bias/Adam"
  input: "discriminator/layer_2/conv2d/bias/Adam_1"
  input: "discriminator/layer_2/conv2d/kernel"
  input: "discriminator/layer_2/conv2d/kernel/Adam"
  input: "discriminator/layer_2/conv2d/kernel/Adam_1"
  input: "discriminator/layer_3/batch_normalization/beta"
  input: "discriminator/layer_3/batch_normalization/beta/Adam"
  input: "discriminator/layer_3/batch_normalization/beta/Adam_1"
  input: "discriminator/layer_3/batch_normalization/gamma"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam_1"
  input: "discriminator/layer_3/batch_normalization/moving_mean"
  input: "discriminator/layer_3/batch_normalization/moving_variance"
  input: "discriminator/layer_3/conv2d/bias"
  input: "discriminator/layer_3/conv2d/bias/Adam"
  input: "discriminator/layer_3/conv2d/bias/Adam_1"
  input: "discriminator/layer_3/conv2d/kernel"
  input: "discriminator/layer_3/conv2d/kernel/Adam"
  input: "discriminator/layer_3/conv2d/kernel/Adam_1"
  input: "discriminator/layer_4/batch_normalization/beta"
  input: "discriminator/layer_4/batch_normalization/beta/Adam"
  input: "discriminator/layer_4/batch_normalization/beta/Adam_1"
  input: "discriminator/layer_4/batch_normalization/gamma"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam_1"
  input: "discriminator/layer_4/batch_normalization/moving_mean"
  input: "discriminator/layer_4/batch_normalization/moving_variance"
  input: "discriminator/layer_4/conv2d/bias"
  input: "discriminator/layer_4/conv2d/bias/Adam"
  input: "discriminator/layer_4/conv2d/bias/Adam_1"
  input: "discriminator/layer_4/conv2d/kernel"
  input: "discriminator/layer_4/conv2d/kernel/Adam"
  input: "discriminator/layer_4/conv2d/kernel/Adam_1"
  input: "discriminator/layer_5/conv2d/bias"
  input: "discriminator/layer_5/conv2d/bias/Adam"
  input: "discriminator/layer_5/conv2d/bias/Adam_1"
  input: "discriminator/layer_5/conv2d/kernel"
  input: "discriminator/layer_5/conv2d/kernel/Adam"
  input: "discriminator/layer_5/conv2d/kernel/Adam_1"
  input: "discriminator_loss/Mean/ExponentialMovingAverage"
  input: "discriminator_train/beta1_power"
  input: "discriminator_train/beta2_power"
  input: "generator/decoder_1/conv2d_transpose/bias"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_1/conv2d_transpose/kernel"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_2/batch_normalization/beta"
  input: "generator/decoder_2/batch_normalization/beta/Adam"
  input: "generator/decoder_2/batch_normalization/beta/Adam_1"
  input: "generator/decoder_2/batch_normalization/gamma"
  input: "generator/decoder_2/batch_normalization/gamma/Adam"
  input: "generator/decoder_2/batch_normalization/gamma/Adam_1"
  input: "generator/decoder_2/batch_normalization/moving_mean"
  input: "generator/decoder_2/batch_normalization/moving_variance"
  input: "generator/decoder_2/conv2d_transpose/bias"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_2/conv2d_transpose/kernel"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_3/batch_normalization/beta"
  input: "generator/decoder_3/batch_normalization/beta/Adam"
  input: "generator/decoder_3/batch_normalization/beta/Adam_1"
  input: "generator/decoder_3/batch_normalization/gamma"
  input: "generator/decoder_3/batch_normalization/gamma/Adam"
  input: "generator/decoder_3/batch_normalization/gamma/Adam_1"
  input: "generator/decoder_3/batch_normalization/moving_mean"
  input: "generator/decoder_3/batch_normalization/moving_variance"
  input: "generator/decoder_3/conv2d_transpose/bias"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_3/conv2d_transpose/kernel"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_4/batch_normalization/beta"
  input: "generator/decoder_4/batch_normalization/beta/Adam"
  input: "generator/decoder_4/batch_normalization/beta/Adam_1"
  input: "generator/decoder_4/batch_normalization/gamma"
  input: "generator/decoder_4/batch_normalization/gamma/Adam"
  input: "generator/decoder_4/batch_normalization/gamma/Adam_1"
  input: "generator/decoder_4/batch_normalization/moving_mean"
  input: "generator/decoder_4/batch_normalization/moving_variance"
  input: "generator/decoder_4/conv2d_transpose/bias"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_4/conv2d_transpose/kernel"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_5/batch_normalization/beta"
  input: "generator/decoder_5/batch_normalization/beta/Adam"
  input: "generator/decoder_5/batch_normalization/beta/Adam_1"
  input: "generator/decoder_5/batch_normalization/gamma"
  input: "generator/decoder_5/batch_normalization/gamma/Adam"
  input: "generator/decoder_5/batch_normalization/gamma/Adam_1"
  input: "generator/decoder_5/batch_normalization/moving_mean"
  input: "generator/decoder_5/batch_normalization/moving_variance"
  input: "generator/decoder_5/conv2d_transpose/bias"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_5/conv2d_transpose/kernel"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_6/batch_normalization/beta"
  input: "generator/decoder_6/batch_normalization/beta/Adam"
  input: "generator/decoder_6/batch_normalization/beta/Adam_1"
  input: "generator/decoder_6/batch_normalization/gamma"
  input: "generator/decoder_6/batch_normalization/gamma/Adam"
  input: "generator/decoder_6/batch_normalization/gamma/Adam_1"
  input: "generator/decoder_6/batch_normalization/moving_mean"
  input: "generator/decoder_6/batch_normalization/moving_variance"
  input: "generator/decoder_6/conv2d_transpose/bias"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_6/conv2d_transpose/kernel"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_7/batch_normalization/beta"
  input: "generator/decoder_7/batch_normalization/beta/Adam"
  input: "generator/decoder_7/batch_normalization/beta/Adam_1"
  input: "generator/decoder_7/batch_normalization/gamma"
  input: "generator/decoder_7/batch_normalization/gamma/Adam"
  input: "generator/decoder_7/batch_normalization/gamma/Adam_1"
  input: "generator/decoder_7/batch_normalization/moving_mean"
  input: "generator/decoder_7/batch_normalization/moving_variance"
  input: "generator/decoder_7/conv2d_transpose/bias"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_7/conv2d_transpose/kernel"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam_1"
  input: "generator/decoder_8/batch_normalization/beta"
  input: "generator/decoder_8/batch_normalization/beta/Adam"
  input: "generator/decoder_8/batch_normalization/beta/Adam_1"
  input: "generator/decoder_8/batch_normalization/gamma"
  input: "generator/decoder_8/batch_normalization/gamma/Adam"
  input: "generator/decoder_8/batch_normalization/gamma/Adam_1"
  input: "generator/decoder_8/batch_normalization/moving_mean"
  input: "generator/decoder_8/batch_normalization/moving_variance"
  input: "generator/decoder_8/conv2d_transpose/bias"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam_1"
  input: "generator/decoder_8/conv2d_transpose/kernel"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam_1"
  input: "generator/encoder_1/conv2d/bias"
  input: "generator/encoder_1/conv2d/bias/Adam"
  input: "generator/encoder_1/conv2d/bias/Adam_1"
  input: "generator/encoder_1/conv2d/kernel"
  input: "generator/encoder_1/conv2d/kernel/Adam"
  input: "generator/encoder_1/conv2d/kernel/Adam_1"
  input: "generator/encoder_2/batch_normalization/beta"
  input: "generator/encoder_2/batch_normalization/beta/Adam"
  input: "generator/encoder_2/batch_normalization/beta/Adam_1"
  input: "generator/encoder_2/batch_normalization/gamma"
  input: "generator/encoder_2/batch_normalization/gamma/Adam"
  input: "generator/encoder_2/batch_normalization/gamma/Adam_1"
  input: "generator/encoder_2/batch_normalization/moving_mean"
  input: "generator/encoder_2/batch_normalization/moving_variance"
  input: "generator/encoder_2/conv2d/bias"
  input: "generator/encoder_2/conv2d/bias/Adam"
  input: "generator/encoder_2/conv2d/bias/Adam_1"
  input: "generator/encoder_2/conv2d/kernel"
  input: "generator/encoder_2/conv2d/kernel/Adam"
  input: "generator/encoder_2/conv2d/kernel/Adam_1"
  input: "generator/encoder_3/batch_normalization/beta"
  input: "generator/encoder_3/batch_normalization/beta/Adam"
  input: "generator/encoder_3/batch_normalization/beta/Adam_1"
  input: "generator/encoder_3/batch_normalization/gamma"
  input: "generator/encoder_3/batch_normalization/gamma/Adam"
  input: "generator/encoder_3/batch_normalization/gamma/Adam_1"
  input: "generator/encoder_3/batch_normalization/moving_mean"
  input: "generator/encoder_3/batch_normalization/moving_variance"
  input: "generator/encoder_3/conv2d/bias"
  input: "generator/encoder_3/conv2d/bias/Adam"
  input: "generator/encoder_3/conv2d/bias/Adam_1"
  input: "generator/encoder_3/conv2d/kernel"
  input: "generator/encoder_3/conv2d/kernel/Adam"
  input: "generator/encoder_3/conv2d/kernel/Adam_1"
  input: "generator/encoder_4/batch_normalization/beta"
  input: "generator/encoder_4/batch_normalization/beta/Adam"
  input: "generator/encoder_4/batch_normalization/beta/Adam_1"
  input: "generator/encoder_4/batch_normalization/gamma"
  input: "generator/encoder_4/batch_normalization/gamma/Adam"
  input: "generator/encoder_4/batch_normalization/gamma/Adam_1"
  input: "generator/encoder_4/batch_normalization/moving_mean"
  input: "generator/encoder_4/batch_normalization/moving_variance"
  input: "generator/encoder_4/conv2d/bias"
  input: "generator/encoder_4/conv2d/bias/Adam"
  input: "generator/encoder_4/conv2d/bias/Adam_1"
  input: "generator/encoder_4/conv2d/kernel"
  input: "generator/encoder_4/conv2d/kernel/Adam"
  input: "generator/encoder_4/conv2d/kernel/Adam_1"
  input: "generator/encoder_5/batch_normalization/beta"
  input: "generator/encoder_5/batch_normalization/beta/Adam"
  input: "generator/encoder_5/batch_normalization/beta/Adam_1"
  input: "generator/encoder_5/batch_normalization/gamma"
  input: "generator/encoder_5/batch_normalization/gamma/Adam"
  input: "generator/encoder_5/batch_normalization/gamma/Adam_1"
  input: "generator/encoder_5/batch_normalization/moving_mean"
  input: "generator/encoder_5/batch_normalization/moving_variance"
  input: "generator/encoder_5/conv2d/bias"
  input: "generator/encoder_5/conv2d/bias/Adam"
  input: "generator/encoder_5/conv2d/bias/Adam_1"
  input: "generator/encoder_5/conv2d/kernel"
  input: "generator/encoder_5/conv2d/kernel/Adam"
  input: "generator/encoder_5/conv2d/kernel/Adam_1"
  input: "generator/encoder_6/batch_normalization/beta"
  input: "generator/encoder_6/batch_normalization/beta/Adam"
  input: "generator/encoder_6/batch_normalization/beta/Adam_1"
  input: "generator/encoder_6/batch_normalization/gamma"
  input: "generator/encoder_6/batch_normalization/gamma/Adam"
  input: "generator/encoder_6/batch_normalization/gamma/Adam_1"
  input: "generator/encoder_6/batch_normalization/moving_mean"
  input: "generator/encoder_6/batch_normalization/moving_variance"
  input: "generator/encoder_6/conv2d/bias"
  input: "generator/encoder_6/conv2d/bias/Adam"
  input: "generator/encoder_6/conv2d/bias/Adam_1"
  input: "generator/encoder_6/conv2d/kernel"
  input: "generator/encoder_6/conv2d/kernel/Adam"
  input: "generator/encoder_6/conv2d/kernel/Adam_1"
  input: "generator/encoder_7/batch_normalization/beta"
  input: "generator/encoder_7/batch_normalization/beta/Adam"
  input: "generator/encoder_7/batch_normalization/beta/Adam_1"
  input: "generator/encoder_7/batch_normalization/gamma"
  input: "generator/encoder_7/batch_normalization/gamma/Adam"
  input: "generator/encoder_7/batch_normalization/gamma/Adam_1"
  input: "generator/encoder_7/batch_normalization/moving_mean"
  input: "generator/encoder_7/batch_normalization/moving_variance"
  input: "generator/encoder_7/conv2d/bias"
  input: "generator/encoder_7/conv2d/bias/Adam"
  input: "generator/encoder_7/conv2d/bias/Adam_1"
  input: "generator/encoder_7/conv2d/kernel"
  input: "generator/encoder_7/conv2d/kernel/Adam"
  input: "generator/encoder_7/conv2d/kernel/Adam_1"
  input: "generator/encoder_8/batch_normalization/beta"
  input: "generator/encoder_8/batch_normalization/beta/Adam"
  input: "generator/encoder_8/batch_normalization/beta/Adam_1"
  input: "generator/encoder_8/batch_normalization/gamma"
  input: "generator/encoder_8/batch_normalization/gamma/Adam"
  input: "generator/encoder_8/batch_normalization/gamma/Adam_1"
  input: "generator/encoder_8/batch_normalization/moving_mean"
  input: "generator/encoder_8/batch_normalization/moving_variance"
  input: "generator/encoder_8/conv2d/bias"
  input: "generator/encoder_8/conv2d/bias/Adam"
  input: "generator/encoder_8/conv2d/bias/Adam_1"
  input: "generator/encoder_8/conv2d/kernel"
  input: "generator/encoder_8/conv2d/kernel/Adam"
  input: "generator/encoder_8/conv2d/kernel/Adam_1"
  input: "generator_loss/Mean/ExponentialMovingAverage"
  input: "generator_loss/Mean_1/ExponentialMovingAverage"
  input: "generator_train/beta1_power"
  input: "generator_train/beta2_power"
  input: "global_step"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 270
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 270
          }
        }
        string_val: "discriminator/layer_1/conv2d/bias"
        string_val: "discriminator/layer_1/conv2d/bias/Adam"
        string_val: "discriminator/layer_1/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_1/conv2d/kernel"
        string_val: "discriminator/layer_1/conv2d/kernel/Adam"
        string_val: "discriminator/layer_1/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_2/batch_normalization/beta"
        string_val: "discriminator/layer_2/batch_normalization/beta/Adam"
        string_val: "discriminator/layer_2/batch_normalization/beta/Adam_1"
        string_val: "discriminator/layer_2/batch_normalization/gamma"
        string_val: "discriminator/layer_2/batch_normalization/gamma/Adam"
        string_val: "discriminator/layer_2/batch_normalization/gamma/Adam_1"
        string_val: "discriminator/layer_2/batch_normalization/moving_mean"
        string_val: "discriminator/layer_2/batch_normalization/moving_variance"
        string_val: "discriminator/layer_2/conv2d/bias"
        string_val: "discriminator/layer_2/conv2d/bias/Adam"
        string_val: "discriminator/layer_2/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_2/conv2d/kernel"
        string_val: "discriminator/layer_2/conv2d/kernel/Adam"
        string_val: "discriminator/layer_2/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_3/batch_normalization/beta"
        string_val: "discriminator/layer_3/batch_normalization/beta/Adam"
        string_val: "discriminator/layer_3/batch_normalization/beta/Adam_1"
        string_val: "discriminator/layer_3/batch_normalization/gamma"
        string_val: "discriminator/layer_3/batch_normalization/gamma/Adam"
        string_val: "discriminator/layer_3/batch_normalization/gamma/Adam_1"
        string_val: "discriminator/layer_3/batch_normalization/moving_mean"
        string_val: "discriminator/layer_3/batch_normalization/moving_variance"
        string_val: "discriminator/layer_3/conv2d/bias"
        string_val: "discriminator/layer_3/conv2d/bias/Adam"
        string_val: "discriminator/layer_3/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_3/conv2d/kernel"
        string_val: "discriminator/layer_3/conv2d/kernel/Adam"
        string_val: "discriminator/layer_3/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_4/batch_normalization/beta"
        string_val: "discriminator/layer_4/batch_normalization/beta/Adam"
        string_val: "discriminator/layer_4/batch_normalization/beta/Adam_1"
        string_val: "discriminator/layer_4/batch_normalization/gamma"
        string_val: "discriminator/layer_4/batch_normalization/gamma/Adam"
        string_val: "discriminator/layer_4/batch_normalization/gamma/Adam_1"
        string_val: "discriminator/layer_4/batch_normalization/moving_mean"
        string_val: "discriminator/layer_4/batch_normalization/moving_variance"
        string_val: "discriminator/layer_4/conv2d/bias"
        string_val: "discriminator/layer_4/conv2d/bias/Adam"
        string_val: "discriminator/layer_4/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_4/conv2d/kernel"
        string_val: "discriminator/layer_4/conv2d/kernel/Adam"
        string_val: "discriminator/layer_4/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_5/conv2d/bias"
        string_val: "discriminator/layer_5/conv2d/bias/Adam"
        string_val: "discriminator/layer_5/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_5/conv2d/kernel"
        string_val: "discriminator/layer_5/conv2d/kernel/Adam"
        string_val: "discriminator/layer_5/conv2d/kernel/Adam_1"
        string_val: "discriminator_loss/Mean/ExponentialMovingAverage"
        string_val: "discriminator_train/beta1_power"
        string_val: "discriminator_train/beta2_power"
        string_val: "generator/decoder_1/conv2d_transpose/bias"
        string_val: "generator/decoder_1/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_1/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_1/conv2d_transpose/kernel"
        string_val: "generator/decoder_1/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_1/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_2/batch_normalization/beta"
        string_val: "generator/decoder_2/batch_normalization/beta/Adam"
        string_val: "generator/decoder_2/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_2/batch_normalization/gamma"
        string_val: "generator/decoder_2/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_2/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_2/batch_normalization/moving_mean"
        string_val: "generator/decoder_2/batch_normalization/moving_variance"
        string_val: "generator/decoder_2/conv2d_transpose/bias"
        string_val: "generator/decoder_2/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_2/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_2/conv2d_transpose/kernel"
        string_val: "generator/decoder_2/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_2/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_3/batch_normalization/beta"
        string_val: "generator/decoder_3/batch_normalization/beta/Adam"
        string_val: "generator/decoder_3/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_3/batch_normalization/gamma"
        string_val: "generator/decoder_3/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_3/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_3/batch_normalization/moving_mean"
        string_val: "generator/decoder_3/batch_normalization/moving_variance"
        string_val: "generator/decoder_3/conv2d_transpose/bias"
        string_val: "generator/decoder_3/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_3/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_3/conv2d_transpose/kernel"
        string_val: "generator/decoder_3/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_3/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_4/batch_normalization/beta"
        string_val: "generator/decoder_4/batch_normalization/beta/Adam"
        string_val: "generator/decoder_4/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_4/batch_normalization/gamma"
        string_val: "generator/decoder_4/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_4/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_4/batch_normalization/moving_mean"
        string_val: "generator/decoder_4/batch_normalization/moving_variance"
        string_val: "generator/decoder_4/conv2d_transpose/bias"
        string_val: "generator/decoder_4/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_4/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_4/conv2d_transpose/kernel"
        string_val: "generator/decoder_4/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_4/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_5/batch_normalization/beta"
        string_val: "generator/decoder_5/batch_normalization/beta/Adam"
        string_val: "generator/decoder_5/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_5/batch_normalization/gamma"
        string_val: "generator/decoder_5/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_5/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_5/batch_normalization/moving_mean"
        string_val: "generator/decoder_5/batch_normalization/moving_variance"
        string_val: "generator/decoder_5/conv2d_transpose/bias"
        string_val: "generator/decoder_5/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_5/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_5/conv2d_transpose/kernel"
        string_val: "generator/decoder_5/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_5/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_6/batch_normalization/beta"
        string_val: "generator/decoder_6/batch_normalization/beta/Adam"
        string_val: "generator/decoder_6/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_6/batch_normalization/gamma"
        string_val: "generator/decoder_6/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_6/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_6/batch_normalization/moving_mean"
        string_val: "generator/decoder_6/batch_normalization/moving_variance"
        string_val: "generator/decoder_6/conv2d_transpose/bias"
        string_val: "generator/decoder_6/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_6/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_6/conv2d_transpose/kernel"
        string_val: "generator/decoder_6/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_6/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_7/batch_normalization/beta"
        string_val: "generator/decoder_7/batch_normalization/beta/Adam"
        string_val: "generator/decoder_7/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_7/batch_normalization/gamma"
        string_val: "generator/decoder_7/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_7/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_7/batch_normalization/moving_mean"
        string_val: "generator/decoder_7/batch_normalization/moving_variance"
        string_val: "generator/decoder_7/conv2d_transpose/bias"
        string_val: "generator/decoder_7/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_7/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_7/conv2d_transpose/kernel"
        string_val: "generator/decoder_7/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_7/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_8/batch_normalization/beta"
        string_val: "generator/decoder_8/batch_normalization/beta/Adam"
        string_val: "generator/decoder_8/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_8/batch_normalization/gamma"
        string_val: "generator/decoder_8/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_8/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_8/batch_normalization/moving_mean"
        string_val: "generator/decoder_8/batch_normalization/moving_variance"
        string_val: "generator/decoder_8/conv2d_transpose/bias"
        string_val: "generator/decoder_8/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_8/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_8/conv2d_transpose/kernel"
        string_val: "generator/decoder_8/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_8/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/encoder_1/conv2d/bias"
        string_val: "generator/encoder_1/conv2d/bias/Adam"
        string_val: "generator/encoder_1/conv2d/bias/Adam_1"
        string_val: "generator/encoder_1/conv2d/kernel"
        string_val: "generator/encoder_1/conv2d/kernel/Adam"
        string_val: "generator/encoder_1/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_2/batch_normalization/beta"
        string_val: "generator/encoder_2/batch_normalization/beta/Adam"
        string_val: "generator/encoder_2/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_2/batch_normalization/gamma"
        string_val: "generator/encoder_2/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_2/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_2/batch_normalization/moving_mean"
        string_val: "generator/encoder_2/batch_normalization/moving_variance"
        string_val: "generator/encoder_2/conv2d/bias"
        string_val: "generator/encoder_2/conv2d/bias/Adam"
        string_val: "generator/encoder_2/conv2d/bias/Adam_1"
        string_val: "generator/encoder_2/conv2d/kernel"
        string_val: "generator/encoder_2/conv2d/kernel/Adam"
        string_val: "generator/encoder_2/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_3/batch_normalization/beta"
        string_val: "generator/encoder_3/batch_normalization/beta/Adam"
        string_val: "generator/encoder_3/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_3/batch_normalization/gamma"
        string_val: "generator/encoder_3/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_3/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_3/batch_normalization/moving_mean"
        string_val: "generator/encoder_3/batch_normalization/moving_variance"
        string_val: "generator/encoder_3/conv2d/bias"
        string_val: "generator/encoder_3/conv2d/bias/Adam"
        string_val: "generator/encoder_3/conv2d/bias/Adam_1"
        string_val: "generator/encoder_3/conv2d/kernel"
        string_val: "generator/encoder_3/conv2d/kernel/Adam"
        string_val: "generator/encoder_3/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_4/batch_normalization/beta"
        string_val: "generator/encoder_4/batch_normalization/beta/Adam"
        string_val: "generator/encoder_4/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_4/batch_normalization/gamma"
        string_val: "generator/encoder_4/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_4/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_4/batch_normalization/moving_mean"
        string_val: "generator/encoder_4/batch_normalization/moving_variance"
        string_val: "generator/encoder_4/conv2d/bias"
        string_val: "generator/encoder_4/conv2d/bias/Adam"
        string_val: "generator/encoder_4/conv2d/bias/Adam_1"
        string_val: "generator/encoder_4/conv2d/kernel"
        string_val: "generator/encoder_4/conv2d/kernel/Adam"
        string_val: "generator/encoder_4/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_5/batch_normalization/beta"
        string_val: "generator/encoder_5/batch_normalization/beta/Adam"
        string_val: "generator/encoder_5/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_5/batch_normalization/gamma"
        string_val: "generator/encoder_5/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_5/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_5/batch_normalization/moving_mean"
        string_val: "generator/encoder_5/batch_normalization/moving_variance"
        string_val: "generator/encoder_5/conv2d/bias"
        string_val: "generator/encoder_5/conv2d/bias/Adam"
        string_val: "generator/encoder_5/conv2d/bias/Adam_1"
        string_val: "generator/encoder_5/conv2d/kernel"
        string_val: "generator/encoder_5/conv2d/kernel/Adam"
        string_val: "generator/encoder_5/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_6/batch_normalization/beta"
        string_val: "generator/encoder_6/batch_normalization/beta/Adam"
        string_val: "generator/encoder_6/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_6/batch_normalization/gamma"
        string_val: "generator/encoder_6/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_6/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_6/batch_normalization/moving_mean"
        string_val: "generator/encoder_6/batch_normalization/moving_variance"
        string_val: "generator/encoder_6/conv2d/bias"
        string_val: "generator/encoder_6/conv2d/bias/Adam"
        string_val: "generator/encoder_6/conv2d/bias/Adam_1"
        string_val: "generator/encoder_6/conv2d/kernel"
        string_val: "generator/encoder_6/conv2d/kernel/Adam"
        string_val: "generator/encoder_6/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_7/batch_normalization/beta"
        string_val: "generator/encoder_7/batch_normalization/beta/Adam"
        string_val: "generator/encoder_7/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_7/batch_normalization/gamma"
        string_val: "generator/encoder_7/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_7/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_7/batch_normalization/moving_mean"
        string_val: "generator/encoder_7/batch_normalization/moving_variance"
        string_val: "generator/encoder_7/conv2d/bias"
        string_val: "generator/encoder_7/conv2d/bias/Adam"
        string_val: "generator/encoder_7/conv2d/bias/Adam_1"
        string_val: "generator/encoder_7/conv2d/kernel"
        string_val: "generator/encoder_7/conv2d/kernel/Adam"
        string_val: "generator/encoder_7/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_8/batch_normalization/beta"
        string_val: "generator/encoder_8/batch_normalization/beta/Adam"
        string_val: "generator/encoder_8/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_8/batch_normalization/gamma"
        string_val: "generator/encoder_8/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_8/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_8/batch_normalization/moving_mean"
        string_val: "generator/encoder_8/batch_normalization/moving_variance"
        string_val: "generator/encoder_8/conv2d/bias"
        string_val: "generator/encoder_8/conv2d/bias/Adam"
        string_val: "generator/encoder_8/conv2d/bias/Adam_1"
        string_val: "generator/encoder_8/conv2d/kernel"
        string_val: "generator/encoder_8/conv2d/kernel/Adam"
        string_val: "generator/encoder_8/conv2d/kernel/Adam_1"
        string_val: "generator_loss/Mean/ExponentialMovingAverage"
        string_val: "generator_loss/Mean_1/ExponentialMovingAverage"
        string_val: "generator_train/beta1_power"
        string_val: "generator_train/beta2_power"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 270
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 270
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "discriminator/layer_1/conv2d/bias"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "discriminator/layer_1/conv2d/bias/Adam"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "discriminator/layer_1/conv2d/bias/Adam_1"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "discriminator/layer_1/conv2d/kernel"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "discriminator/layer_1/conv2d/kernel/Adam"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "discriminator/layer_1/conv2d/kernel/Adam_1"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "discriminator/layer_2/batch_normalization/beta"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "discriminator/layer_2/batch_normalization/beta/Adam"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "discriminator/layer_2/batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "discriminator/layer_2/batch_normalization/gamma"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "discriminator/layer_2/batch_normalization/moving_mean"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "discriminator/layer_2/batch_normalization/moving_variance"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "discriminator/layer_2/conv2d/bias"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "discriminator/layer_2/conv2d/bias/Adam"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "discriminator/layer_2/conv2d/bias/Adam_1"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "discriminator/layer_2/conv2d/kernel"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "discriminator/layer_2/conv2d/kernel/Adam"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "discriminator/layer_2/conv2d/kernel/Adam_1"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "discriminator/layer_3/batch_normalization/beta"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "discriminator/layer_3/batch_normalization/beta/Adam"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "discriminator/layer_3/batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "discriminator/layer_3/batch_normalization/gamma"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "discriminator/layer_3/batch_normalization/moving_mean"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "discriminator/layer_3/batch_normalization/moving_variance"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "discriminator/layer_3/conv2d/bias"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "discriminator/layer_3/conv2d/bias/Adam"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "discriminator/layer_3/conv2d/bias/Adam_1"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "discriminator/layer_3/conv2d/kernel"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "discriminator/layer_3/conv2d/kernel/Adam"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "discriminator/layer_3/conv2d/kernel/Adam_1"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "discriminator/layer_4/batch_normalization/beta"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "discriminator/layer_4/batch_normalization/beta/Adam"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "discriminator/layer_4/batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "discriminator/layer_4/batch_normalization/gamma"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "discriminator/layer_4/batch_normalization/moving_mean"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "discriminator/layer_4/batch_normalization/moving_variance"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "discriminator/layer_4/conv2d/bias"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "discriminator/layer_4/conv2d/bias/Adam"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "discriminator/layer_4/conv2d/bias/Adam_1"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "discriminator/layer_4/conv2d/kernel"
  input: "save/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "discriminator/layer_4/conv2d/kernel/Adam"
  input: "save/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "discriminator/layer_4/conv2d/kernel/Adam_1"
  input: "save/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_48"
  op: "Assign"
  input: "discriminator/layer_5/conv2d/bias"
  input: "save/RestoreV2:48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_49"
  op: "Assign"
  input: "discriminator/layer_5/conv2d/bias/Adam"
  input: "save/RestoreV2:49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_50"
  op: "Assign"
  input: "discriminator/layer_5/conv2d/bias/Adam_1"
  input: "save/RestoreV2:50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_51"
  op: "Assign"
  input: "discriminator/layer_5/conv2d/kernel"
  input: "save/RestoreV2:51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_52"
  op: "Assign"
  input: "discriminator/layer_5/conv2d/kernel/Adam"
  input: "save/RestoreV2:52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_53"
  op: "Assign"
  input: "discriminator/layer_5/conv2d/kernel/Adam_1"
  input: "save/RestoreV2:53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_54"
  op: "Assign"
  input: "discriminator_loss/Mean/ExponentialMovingAverage"
  input: "save/RestoreV2:54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_55"
  op: "Assign"
  input: "discriminator_train/beta1_power"
  input: "save/RestoreV2:55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_56"
  op: "Assign"
  input: "discriminator_train/beta2_power"
  input: "save/RestoreV2:56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_57"
  op: "Assign"
  input: "generator/decoder_1/conv2d_transpose/bias"
  input: "save/RestoreV2:57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_58"
  op: "Assign"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam"
  input: "save/RestoreV2:58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_59"
  op: "Assign"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam_1"
  input: "save/RestoreV2:59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_60"
  op: "Assign"
  input: "generator/decoder_1/conv2d_transpose/kernel"
  input: "save/RestoreV2:60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_61"
  op: "Assign"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam"
  input: "save/RestoreV2:61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_62"
  op: "Assign"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam_1"
  input: "save/RestoreV2:62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 1
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_63"
  op: "Assign"
  input: "generator/decoder_2/batch_normalization/beta"
  input: "save/RestoreV2:63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_64"
  op: "Assign"
  input: "generator/decoder_2/batch_normalization/beta/Adam"
  input: "save/RestoreV2:64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_65"
  op: "Assign"
  input: "generator/decoder_2/batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_66"
  op: "Assign"
  input: "generator/decoder_2/batch_normalization/gamma"
  input: "save/RestoreV2:66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_67"
  op: "Assign"
  input: "generator/decoder_2/batch_normalization/gamma/Adam"
  input: "save/RestoreV2:67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_68"
  op: "Assign"
  input: "generator/decoder_2/batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_69"
  op: "Assign"
  input: "generator/decoder_2/batch_normalization/moving_mean"
  input: "save/RestoreV2:69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_70"
  op: "Assign"
  input: "generator/decoder_2/batch_normalization/moving_variance"
  input: "save/RestoreV2:70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_71"
  op: "Assign"
  input: "generator/decoder_2/conv2d_transpose/bias"
  input: "save/RestoreV2:71"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_72"
  op: "Assign"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam"
  input: "save/RestoreV2:72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_73"
  op: "Assign"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam_1"
  input: "save/RestoreV2:73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_74"
  op: "Assign"
  input: "generator/decoder_2/conv2d_transpose/kernel"
  input: "save/RestoreV2:74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_75"
  op: "Assign"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam"
  input: "save/RestoreV2:75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_76"
  op: "Assign"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam_1"
  input: "save/RestoreV2:76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_77"
  op: "Assign"
  input: "generator/decoder_3/batch_normalization/beta"
  input: "save/RestoreV2:77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_78"
  op: "Assign"
  input: "generator/decoder_3/batch_normalization/beta/Adam"
  input: "save/RestoreV2:78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_79"
  op: "Assign"
  input: "generator/decoder_3/batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_80"
  op: "Assign"
  input: "generator/decoder_3/batch_normalization/gamma"
  input: "save/RestoreV2:80"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_81"
  op: "Assign"
  input: "generator/decoder_3/batch_normalization/gamma/Adam"
  input: "save/RestoreV2:81"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_82"
  op: "Assign"
  input: "generator/decoder_3/batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_83"
  op: "Assign"
  input: "generator/decoder_3/batch_normalization/moving_mean"
  input: "save/RestoreV2:83"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_84"
  op: "Assign"
  input: "generator/decoder_3/batch_normalization/moving_variance"
  input: "save/RestoreV2:84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_85"
  op: "Assign"
  input: "generator/decoder_3/conv2d_transpose/bias"
  input: "save/RestoreV2:85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_86"
  op: "Assign"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam"
  input: "save/RestoreV2:86"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_87"
  op: "Assign"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam_1"
  input: "save/RestoreV2:87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_88"
  op: "Assign"
  input: "generator/decoder_3/conv2d_transpose/kernel"
  input: "save/RestoreV2:88"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_89"
  op: "Assign"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam"
  input: "save/RestoreV2:89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_90"
  op: "Assign"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam_1"
  input: "save/RestoreV2:90"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_91"
  op: "Assign"
  input: "generator/decoder_4/batch_normalization/beta"
  input: "save/RestoreV2:91"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_92"
  op: "Assign"
  input: "generator/decoder_4/batch_normalization/beta/Adam"
  input: "save/RestoreV2:92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_93"
  op: "Assign"
  input: "generator/decoder_4/batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:93"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_94"
  op: "Assign"
  input: "generator/decoder_4/batch_normalization/gamma"
  input: "save/RestoreV2:94"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_95"
  op: "Assign"
  input: "generator/decoder_4/batch_normalization/gamma/Adam"
  input: "save/RestoreV2:95"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_96"
  op: "Assign"
  input: "generator/decoder_4/batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:96"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_97"
  op: "Assign"
  input: "generator/decoder_4/batch_normalization/moving_mean"
  input: "save/RestoreV2:97"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_98"
  op: "Assign"
  input: "generator/decoder_4/batch_normalization/moving_variance"
  input: "save/RestoreV2:98"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_99"
  op: "Assign"
  input: "generator/decoder_4/conv2d_transpose/bias"
  input: "save/RestoreV2:99"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_100"
  op: "Assign"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam"
  input: "save/RestoreV2:100"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_101"
  op: "Assign"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam_1"
  input: "save/RestoreV2:101"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_102"
  op: "Assign"
  input: "generator/decoder_4/conv2d_transpose/kernel"
  input: "save/RestoreV2:102"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_103"
  op: "Assign"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam"
  input: "save/RestoreV2:103"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_104"
  op: "Assign"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam_1"
  input: "save/RestoreV2:104"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_105"
  op: "Assign"
  input: "generator/decoder_5/batch_normalization/beta"
  input: "save/RestoreV2:105"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_106"
  op: "Assign"
  input: "generator/decoder_5/batch_normalization/beta/Adam"
  input: "save/RestoreV2:106"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_107"
  op: "Assign"
  input: "generator/decoder_5/batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:107"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_108"
  op: "Assign"
  input: "generator/decoder_5/batch_normalization/gamma"
  input: "save/RestoreV2:108"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_109"
  op: "Assign"
  input: "generator/decoder_5/batch_normalization/gamma/Adam"
  input: "save/RestoreV2:109"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_110"
  op: "Assign"
  input: "generator/decoder_5/batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:110"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_111"
  op: "Assign"
  input: "generator/decoder_5/batch_normalization/moving_mean"
  input: "save/RestoreV2:111"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_112"
  op: "Assign"
  input: "generator/decoder_5/batch_normalization/moving_variance"
  input: "save/RestoreV2:112"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_113"
  op: "Assign"
  input: "generator/decoder_5/conv2d_transpose/bias"
  input: "save/RestoreV2:113"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_114"
  op: "Assign"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam"
  input: "save/RestoreV2:114"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_115"
  op: "Assign"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam_1"
  input: "save/RestoreV2:115"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_116"
  op: "Assign"
  input: "generator/decoder_5/conv2d_transpose/kernel"
  input: "save/RestoreV2:116"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_117"
  op: "Assign"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam"
  input: "save/RestoreV2:117"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_118"
  op: "Assign"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam_1"
  input: "save/RestoreV2:118"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_119"
  op: "Assign"
  input: "generator/decoder_6/batch_normalization/beta"
  input: "save/RestoreV2:119"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_120"
  op: "Assign"
  input: "generator/decoder_6/batch_normalization/beta/Adam"
  input: "save/RestoreV2:120"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_121"
  op: "Assign"
  input: "generator/decoder_6/batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:121"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_122"
  op: "Assign"
  input: "generator/decoder_6/batch_normalization/gamma"
  input: "save/RestoreV2:122"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_123"
  op: "Assign"
  input: "generator/decoder_6/batch_normalization/gamma/Adam"
  input: "save/RestoreV2:123"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_124"
  op: "Assign"
  input: "generator/decoder_6/batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:124"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_125"
  op: "Assign"
  input: "generator/decoder_6/batch_normalization/moving_mean"
  input: "save/RestoreV2:125"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_126"
  op: "Assign"
  input: "generator/decoder_6/batch_normalization/moving_variance"
  input: "save/RestoreV2:126"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_127"
  op: "Assign"
  input: "generator/decoder_6/conv2d_transpose/bias"
  input: "save/RestoreV2:127"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_128"
  op: "Assign"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam"
  input: "save/RestoreV2:128"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_129"
  op: "Assign"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam_1"
  input: "save/RestoreV2:129"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_130"
  op: "Assign"
  input: "generator/decoder_6/conv2d_transpose/kernel"
  input: "save/RestoreV2:130"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_131"
  op: "Assign"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam"
  input: "save/RestoreV2:131"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_132"
  op: "Assign"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam_1"
  input: "save/RestoreV2:132"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_133"
  op: "Assign"
  input: "generator/decoder_7/batch_normalization/beta"
  input: "save/RestoreV2:133"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_134"
  op: "Assign"
  input: "generator/decoder_7/batch_normalization/beta/Adam"
  input: "save/RestoreV2:134"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_135"
  op: "Assign"
  input: "generator/decoder_7/batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:135"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_136"
  op: "Assign"
  input: "generator/decoder_7/batch_normalization/gamma"
  input: "save/RestoreV2:136"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_137"
  op: "Assign"
  input: "generator/decoder_7/batch_normalization/gamma/Adam"
  input: "save/RestoreV2:137"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_138"
  op: "Assign"
  input: "generator/decoder_7/batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:138"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_139"
  op: "Assign"
  input: "generator/decoder_7/batch_normalization/moving_mean"
  input: "save/RestoreV2:139"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_140"
  op: "Assign"
  input: "generator/decoder_7/batch_normalization/moving_variance"
  input: "save/RestoreV2:140"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_141"
  op: "Assign"
  input: "generator/decoder_7/conv2d_transpose/bias"
  input: "save/RestoreV2:141"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_142"
  op: "Assign"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam"
  input: "save/RestoreV2:142"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_143"
  op: "Assign"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam_1"
  input: "save/RestoreV2:143"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_144"
  op: "Assign"
  input: "generator/decoder_7/conv2d_transpose/kernel"
  input: "save/RestoreV2:144"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_145"
  op: "Assign"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam"
  input: "save/RestoreV2:145"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_146"
  op: "Assign"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam_1"
  input: "save/RestoreV2:146"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 1024
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_147"
  op: "Assign"
  input: "generator/decoder_8/batch_normalization/beta"
  input: "save/RestoreV2:147"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_148"
  op: "Assign"
  input: "generator/decoder_8/batch_normalization/beta/Adam"
  input: "save/RestoreV2:148"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_149"
  op: "Assign"
  input: "generator/decoder_8/batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:149"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_150"
  op: "Assign"
  input: "generator/decoder_8/batch_normalization/gamma"
  input: "save/RestoreV2:150"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_151"
  op: "Assign"
  input: "generator/decoder_8/batch_normalization/gamma/Adam"
  input: "save/RestoreV2:151"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_152"
  op: "Assign"
  input: "generator/decoder_8/batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:152"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_153"
  op: "Assign"
  input: "generator/decoder_8/batch_normalization/moving_mean"
  input: "save/RestoreV2:153"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_154"
  op: "Assign"
  input: "generator/decoder_8/batch_normalization/moving_variance"
  input: "save/RestoreV2:154"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_155"
  op: "Assign"
  input: "generator/decoder_8/conv2d_transpose/bias"
  input: "save/RestoreV2:155"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_156"
  op: "Assign"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam"
  input: "save/RestoreV2:156"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_157"
  op: "Assign"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam_1"
  input: "save/RestoreV2:157"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_158"
  op: "Assign"
  input: "generator/decoder_8/conv2d_transpose/kernel"
  input: "save/RestoreV2:158"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_159"
  op: "Assign"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam"
  input: "save/RestoreV2:159"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_160"
  op: "Assign"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam_1"
  input: "save/RestoreV2:160"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_161"
  op: "Assign"
  input: "generator/encoder_1/conv2d/bias"
  input: "save/RestoreV2:161"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_162"
  op: "Assign"
  input: "generator/encoder_1/conv2d/bias/Adam"
  input: "save/RestoreV2:162"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_163"
  op: "Assign"
  input: "generator/encoder_1/conv2d/bias/Adam_1"
  input: "save/RestoreV2:163"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_164"
  op: "Assign"
  input: "generator/encoder_1/conv2d/kernel"
  input: "save/RestoreV2:164"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_165"
  op: "Assign"
  input: "generator/encoder_1/conv2d/kernel/Adam"
  input: "save/RestoreV2:165"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_166"
  op: "Assign"
  input: "generator/encoder_1/conv2d/kernel/Adam_1"
  input: "save/RestoreV2:166"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 2
          }
          dim {
            size: 64
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_167"
  op: "Assign"
  input: "generator/encoder_2/batch_normalization/beta"
  input: "save/RestoreV2:167"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_168"
  op: "Assign"
  input: "generator/encoder_2/batch_normalization/beta/Adam"
  input: "save/RestoreV2:168"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_169"
  op: "Assign"
  input: "generator/encoder_2/batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:169"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_170"
  op: "Assign"
  input: "generator/encoder_2/batch_normalization/gamma"
  input: "save/RestoreV2:170"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_171"
  op: "Assign"
  input: "generator/encoder_2/batch_normalization/gamma/Adam"
  input: "save/RestoreV2:171"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_172"
  op: "Assign"
  input: "generator/encoder_2/batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:172"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_173"
  op: "Assign"
  input: "generator/encoder_2/batch_normalization/moving_mean"
  input: "save/RestoreV2:173"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_174"
  op: "Assign"
  input: "generator/encoder_2/batch_normalization/moving_variance"
  input: "save/RestoreV2:174"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_175"
  op: "Assign"
  input: "generator/encoder_2/conv2d/bias"
  input: "save/RestoreV2:175"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_176"
  op: "Assign"
  input: "generator/encoder_2/conv2d/bias/Adam"
  input: "save/RestoreV2:176"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_177"
  op: "Assign"
  input: "generator/encoder_2/conv2d/bias/Adam_1"
  input: "save/RestoreV2:177"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_178"
  op: "Assign"
  input: "generator/encoder_2/conv2d/kernel"
  input: "save/RestoreV2:178"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_179"
  op: "Assign"
  input: "generator/encoder_2/conv2d/kernel/Adam"
  input: "save/RestoreV2:179"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_180"
  op: "Assign"
  input: "generator/encoder_2/conv2d/kernel/Adam_1"
  input: "save/RestoreV2:180"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 64
          }
          dim {
            size: 128
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_181"
  op: "Assign"
  input: "generator/encoder_3/batch_normalization/beta"
  input: "save/RestoreV2:181"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_182"
  op: "Assign"
  input: "generator/encoder_3/batch_normalization/beta/Adam"
  input: "save/RestoreV2:182"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_183"
  op: "Assign"
  input: "generator/encoder_3/batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:183"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_184"
  op: "Assign"
  input: "generator/encoder_3/batch_normalization/gamma"
  input: "save/RestoreV2:184"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_185"
  op: "Assign"
  input: "generator/encoder_3/batch_normalization/gamma/Adam"
  input: "save/RestoreV2:185"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_186"
  op: "Assign"
  input: "generator/encoder_3/batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:186"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_187"
  op: "Assign"
  input: "generator/encoder_3/batch_normalization/moving_mean"
  input: "save/RestoreV2:187"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_188"
  op: "Assign"
  input: "generator/encoder_3/batch_normalization/moving_variance"
  input: "save/RestoreV2:188"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_189"
  op: "Assign"
  input: "generator/encoder_3/conv2d/bias"
  input: "save/RestoreV2:189"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_190"
  op: "Assign"
  input: "generator/encoder_3/conv2d/bias/Adam"
  input: "save/RestoreV2:190"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_191"
  op: "Assign"
  input: "generator/encoder_3/conv2d/bias/Adam_1"
  input: "save/RestoreV2:191"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_192"
  op: "Assign"
  input: "generator/encoder_3/conv2d/kernel"
  input: "save/RestoreV2:192"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_193"
  op: "Assign"
  input: "generator/encoder_3/conv2d/kernel/Adam"
  input: "save/RestoreV2:193"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_194"
  op: "Assign"
  input: "generator/encoder_3/conv2d/kernel/Adam_1"
  input: "save/RestoreV2:194"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 128
          }
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_195"
  op: "Assign"
  input: "generator/encoder_4/batch_normalization/beta"
  input: "save/RestoreV2:195"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_196"
  op: "Assign"
  input: "generator/encoder_4/batch_normalization/beta/Adam"
  input: "save/RestoreV2:196"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_197"
  op: "Assign"
  input: "generator/encoder_4/batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:197"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_198"
  op: "Assign"
  input: "generator/encoder_4/batch_normalization/gamma"
  input: "save/RestoreV2:198"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_199"
  op: "Assign"
  input: "generator/encoder_4/batch_normalization/gamma/Adam"
  input: "save/RestoreV2:199"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_200"
  op: "Assign"
  input: "generator/encoder_4/batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:200"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_201"
  op: "Assign"
  input: "generator/encoder_4/batch_normalization/moving_mean"
  input: "save/RestoreV2:201"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_202"
  op: "Assign"
  input: "generator/encoder_4/batch_normalization/moving_variance"
  input: "save/RestoreV2:202"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_203"
  op: "Assign"
  input: "generator/encoder_4/conv2d/bias"
  input: "save/RestoreV2:203"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_204"
  op: "Assign"
  input: "generator/encoder_4/conv2d/bias/Adam"
  input: "save/RestoreV2:204"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_205"
  op: "Assign"
  input: "generator/encoder_4/conv2d/bias/Adam_1"
  input: "save/RestoreV2:205"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_206"
  op: "Assign"
  input: "generator/encoder_4/conv2d/kernel"
  input: "save/RestoreV2:206"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_207"
  op: "Assign"
  input: "generator/encoder_4/conv2d/kernel/Adam"
  input: "save/RestoreV2:207"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_208"
  op: "Assign"
  input: "generator/encoder_4/conv2d/kernel/Adam_1"
  input: "save/RestoreV2:208"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 256
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_209"
  op: "Assign"
  input: "generator/encoder_5/batch_normalization/beta"
  input: "save/RestoreV2:209"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_210"
  op: "Assign"
  input: "generator/encoder_5/batch_normalization/beta/Adam"
  input: "save/RestoreV2:210"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_211"
  op: "Assign"
  input: "generator/encoder_5/batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:211"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_212"
  op: "Assign"
  input: "generator/encoder_5/batch_normalization/gamma"
  input: "save/RestoreV2:212"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_213"
  op: "Assign"
  input: "generator/encoder_5/batch_normalization/gamma/Adam"
  input: "save/RestoreV2:213"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_214"
  op: "Assign"
  input: "generator/encoder_5/batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:214"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_215"
  op: "Assign"
  input: "generator/encoder_5/batch_normalization/moving_mean"
  input: "save/RestoreV2:215"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_216"
  op: "Assign"
  input: "generator/encoder_5/batch_normalization/moving_variance"
  input: "save/RestoreV2:216"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_217"
  op: "Assign"
  input: "generator/encoder_5/conv2d/bias"
  input: "save/RestoreV2:217"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_218"
  op: "Assign"
  input: "generator/encoder_5/conv2d/bias/Adam"
  input: "save/RestoreV2:218"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_219"
  op: "Assign"
  input: "generator/encoder_5/conv2d/bias/Adam_1"
  input: "save/RestoreV2:219"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_220"
  op: "Assign"
  input: "generator/encoder_5/conv2d/kernel"
  input: "save/RestoreV2:220"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_221"
  op: "Assign"
  input: "generator/encoder_5/conv2d/kernel/Adam"
  input: "save/RestoreV2:221"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_222"
  op: "Assign"
  input: "generator/encoder_5/conv2d/kernel/Adam_1"
  input: "save/RestoreV2:222"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_223"
  op: "Assign"
  input: "generator/encoder_6/batch_normalization/beta"
  input: "save/RestoreV2:223"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_224"
  op: "Assign"
  input: "generator/encoder_6/batch_normalization/beta/Adam"
  input: "save/RestoreV2:224"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_225"
  op: "Assign"
  input: "generator/encoder_6/batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:225"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_226"
  op: "Assign"
  input: "generator/encoder_6/batch_normalization/gamma"
  input: "save/RestoreV2:226"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_227"
  op: "Assign"
  input: "generator/encoder_6/batch_normalization/gamma/Adam"
  input: "save/RestoreV2:227"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_228"
  op: "Assign"
  input: "generator/encoder_6/batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:228"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_229"
  op: "Assign"
  input: "generator/encoder_6/batch_normalization/moving_mean"
  input: "save/RestoreV2:229"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_230"
  op: "Assign"
  input: "generator/encoder_6/batch_normalization/moving_variance"
  input: "save/RestoreV2:230"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_231"
  op: "Assign"
  input: "generator/encoder_6/conv2d/bias"
  input: "save/RestoreV2:231"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_232"
  op: "Assign"
  input: "generator/encoder_6/conv2d/bias/Adam"
  input: "save/RestoreV2:232"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_233"
  op: "Assign"
  input: "generator/encoder_6/conv2d/bias/Adam_1"
  input: "save/RestoreV2:233"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_234"
  op: "Assign"
  input: "generator/encoder_6/conv2d/kernel"
  input: "save/RestoreV2:234"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_235"
  op: "Assign"
  input: "generator/encoder_6/conv2d/kernel/Adam"
  input: "save/RestoreV2:235"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_236"
  op: "Assign"
  input: "generator/encoder_6/conv2d/kernel/Adam_1"
  input: "save/RestoreV2:236"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_237"
  op: "Assign"
  input: "generator/encoder_7/batch_normalization/beta"
  input: "save/RestoreV2:237"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_238"
  op: "Assign"
  input: "generator/encoder_7/batch_normalization/beta/Adam"
  input: "save/RestoreV2:238"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_239"
  op: "Assign"
  input: "generator/encoder_7/batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:239"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_240"
  op: "Assign"
  input: "generator/encoder_7/batch_normalization/gamma"
  input: "save/RestoreV2:240"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_241"
  op: "Assign"
  input: "generator/encoder_7/batch_normalization/gamma/Adam"
  input: "save/RestoreV2:241"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_242"
  op: "Assign"
  input: "generator/encoder_7/batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:242"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_243"
  op: "Assign"
  input: "generator/encoder_7/batch_normalization/moving_mean"
  input: "save/RestoreV2:243"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_244"
  op: "Assign"
  input: "generator/encoder_7/batch_normalization/moving_variance"
  input: "save/RestoreV2:244"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_245"
  op: "Assign"
  input: "generator/encoder_7/conv2d/bias"
  input: "save/RestoreV2:245"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_246"
  op: "Assign"
  input: "generator/encoder_7/conv2d/bias/Adam"
  input: "save/RestoreV2:246"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_247"
  op: "Assign"
  input: "generator/encoder_7/conv2d/bias/Adam_1"
  input: "save/RestoreV2:247"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_248"
  op: "Assign"
  input: "generator/encoder_7/conv2d/kernel"
  input: "save/RestoreV2:248"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_249"
  op: "Assign"
  input: "generator/encoder_7/conv2d/kernel/Adam"
  input: "save/RestoreV2:249"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_250"
  op: "Assign"
  input: "generator/encoder_7/conv2d/kernel/Adam_1"
  input: "save/RestoreV2:250"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_251"
  op: "Assign"
  input: "generator/encoder_8/batch_normalization/beta"
  input: "save/RestoreV2:251"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_252"
  op: "Assign"
  input: "generator/encoder_8/batch_normalization/beta/Adam"
  input: "save/RestoreV2:252"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_253"
  op: "Assign"
  input: "generator/encoder_8/batch_normalization/beta/Adam_1"
  input: "save/RestoreV2:253"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_254"
  op: "Assign"
  input: "generator/encoder_8/batch_normalization/gamma"
  input: "save/RestoreV2:254"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_255"
  op: "Assign"
  input: "generator/encoder_8/batch_normalization/gamma/Adam"
  input: "save/RestoreV2:255"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_256"
  op: "Assign"
  input: "generator/encoder_8/batch_normalization/gamma/Adam_1"
  input: "save/RestoreV2:256"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_257"
  op: "Assign"
  input: "generator/encoder_8/batch_normalization/moving_mean"
  input: "save/RestoreV2:257"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_258"
  op: "Assign"
  input: "generator/encoder_8/batch_normalization/moving_variance"
  input: "save/RestoreV2:258"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_259"
  op: "Assign"
  input: "generator/encoder_8/conv2d/bias"
  input: "save/RestoreV2:259"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_260"
  op: "Assign"
  input: "generator/encoder_8/conv2d/bias/Adam"
  input: "save/RestoreV2:260"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_261"
  op: "Assign"
  input: "generator/encoder_8/conv2d/bias/Adam_1"
  input: "save/RestoreV2:261"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_262"
  op: "Assign"
  input: "generator/encoder_8/conv2d/kernel"
  input: "save/RestoreV2:262"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_263"
  op: "Assign"
  input: "generator/encoder_8/conv2d/kernel/Adam"
  input: "save/RestoreV2:263"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_264"
  op: "Assign"
  input: "generator/encoder_8/conv2d/kernel/Adam_1"
  input: "save/RestoreV2:264"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 4
          }
          dim {
            size: 512
          }
          dim {
            size: 512
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_265"
  op: "Assign"
  input: "generator_loss/Mean/ExponentialMovingAverage"
  input: "save/RestoreV2:265"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_266"
  op: "Assign"
  input: "generator_loss/Mean_1/ExponentialMovingAverage"
  input: "save/RestoreV2:266"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean_1/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_267"
  op: "Assign"
  input: "generator_train/beta1_power"
  input: "save/RestoreV2:267"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_268"
  op: "Assign"
  input: "generator_train/beta2_power"
  input: "save/RestoreV2:268"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_269"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2:269"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_100"
  input: "^save/Assign_101"
  input: "^save/Assign_102"
  input: "^save/Assign_103"
  input: "^save/Assign_104"
  input: "^save/Assign_105"
  input: "^save/Assign_106"
  input: "^save/Assign_107"
  input: "^save/Assign_108"
  input: "^save/Assign_109"
  input: "^save/Assign_11"
  input: "^save/Assign_110"
  input: "^save/Assign_111"
  input: "^save/Assign_112"
  input: "^save/Assign_113"
  input: "^save/Assign_114"
  input: "^save/Assign_115"
  input: "^save/Assign_116"
  input: "^save/Assign_117"
  input: "^save/Assign_118"
  input: "^save/Assign_119"
  input: "^save/Assign_12"
  input: "^save/Assign_120"
  input: "^save/Assign_121"
  input: "^save/Assign_122"
  input: "^save/Assign_123"
  input: "^save/Assign_124"
  input: "^save/Assign_125"
  input: "^save/Assign_126"
  input: "^save/Assign_127"
  input: "^save/Assign_128"
  input: "^save/Assign_129"
  input: "^save/Assign_13"
  input: "^save/Assign_130"
  input: "^save/Assign_131"
  input: "^save/Assign_132"
  input: "^save/Assign_133"
  input: "^save/Assign_134"
  input: "^save/Assign_135"
  input: "^save/Assign_136"
  input: "^save/Assign_137"
  input: "^save/Assign_138"
  input: "^save/Assign_139"
  input: "^save/Assign_14"
  input: "^save/Assign_140"
  input: "^save/Assign_141"
  input: "^save/Assign_142"
  input: "^save/Assign_143"
  input: "^save/Assign_144"
  input: "^save/Assign_145"
  input: "^save/Assign_146"
  input: "^save/Assign_147"
  input: "^save/Assign_148"
  input: "^save/Assign_149"
  input: "^save/Assign_15"
  input: "^save/Assign_150"
  input: "^save/Assign_151"
  input: "^save/Assign_152"
  input: "^save/Assign_153"
  input: "^save/Assign_154"
  input: "^save/Assign_155"
  input: "^save/Assign_156"
  input: "^save/Assign_157"
  input: "^save/Assign_158"
  input: "^save/Assign_159"
  input: "^save/Assign_16"
  input: "^save/Assign_160"
  input: "^save/Assign_161"
  input: "^save/Assign_162"
  input: "^save/Assign_163"
  input: "^save/Assign_164"
  input: "^save/Assign_165"
  input: "^save/Assign_166"
  input: "^save/Assign_167"
  input: "^save/Assign_168"
  input: "^save/Assign_169"
  input: "^save/Assign_17"
  input: "^save/Assign_170"
  input: "^save/Assign_171"
  input: "^save/Assign_172"
  input: "^save/Assign_173"
  input: "^save/Assign_174"
  input: "^save/Assign_175"
  input: "^save/Assign_176"
  input: "^save/Assign_177"
  input: "^save/Assign_178"
  input: "^save/Assign_179"
  input: "^save/Assign_18"
  input: "^save/Assign_180"
  input: "^save/Assign_181"
  input: "^save/Assign_182"
  input: "^save/Assign_183"
  input: "^save/Assign_184"
  input: "^save/Assign_185"
  input: "^save/Assign_186"
  input: "^save/Assign_187"
  input: "^save/Assign_188"
  input: "^save/Assign_189"
  input: "^save/Assign_19"
  input: "^save/Assign_190"
  input: "^save/Assign_191"
  input: "^save/Assign_192"
  input: "^save/Assign_193"
  input: "^save/Assign_194"
  input: "^save/Assign_195"
  input: "^save/Assign_196"
  input: "^save/Assign_197"
  input: "^save/Assign_198"
  input: "^save/Assign_199"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_200"
  input: "^save/Assign_201"
  input: "^save/Assign_202"
  input: "^save/Assign_203"
  input: "^save/Assign_204"
  input: "^save/Assign_205"
  input: "^save/Assign_206"
  input: "^save/Assign_207"
  input: "^save/Assign_208"
  input: "^save/Assign_209"
  input: "^save/Assign_21"
  input: "^save/Assign_210"
  input: "^save/Assign_211"
  input: "^save/Assign_212"
  input: "^save/Assign_213"
  input: "^save/Assign_214"
  input: "^save/Assign_215"
  input: "^save/Assign_216"
  input: "^save/Assign_217"
  input: "^save/Assign_218"
  input: "^save/Assign_219"
  input: "^save/Assign_22"
  input: "^save/Assign_220"
  input: "^save/Assign_221"
  input: "^save/Assign_222"
  input: "^save/Assign_223"
  input: "^save/Assign_224"
  input: "^save/Assign_225"
  input: "^save/Assign_226"
  input: "^save/Assign_227"
  input: "^save/Assign_228"
  input: "^save/Assign_229"
  input: "^save/Assign_23"
  input: "^save/Assign_230"
  input: "^save/Assign_231"
  input: "^save/Assign_232"
  input: "^save/Assign_233"
  input: "^save/Assign_234"
  input: "^save/Assign_235"
  input: "^save/Assign_236"
  input: "^save/Assign_237"
  input: "^save/Assign_238"
  input: "^save/Assign_239"
  input: "^save/Assign_24"
  input: "^save/Assign_240"
  input: "^save/Assign_241"
  input: "^save/Assign_242"
  input: "^save/Assign_243"
  input: "^save/Assign_244"
  input: "^save/Assign_245"
  input: "^save/Assign_246"
  input: "^save/Assign_247"
  input: "^save/Assign_248"
  input: "^save/Assign_249"
  input: "^save/Assign_25"
  input: "^save/Assign_250"
  input: "^save/Assign_251"
  input: "^save/Assign_252"
  input: "^save/Assign_253"
  input: "^save/Assign_254"
  input: "^save/Assign_255"
  input: "^save/Assign_256"
  input: "^save/Assign_257"
  input: "^save/Assign_258"
  input: "^save/Assign_259"
  input: "^save/Assign_26"
  input: "^save/Assign_260"
  input: "^save/Assign_261"
  input: "^save/Assign_262"
  input: "^save/Assign_263"
  input: "^save/Assign_264"
  input: "^save/Assign_265"
  input: "^save/Assign_266"
  input: "^save/Assign_267"
  input: "^save/Assign_268"
  input: "^save/Assign_269"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_3"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_4"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
  input: "^save/Assign_48"
  input: "^save/Assign_49"
  input: "^save/Assign_5"
  input: "^save/Assign_50"
  input: "^save/Assign_51"
  input: "^save/Assign_52"
  input: "^save/Assign_53"
  input: "^save/Assign_54"
  input: "^save/Assign_55"
  input: "^save/Assign_56"
  input: "^save/Assign_57"
  input: "^save/Assign_58"
  input: "^save/Assign_59"
  input: "^save/Assign_6"
  input: "^save/Assign_60"
  input: "^save/Assign_61"
  input: "^save/Assign_62"
  input: "^save/Assign_63"
  input: "^save/Assign_64"
  input: "^save/Assign_65"
  input: "^save/Assign_66"
  input: "^save/Assign_67"
  input: "^save/Assign_68"
  input: "^save/Assign_69"
  input: "^save/Assign_7"
  input: "^save/Assign_70"
  input: "^save/Assign_71"
  input: "^save/Assign_72"
  input: "^save/Assign_73"
  input: "^save/Assign_74"
  input: "^save/Assign_75"
  input: "^save/Assign_76"
  input: "^save/Assign_77"
  input: "^save/Assign_78"
  input: "^save/Assign_79"
  input: "^save/Assign_8"
  input: "^save/Assign_80"
  input: "^save/Assign_81"
  input: "^save/Assign_82"
  input: "^save/Assign_83"
  input: "^save/Assign_84"
  input: "^save/Assign_85"
  input: "^save/Assign_86"
  input: "^save/Assign_87"
  input: "^save/Assign_88"
  input: "^save/Assign_89"
  input: "^save/Assign_9"
  input: "^save/Assign_90"
  input: "^save/Assign_91"
  input: "^save/Assign_92"
  input: "^save/Assign_93"
  input: "^save/Assign_94"
  input: "^save/Assign_95"
  input: "^save/Assign_96"
  input: "^save/Assign_97"
  input: "^save/Assign_98"
  input: "^save/Assign_99"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "generator/encoder_1/conv2d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "generator/encoder_1/conv2d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "generator/encoder_2/conv2d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "generator/encoder_2/conv2d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "generator/encoder_2/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "generator/encoder_2/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "generator/encoder_2/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "generator/encoder_2/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "generator/encoder_3/conv2d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "generator/encoder_3/conv2d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "generator/encoder_3/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "generator/encoder_3/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "generator/encoder_3/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "generator/encoder_3/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "generator/encoder_4/conv2d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "generator/encoder_4/conv2d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "generator/encoder_4/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "generator/encoder_4/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "generator/encoder_4/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "generator/encoder_4/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "generator/encoder_5/conv2d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "generator/encoder_5/conv2d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "generator/encoder_5/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "generator/encoder_5/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "generator/encoder_5/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "generator/encoder_5/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "generator/encoder_6/conv2d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "generator/encoder_6/conv2d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "generator/encoder_6/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "generator/encoder_6/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "generator/encoder_6/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "generator/encoder_6/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "generator/encoder_7/conv2d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "generator/encoder_7/conv2d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "generator/encoder_7/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "generator/encoder_7/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "generator/encoder_7/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "generator/encoder_7/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "generator/encoder_8/conv2d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "generator/encoder_8/conv2d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "generator/encoder_8/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "generator/encoder_8/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "generator/encoder_8/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "generator/encoder_8/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "generator/decoder_8/conv2d_transpose/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "generator/decoder_8/conv2d_transpose/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "generator/decoder_8/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "generator/decoder_8/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "generator/decoder_8/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "generator/decoder_8/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "generator/decoder_7/conv2d_transpose/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "generator/decoder_7/conv2d_transpose/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "generator/decoder_7/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "generator/decoder_7/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "generator/decoder_7/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "generator/decoder_7/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "generator/decoder_6/conv2d_transpose/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "generator/decoder_6/conv2d_transpose/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "generator/decoder_6/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "generator/decoder_6/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "generator/decoder_6/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_61"
  op: "IsVariableInitialized"
  input: "generator/decoder_6/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_62"
  op: "IsVariableInitialized"
  input: "generator/decoder_5/conv2d_transpose/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_63"
  op: "IsVariableInitialized"
  input: "generator/decoder_5/conv2d_transpose/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_64"
  op: "IsVariableInitialized"
  input: "generator/decoder_5/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_65"
  op: "IsVariableInitialized"
  input: "generator/decoder_5/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_66"
  op: "IsVariableInitialized"
  input: "generator/decoder_5/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_67"
  op: "IsVariableInitialized"
  input: "generator/decoder_5/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_68"
  op: "IsVariableInitialized"
  input: "generator/decoder_4/conv2d_transpose/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_69"
  op: "IsVariableInitialized"
  input: "generator/decoder_4/conv2d_transpose/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_70"
  op: "IsVariableInitialized"
  input: "generator/decoder_4/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_71"
  op: "IsVariableInitialized"
  input: "generator/decoder_4/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_72"
  op: "IsVariableInitialized"
  input: "generator/decoder_4/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_73"
  op: "IsVariableInitialized"
  input: "generator/decoder_4/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_74"
  op: "IsVariableInitialized"
  input: "generator/decoder_3/conv2d_transpose/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_75"
  op: "IsVariableInitialized"
  input: "generator/decoder_3/conv2d_transpose/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_76"
  op: "IsVariableInitialized"
  input: "generator/decoder_3/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_77"
  op: "IsVariableInitialized"
  input: "generator/decoder_3/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_78"
  op: "IsVariableInitialized"
  input: "generator/decoder_3/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_79"
  op: "IsVariableInitialized"
  input: "generator/decoder_3/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_80"
  op: "IsVariableInitialized"
  input: "generator/decoder_2/conv2d_transpose/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_81"
  op: "IsVariableInitialized"
  input: "generator/decoder_2/conv2d_transpose/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_82"
  op: "IsVariableInitialized"
  input: "generator/decoder_2/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_83"
  op: "IsVariableInitialized"
  input: "generator/decoder_2/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_84"
  op: "IsVariableInitialized"
  input: "generator/decoder_2/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_85"
  op: "IsVariableInitialized"
  input: "generator/decoder_2/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_86"
  op: "IsVariableInitialized"
  input: "generator/decoder_1/conv2d_transpose/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_87"
  op: "IsVariableInitialized"
  input: "generator/decoder_1/conv2d_transpose/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_88"
  op: "IsVariableInitialized"
  input: "discriminator/layer_1/conv2d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_89"
  op: "IsVariableInitialized"
  input: "discriminator/layer_1/conv2d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_90"
  op: "IsVariableInitialized"
  input: "discriminator/layer_2/conv2d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_91"
  op: "IsVariableInitialized"
  input: "discriminator/layer_2/conv2d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_92"
  op: "IsVariableInitialized"
  input: "discriminator/layer_2/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_93"
  op: "IsVariableInitialized"
  input: "discriminator/layer_2/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_94"
  op: "IsVariableInitialized"
  input: "discriminator/layer_2/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_95"
  op: "IsVariableInitialized"
  input: "discriminator/layer_2/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_96"
  op: "IsVariableInitialized"
  input: "discriminator/layer_3/conv2d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_97"
  op: "IsVariableInitialized"
  input: "discriminator/layer_3/conv2d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_98"
  op: "IsVariableInitialized"
  input: "discriminator/layer_3/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_99"
  op: "IsVariableInitialized"
  input: "discriminator/layer_3/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_100"
  op: "IsVariableInitialized"
  input: "discriminator/layer_3/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_101"
  op: "IsVariableInitialized"
  input: "discriminator/layer_3/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_102"
  op: "IsVariableInitialized"
  input: "discriminator/layer_4/conv2d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_103"
  op: "IsVariableInitialized"
  input: "discriminator/layer_4/conv2d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_104"
  op: "IsVariableInitialized"
  input: "discriminator/layer_4/batch_normalization/gamma"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_105"
  op: "IsVariableInitialized"
  input: "discriminator/layer_4/batch_normalization/beta"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_106"
  op: "IsVariableInitialized"
  input: "discriminator/layer_4/batch_normalization/moving_mean"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_107"
  op: "IsVariableInitialized"
  input: "discriminator/layer_4/batch_normalization/moving_variance"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_108"
  op: "IsVariableInitialized"
  input: "discriminator/layer_5/conv2d/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_109"
  op: "IsVariableInitialized"
  input: "discriminator/layer_5/conv2d/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_110"
  op: "IsVariableInitialized"
  input: "discriminator_train/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_111"
  op: "IsVariableInitialized"
  input: "discriminator_train/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_112"
  op: "IsVariableInitialized"
  input: "discriminator/layer_1/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_113"
  op: "IsVariableInitialized"
  input: "discriminator/layer_1/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_114"
  op: "IsVariableInitialized"
  input: "discriminator/layer_1/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_115"
  op: "IsVariableInitialized"
  input: "discriminator/layer_1/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_116"
  op: "IsVariableInitialized"
  input: "discriminator/layer_2/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_117"
  op: "IsVariableInitialized"
  input: "discriminator/layer_2/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_118"
  op: "IsVariableInitialized"
  input: "discriminator/layer_2/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_119"
  op: "IsVariableInitialized"
  input: "discriminator/layer_2/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_120"
  op: "IsVariableInitialized"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_121"
  op: "IsVariableInitialized"
  input: "discriminator/layer_2/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_122"
  op: "IsVariableInitialized"
  input: "discriminator/layer_2/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_123"
  op: "IsVariableInitialized"
  input: "discriminator/layer_2/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_124"
  op: "IsVariableInitialized"
  input: "discriminator/layer_3/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_125"
  op: "IsVariableInitialized"
  input: "discriminator/layer_3/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_126"
  op: "IsVariableInitialized"
  input: "discriminator/layer_3/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_127"
  op: "IsVariableInitialized"
  input: "discriminator/layer_3/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_128"
  op: "IsVariableInitialized"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_129"
  op: "IsVariableInitialized"
  input: "discriminator/layer_3/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_130"
  op: "IsVariableInitialized"
  input: "discriminator/layer_3/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_131"
  op: "IsVariableInitialized"
  input: "discriminator/layer_3/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_132"
  op: "IsVariableInitialized"
  input: "discriminator/layer_4/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_133"
  op: "IsVariableInitialized"
  input: "discriminator/layer_4/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_134"
  op: "IsVariableInitialized"
  input: "discriminator/layer_4/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_135"
  op: "IsVariableInitialized"
  input: "discriminator/layer_4/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_136"
  op: "IsVariableInitialized"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_137"
  op: "IsVariableInitialized"
  input: "discriminator/layer_4/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_138"
  op: "IsVariableInitialized"
  input: "discriminator/layer_4/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_139"
  op: "IsVariableInitialized"
  input: "discriminator/layer_4/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_140"
  op: "IsVariableInitialized"
  input: "discriminator/layer_5/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_141"
  op: "IsVariableInitialized"
  input: "discriminator/layer_5/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_142"
  op: "IsVariableInitialized"
  input: "discriminator/layer_5/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_143"
  op: "IsVariableInitialized"
  input: "discriminator/layer_5/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator/layer_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_144"
  op: "IsVariableInitialized"
  input: "generator_train/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_145"
  op: "IsVariableInitialized"
  input: "generator_train/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_146"
  op: "IsVariableInitialized"
  input: "generator/encoder_1/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_147"
  op: "IsVariableInitialized"
  input: "generator/encoder_1/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_148"
  op: "IsVariableInitialized"
  input: "generator/encoder_1/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_149"
  op: "IsVariableInitialized"
  input: "generator/encoder_1/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_1/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_150"
  op: "IsVariableInitialized"
  input: "generator/encoder_2/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_151"
  op: "IsVariableInitialized"
  input: "generator/encoder_2/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_152"
  op: "IsVariableInitialized"
  input: "generator/encoder_2/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_153"
  op: "IsVariableInitialized"
  input: "generator/encoder_2/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_154"
  op: "IsVariableInitialized"
  input: "generator/encoder_2/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_155"
  op: "IsVariableInitialized"
  input: "generator/encoder_2/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_156"
  op: "IsVariableInitialized"
  input: "generator/encoder_2/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_157"
  op: "IsVariableInitialized"
  input: "generator/encoder_2/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_158"
  op: "IsVariableInitialized"
  input: "generator/encoder_3/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_159"
  op: "IsVariableInitialized"
  input: "generator/encoder_3/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_160"
  op: "IsVariableInitialized"
  input: "generator/encoder_3/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_161"
  op: "IsVariableInitialized"
  input: "generator/encoder_3/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_162"
  op: "IsVariableInitialized"
  input: "generator/encoder_3/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_163"
  op: "IsVariableInitialized"
  input: "generator/encoder_3/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_164"
  op: "IsVariableInitialized"
  input: "generator/encoder_3/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_165"
  op: "IsVariableInitialized"
  input: "generator/encoder_3/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_166"
  op: "IsVariableInitialized"
  input: "generator/encoder_4/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_167"
  op: "IsVariableInitialized"
  input: "generator/encoder_4/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_168"
  op: "IsVariableInitialized"
  input: "generator/encoder_4/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_169"
  op: "IsVariableInitialized"
  input: "generator/encoder_4/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_170"
  op: "IsVariableInitialized"
  input: "generator/encoder_4/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_171"
  op: "IsVariableInitialized"
  input: "generator/encoder_4/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_172"
  op: "IsVariableInitialized"
  input: "generator/encoder_4/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_173"
  op: "IsVariableInitialized"
  input: "generator/encoder_4/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_174"
  op: "IsVariableInitialized"
  input: "generator/encoder_5/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_175"
  op: "IsVariableInitialized"
  input: "generator/encoder_5/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_176"
  op: "IsVariableInitialized"
  input: "generator/encoder_5/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_177"
  op: "IsVariableInitialized"
  input: "generator/encoder_5/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_178"
  op: "IsVariableInitialized"
  input: "generator/encoder_5/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_179"
  op: "IsVariableInitialized"
  input: "generator/encoder_5/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_180"
  op: "IsVariableInitialized"
  input: "generator/encoder_5/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_181"
  op: "IsVariableInitialized"
  input: "generator/encoder_5/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_182"
  op: "IsVariableInitialized"
  input: "generator/encoder_6/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_183"
  op: "IsVariableInitialized"
  input: "generator/encoder_6/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_184"
  op: "IsVariableInitialized"
  input: "generator/encoder_6/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_185"
  op: "IsVariableInitialized"
  input: "generator/encoder_6/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_186"
  op: "IsVariableInitialized"
  input: "generator/encoder_6/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_187"
  op: "IsVariableInitialized"
  input: "generator/encoder_6/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_188"
  op: "IsVariableInitialized"
  input: "generator/encoder_6/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_189"
  op: "IsVariableInitialized"
  input: "generator/encoder_6/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_190"
  op: "IsVariableInitialized"
  input: "generator/encoder_7/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_191"
  op: "IsVariableInitialized"
  input: "generator/encoder_7/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_192"
  op: "IsVariableInitialized"
  input: "generator/encoder_7/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_193"
  op: "IsVariableInitialized"
  input: "generator/encoder_7/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_194"
  op: "IsVariableInitialized"
  input: "generator/encoder_7/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_195"
  op: "IsVariableInitialized"
  input: "generator/encoder_7/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_196"
  op: "IsVariableInitialized"
  input: "generator/encoder_7/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_197"
  op: "IsVariableInitialized"
  input: "generator/encoder_7/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_198"
  op: "IsVariableInitialized"
  input: "generator/encoder_8/conv2d/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_199"
  op: "IsVariableInitialized"
  input: "generator/encoder_8/conv2d/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_200"
  op: "IsVariableInitialized"
  input: "generator/encoder_8/conv2d/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_201"
  op: "IsVariableInitialized"
  input: "generator/encoder_8/conv2d/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/conv2d/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_202"
  op: "IsVariableInitialized"
  input: "generator/encoder_8/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_203"
  op: "IsVariableInitialized"
  input: "generator/encoder_8/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_204"
  op: "IsVariableInitialized"
  input: "generator/encoder_8/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_205"
  op: "IsVariableInitialized"
  input: "generator/encoder_8/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/encoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_206"
  op: "IsVariableInitialized"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_207"
  op: "IsVariableInitialized"
  input: "generator/decoder_8/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_208"
  op: "IsVariableInitialized"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_209"
  op: "IsVariableInitialized"
  input: "generator/decoder_8/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_210"
  op: "IsVariableInitialized"
  input: "generator/decoder_8/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_211"
  op: "IsVariableInitialized"
  input: "generator/decoder_8/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_212"
  op: "IsVariableInitialized"
  input: "generator/decoder_8/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_213"
  op: "IsVariableInitialized"
  input: "generator/decoder_8/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_8/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_214"
  op: "IsVariableInitialized"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_215"
  op: "IsVariableInitialized"
  input: "generator/decoder_7/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_216"
  op: "IsVariableInitialized"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_217"
  op: "IsVariableInitialized"
  input: "generator/decoder_7/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_218"
  op: "IsVariableInitialized"
  input: "generator/decoder_7/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_219"
  op: "IsVariableInitialized"
  input: "generator/decoder_7/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_220"
  op: "IsVariableInitialized"
  input: "generator/decoder_7/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_221"
  op: "IsVariableInitialized"
  input: "generator/decoder_7/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_7/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_222"
  op: "IsVariableInitialized"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_223"
  op: "IsVariableInitialized"
  input: "generator/decoder_6/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_224"
  op: "IsVariableInitialized"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_225"
  op: "IsVariableInitialized"
  input: "generator/decoder_6/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_226"
  op: "IsVariableInitialized"
  input: "generator/decoder_6/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_227"
  op: "IsVariableInitialized"
  input: "generator/decoder_6/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_228"
  op: "IsVariableInitialized"
  input: "generator/decoder_6/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_229"
  op: "IsVariableInitialized"
  input: "generator/decoder_6/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_6/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_230"
  op: "IsVariableInitialized"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_231"
  op: "IsVariableInitialized"
  input: "generator/decoder_5/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_232"
  op: "IsVariableInitialized"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_233"
  op: "IsVariableInitialized"
  input: "generator/decoder_5/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_234"
  op: "IsVariableInitialized"
  input: "generator/decoder_5/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_235"
  op: "IsVariableInitialized"
  input: "generator/decoder_5/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_236"
  op: "IsVariableInitialized"
  input: "generator/decoder_5/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_237"
  op: "IsVariableInitialized"
  input: "generator/decoder_5/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_5/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_238"
  op: "IsVariableInitialized"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_239"
  op: "IsVariableInitialized"
  input: "generator/decoder_4/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_240"
  op: "IsVariableInitialized"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_241"
  op: "IsVariableInitialized"
  input: "generator/decoder_4/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_242"
  op: "IsVariableInitialized"
  input: "generator/decoder_4/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_243"
  op: "IsVariableInitialized"
  input: "generator/decoder_4/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_244"
  op: "IsVariableInitialized"
  input: "generator/decoder_4/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_245"
  op: "IsVariableInitialized"
  input: "generator/decoder_4/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_4/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_246"
  op: "IsVariableInitialized"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_247"
  op: "IsVariableInitialized"
  input: "generator/decoder_3/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_248"
  op: "IsVariableInitialized"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_249"
  op: "IsVariableInitialized"
  input: "generator/decoder_3/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_250"
  op: "IsVariableInitialized"
  input: "generator/decoder_3/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_251"
  op: "IsVariableInitialized"
  input: "generator/decoder_3/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_252"
  op: "IsVariableInitialized"
  input: "generator/decoder_3/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_253"
  op: "IsVariableInitialized"
  input: "generator/decoder_3/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_3/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_254"
  op: "IsVariableInitialized"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_255"
  op: "IsVariableInitialized"
  input: "generator/decoder_2/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_256"
  op: "IsVariableInitialized"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_257"
  op: "IsVariableInitialized"
  input: "generator/decoder_2/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_258"
  op: "IsVariableInitialized"
  input: "generator/decoder_2/batch_normalization/gamma/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_259"
  op: "IsVariableInitialized"
  input: "generator/decoder_2/batch_normalization/gamma/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_260"
  op: "IsVariableInitialized"
  input: "generator/decoder_2/batch_normalization/beta/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_261"
  op: "IsVariableInitialized"
  input: "generator/decoder_2/batch_normalization/beta/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_2/batch_normalization/beta"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_262"
  op: "IsVariableInitialized"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_263"
  op: "IsVariableInitialized"
  input: "generator/decoder_1/conv2d_transpose/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_264"
  op: "IsVariableInitialized"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_265"
  op: "IsVariableInitialized"
  input: "generator/decoder_1/conv2d_transpose/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator/decoder_1/conv2d_transpose/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_266"
  op: "IsVariableInitialized"
  input: "discriminator_loss/Mean/ExponentialMovingAverage"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@discriminator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_267"
  op: "IsVariableInitialized"
  input: "generator_loss/Mean/ExponentialMovingAverage"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_268"
  op: "IsVariableInitialized"
  input: "generator_loss/Mean_1/ExponentialMovingAverage"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@generator_loss/Mean_1/ExponentialMovingAverage"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_269"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  input: "report_uninitialized_variables/IsVariableInitialized_28"
  input: "report_uninitialized_variables/IsVariableInitialized_29"
  input: "report_uninitialized_variables/IsVariableInitialized_30"
  input: "report_uninitialized_variables/IsVariableInitialized_31"
  input: "report_uninitialized_variables/IsVariableInitialized_32"
  input: "report_uninitialized_variables/IsVariableInitialized_33"
  input: "report_uninitialized_variables/IsVariableInitialized_34"
  input: "report_uninitialized_variables/IsVariableInitialized_35"
  input: "report_uninitialized_variables/IsVariableInitialized_36"
  input: "report_uninitialized_variables/IsVariableInitialized_37"
  input: "report_uninitialized_variables/IsVariableInitialized_38"
  input: "report_uninitialized_variables/IsVariableInitialized_39"
  input: "report_uninitialized_variables/IsVariableInitialized_40"
  input: "report_uninitialized_variables/IsVariableInitialized_41"
  input: "report_uninitialized_variables/IsVariableInitialized_42"
  input: "report_uninitialized_variables/IsVariableInitialized_43"
  input: "report_uninitialized_variables/IsVariableInitialized_44"
  input: "report_uninitialized_variables/IsVariableInitialized_45"
  input: "report_uninitialized_variables/IsVariableInitialized_46"
  input: "report_uninitialized_variables/IsVariableInitialized_47"
  input: "report_uninitialized_variables/IsVariableInitialized_48"
  input: "report_uninitialized_variables/IsVariableInitialized_49"
  input: "report_uninitialized_variables/IsVariableInitialized_50"
  input: "report_uninitialized_variables/IsVariableInitialized_51"
  input: "report_uninitialized_variables/IsVariableInitialized_52"
  input: "report_uninitialized_variables/IsVariableInitialized_53"
  input: "report_uninitialized_variables/IsVariableInitialized_54"
  input: "report_uninitialized_variables/IsVariableInitialized_55"
  input: "report_uninitialized_variables/IsVariableInitialized_56"
  input: "report_uninitialized_variables/IsVariableInitialized_57"
  input: "report_uninitialized_variables/IsVariableInitialized_58"
  input: "report_uninitialized_variables/IsVariableInitialized_59"
  input: "report_uninitialized_variables/IsVariableInitialized_60"
  input: "report_uninitialized_variables/IsVariableInitialized_61"
  input: "report_uninitialized_variables/IsVariableInitialized_62"
  input: "report_uninitialized_variables/IsVariableInitialized_63"
  input: "report_uninitialized_variables/IsVariableInitialized_64"
  input: "report_uninitialized_variables/IsVariableInitialized_65"
  input: "report_uninitialized_variables/IsVariableInitialized_66"
  input: "report_uninitialized_variables/IsVariableInitialized_67"
  input: "report_uninitialized_variables/IsVariableInitialized_68"
  input: "report_uninitialized_variables/IsVariableInitialized_69"
  input: "report_uninitialized_variables/IsVariableInitialized_70"
  input: "report_uninitialized_variables/IsVariableInitialized_71"
  input: "report_uninitialized_variables/IsVariableInitialized_72"
  input: "report_uninitialized_variables/IsVariableInitialized_73"
  input: "report_uninitialized_variables/IsVariableInitialized_74"
  input: "report_uninitialized_variables/IsVariableInitialized_75"
  input: "report_uninitialized_variables/IsVariableInitialized_76"
  input: "report_uninitialized_variables/IsVariableInitialized_77"
  input: "report_uninitialized_variables/IsVariableInitialized_78"
  input: "report_uninitialized_variables/IsVariableInitialized_79"
  input: "report_uninitialized_variables/IsVariableInitialized_80"
  input: "report_uninitialized_variables/IsVariableInitialized_81"
  input: "report_uninitialized_variables/IsVariableInitialized_82"
  input: "report_uninitialized_variables/IsVariableInitialized_83"
  input: "report_uninitialized_variables/IsVariableInitialized_84"
  input: "report_uninitialized_variables/IsVariableInitialized_85"
  input: "report_uninitialized_variables/IsVariableInitialized_86"
  input: "report_uninitialized_variables/IsVariableInitialized_87"
  input: "report_uninitialized_variables/IsVariableInitialized_88"
  input: "report_uninitialized_variables/IsVariableInitialized_89"
  input: "report_uninitialized_variables/IsVariableInitialized_90"
  input: "report_uninitialized_variables/IsVariableInitialized_91"
  input: "report_uninitialized_variables/IsVariableInitialized_92"
  input: "report_uninitialized_variables/IsVariableInitialized_93"
  input: "report_uninitialized_variables/IsVariableInitialized_94"
  input: "report_uninitialized_variables/IsVariableInitialized_95"
  input: "report_uninitialized_variables/IsVariableInitialized_96"
  input: "report_uninitialized_variables/IsVariableInitialized_97"
  input: "report_uninitialized_variables/IsVariableInitialized_98"
  input: "report_uninitialized_variables/IsVariableInitialized_99"
  input: "report_uninitialized_variables/IsVariableInitialized_100"
  input: "report_uninitialized_variables/IsVariableInitialized_101"
  input: "report_uninitialized_variables/IsVariableInitialized_102"
  input: "report_uninitialized_variables/IsVariableInitialized_103"
  input: "report_uninitialized_variables/IsVariableInitialized_104"
  input: "report_uninitialized_variables/IsVariableInitialized_105"
  input: "report_uninitialized_variables/IsVariableInitialized_106"
  input: "report_uninitialized_variables/IsVariableInitialized_107"
  input: "report_uninitialized_variables/IsVariableInitialized_108"
  input: "report_uninitialized_variables/IsVariableInitialized_109"
  input: "report_uninitialized_variables/IsVariableInitialized_110"
  input: "report_uninitialized_variables/IsVariableInitialized_111"
  input: "report_uninitialized_variables/IsVariableInitialized_112"
  input: "report_uninitialized_variables/IsVariableInitialized_113"
  input: "report_uninitialized_variables/IsVariableInitialized_114"
  input: "report_uninitialized_variables/IsVariableInitialized_115"
  input: "report_uninitialized_variables/IsVariableInitialized_116"
  input: "report_uninitialized_variables/IsVariableInitialized_117"
  input: "report_uninitialized_variables/IsVariableInitialized_118"
  input: "report_uninitialized_variables/IsVariableInitialized_119"
  input: "report_uninitialized_variables/IsVariableInitialized_120"
  input: "report_uninitialized_variables/IsVariableInitialized_121"
  input: "report_uninitialized_variables/IsVariableInitialized_122"
  input: "report_uninitialized_variables/IsVariableInitialized_123"
  input: "report_uninitialized_variables/IsVariableInitialized_124"
  input: "report_uninitialized_variables/IsVariableInitialized_125"
  input: "report_uninitialized_variables/IsVariableInitialized_126"
  input: "report_uninitialized_variables/IsVariableInitialized_127"
  input: "report_uninitialized_variables/IsVariableInitialized_128"
  input: "report_uninitialized_variables/IsVariableInitialized_129"
  input: "report_uninitialized_variables/IsVariableInitialized_130"
  input: "report_uninitialized_variables/IsVariableInitialized_131"
  input: "report_uninitialized_variables/IsVariableInitialized_132"
  input: "report_uninitialized_variables/IsVariableInitialized_133"
  input: "report_uninitialized_variables/IsVariableInitialized_134"
  input: "report_uninitialized_variables/IsVariableInitialized_135"
  input: "report_uninitialized_variables/IsVariableInitialized_136"
  input: "report_uninitialized_variables/IsVariableInitialized_137"
  input: "report_uninitialized_variables/IsVariableInitialized_138"
  input: "report_uninitialized_variables/IsVariableInitialized_139"
  input: "report_uninitialized_variables/IsVariableInitialized_140"
  input: "report_uninitialized_variables/IsVariableInitialized_141"
  input: "report_uninitialized_variables/IsVariableInitialized_142"
  input: "report_uninitialized_variables/IsVariableInitialized_143"
  input: "report_uninitialized_variables/IsVariableInitialized_144"
  input: "report_uninitialized_variables/IsVariableInitialized_145"
  input: "report_uninitialized_variables/IsVariableInitialized_146"
  input: "report_uninitialized_variables/IsVariableInitialized_147"
  input: "report_uninitialized_variables/IsVariableInitialized_148"
  input: "report_uninitialized_variables/IsVariableInitialized_149"
  input: "report_uninitialized_variables/IsVariableInitialized_150"
  input: "report_uninitialized_variables/IsVariableInitialized_151"
  input: "report_uninitialized_variables/IsVariableInitialized_152"
  input: "report_uninitialized_variables/IsVariableInitialized_153"
  input: "report_uninitialized_variables/IsVariableInitialized_154"
  input: "report_uninitialized_variables/IsVariableInitialized_155"
  input: "report_uninitialized_variables/IsVariableInitialized_156"
  input: "report_uninitialized_variables/IsVariableInitialized_157"
  input: "report_uninitialized_variables/IsVariableInitialized_158"
  input: "report_uninitialized_variables/IsVariableInitialized_159"
  input: "report_uninitialized_variables/IsVariableInitialized_160"
  input: "report_uninitialized_variables/IsVariableInitialized_161"
  input: "report_uninitialized_variables/IsVariableInitialized_162"
  input: "report_uninitialized_variables/IsVariableInitialized_163"
  input: "report_uninitialized_variables/IsVariableInitialized_164"
  input: "report_uninitialized_variables/IsVariableInitialized_165"
  input: "report_uninitialized_variables/IsVariableInitialized_166"
  input: "report_uninitialized_variables/IsVariableInitialized_167"
  input: "report_uninitialized_variables/IsVariableInitialized_168"
  input: "report_uninitialized_variables/IsVariableInitialized_169"
  input: "report_uninitialized_variables/IsVariableInitialized_170"
  input: "report_uninitialized_variables/IsVariableInitialized_171"
  input: "report_uninitialized_variables/IsVariableInitialized_172"
  input: "report_uninitialized_variables/IsVariableInitialized_173"
  input: "report_uninitialized_variables/IsVariableInitialized_174"
  input: "report_uninitialized_variables/IsVariableInitialized_175"
  input: "report_uninitialized_variables/IsVariableInitialized_176"
  input: "report_uninitialized_variables/IsVariableInitialized_177"
  input: "report_uninitialized_variables/IsVariableInitialized_178"
  input: "report_uninitialized_variables/IsVariableInitialized_179"
  input: "report_uninitialized_variables/IsVariableInitialized_180"
  input: "report_uninitialized_variables/IsVariableInitialized_181"
  input: "report_uninitialized_variables/IsVariableInitialized_182"
  input: "report_uninitialized_variables/IsVariableInitialized_183"
  input: "report_uninitialized_variables/IsVariableInitialized_184"
  input: "report_uninitialized_variables/IsVariableInitialized_185"
  input: "report_uninitialized_variables/IsVariableInitialized_186"
  input: "report_uninitialized_variables/IsVariableInitialized_187"
  input: "report_uninitialized_variables/IsVariableInitialized_188"
  input: "report_uninitialized_variables/IsVariableInitialized_189"
  input: "report_uninitialized_variables/IsVariableInitialized_190"
  input: "report_uninitialized_variables/IsVariableInitialized_191"
  input: "report_uninitialized_variables/IsVariableInitialized_192"
  input: "report_uninitialized_variables/IsVariableInitialized_193"
  input: "report_uninitialized_variables/IsVariableInitialized_194"
  input: "report_uninitialized_variables/IsVariableInitialized_195"
  input: "report_uninitialized_variables/IsVariableInitialized_196"
  input: "report_uninitialized_variables/IsVariableInitialized_197"
  input: "report_uninitialized_variables/IsVariableInitialized_198"
  input: "report_uninitialized_variables/IsVariableInitialized_199"
  input: "report_uninitialized_variables/IsVariableInitialized_200"
  input: "report_uninitialized_variables/IsVariableInitialized_201"
  input: "report_uninitialized_variables/IsVariableInitialized_202"
  input: "report_uninitialized_variables/IsVariableInitialized_203"
  input: "report_uninitialized_variables/IsVariableInitialized_204"
  input: "report_uninitialized_variables/IsVariableInitialized_205"
  input: "report_uninitialized_variables/IsVariableInitialized_206"
  input: "report_uninitialized_variables/IsVariableInitialized_207"
  input: "report_uninitialized_variables/IsVariableInitialized_208"
  input: "report_uninitialized_variables/IsVariableInitialized_209"
  input: "report_uninitialized_variables/IsVariableInitialized_210"
  input: "report_uninitialized_variables/IsVariableInitialized_211"
  input: "report_uninitialized_variables/IsVariableInitialized_212"
  input: "report_uninitialized_variables/IsVariableInitialized_213"
  input: "report_uninitialized_variables/IsVariableInitialized_214"
  input: "report_uninitialized_variables/IsVariableInitialized_215"
  input: "report_uninitialized_variables/IsVariableInitialized_216"
  input: "report_uninitialized_variables/IsVariableInitialized_217"
  input: "report_uninitialized_variables/IsVariableInitialized_218"
  input: "report_uninitialized_variables/IsVariableInitialized_219"
  input: "report_uninitialized_variables/IsVariableInitialized_220"
  input: "report_uninitialized_variables/IsVariableInitialized_221"
  input: "report_uninitialized_variables/IsVariableInitialized_222"
  input: "report_uninitialized_variables/IsVariableInitialized_223"
  input: "report_uninitialized_variables/IsVariableInitialized_224"
  input: "report_uninitialized_variables/IsVariableInitialized_225"
  input: "report_uninitialized_variables/IsVariableInitialized_226"
  input: "report_uninitialized_variables/IsVariableInitialized_227"
  input: "report_uninitialized_variables/IsVariableInitialized_228"
  input: "report_uninitialized_variables/IsVariableInitialized_229"
  input: "report_uninitialized_variables/IsVariableInitialized_230"
  input: "report_uninitialized_variables/IsVariableInitialized_231"
  input: "report_uninitialized_variables/IsVariableInitialized_232"
  input: "report_uninitialized_variables/IsVariableInitialized_233"
  input: "report_uninitialized_variables/IsVariableInitialized_234"
  input: "report_uninitialized_variables/IsVariableInitialized_235"
  input: "report_uninitialized_variables/IsVariableInitialized_236"
  input: "report_uninitialized_variables/IsVariableInitialized_237"
  input: "report_uninitialized_variables/IsVariableInitialized_238"
  input: "report_uninitialized_variables/IsVariableInitialized_239"
  input: "report_uninitialized_variables/IsVariableInitialized_240"
  input: "report_uninitialized_variables/IsVariableInitialized_241"
  input: "report_uninitialized_variables/IsVariableInitialized_242"
  input: "report_uninitialized_variables/IsVariableInitialized_243"
  input: "report_uninitialized_variables/IsVariableInitialized_244"
  input: "report_uninitialized_variables/IsVariableInitialized_245"
  input: "report_uninitialized_variables/IsVariableInitialized_246"
  input: "report_uninitialized_variables/IsVariableInitialized_247"
  input: "report_uninitialized_variables/IsVariableInitialized_248"
  input: "report_uninitialized_variables/IsVariableInitialized_249"
  input: "report_uninitialized_variables/IsVariableInitialized_250"
  input: "report_uninitialized_variables/IsVariableInitialized_251"
  input: "report_uninitialized_variables/IsVariableInitialized_252"
  input: "report_uninitialized_variables/IsVariableInitialized_253"
  input: "report_uninitialized_variables/IsVariableInitialized_254"
  input: "report_uninitialized_variables/IsVariableInitialized_255"
  input: "report_uninitialized_variables/IsVariableInitialized_256"
  input: "report_uninitialized_variables/IsVariableInitialized_257"
  input: "report_uninitialized_variables/IsVariableInitialized_258"
  input: "report_uninitialized_variables/IsVariableInitialized_259"
  input: "report_uninitialized_variables/IsVariableInitialized_260"
  input: "report_uninitialized_variables/IsVariableInitialized_261"
  input: "report_uninitialized_variables/IsVariableInitialized_262"
  input: "report_uninitialized_variables/IsVariableInitialized_263"
  input: "report_uninitialized_variables/IsVariableInitialized_264"
  input: "report_uninitialized_variables/IsVariableInitialized_265"
  input: "report_uninitialized_variables/IsVariableInitialized_266"
  input: "report_uninitialized_variables/IsVariableInitialized_267"
  input: "report_uninitialized_variables/IsVariableInitialized_268"
  input: "report_uninitialized_variables/IsVariableInitialized_269"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 270
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 270
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 270
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 270
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 270
          }
        }
        string_val: "generator/encoder_1/conv2d/kernel"
        string_val: "generator/encoder_1/conv2d/bias"
        string_val: "generator/encoder_2/conv2d/kernel"
        string_val: "generator/encoder_2/conv2d/bias"
        string_val: "generator/encoder_2/batch_normalization/gamma"
        string_val: "generator/encoder_2/batch_normalization/beta"
        string_val: "generator/encoder_2/batch_normalization/moving_mean"
        string_val: "generator/encoder_2/batch_normalization/moving_variance"
        string_val: "generator/encoder_3/conv2d/kernel"
        string_val: "generator/encoder_3/conv2d/bias"
        string_val: "generator/encoder_3/batch_normalization/gamma"
        string_val: "generator/encoder_3/batch_normalization/beta"
        string_val: "generator/encoder_3/batch_normalization/moving_mean"
        string_val: "generator/encoder_3/batch_normalization/moving_variance"
        string_val: "generator/encoder_4/conv2d/kernel"
        string_val: "generator/encoder_4/conv2d/bias"
        string_val: "generator/encoder_4/batch_normalization/gamma"
        string_val: "generator/encoder_4/batch_normalization/beta"
        string_val: "generator/encoder_4/batch_normalization/moving_mean"
        string_val: "generator/encoder_4/batch_normalization/moving_variance"
        string_val: "generator/encoder_5/conv2d/kernel"
        string_val: "generator/encoder_5/conv2d/bias"
        string_val: "generator/encoder_5/batch_normalization/gamma"
        string_val: "generator/encoder_5/batch_normalization/beta"
        string_val: "generator/encoder_5/batch_normalization/moving_mean"
        string_val: "generator/encoder_5/batch_normalization/moving_variance"
        string_val: "generator/encoder_6/conv2d/kernel"
        string_val: "generator/encoder_6/conv2d/bias"
        string_val: "generator/encoder_6/batch_normalization/gamma"
        string_val: "generator/encoder_6/batch_normalization/beta"
        string_val: "generator/encoder_6/batch_normalization/moving_mean"
        string_val: "generator/encoder_6/batch_normalization/moving_variance"
        string_val: "generator/encoder_7/conv2d/kernel"
        string_val: "generator/encoder_7/conv2d/bias"
        string_val: "generator/encoder_7/batch_normalization/gamma"
        string_val: "generator/encoder_7/batch_normalization/beta"
        string_val: "generator/encoder_7/batch_normalization/moving_mean"
        string_val: "generator/encoder_7/batch_normalization/moving_variance"
        string_val: "generator/encoder_8/conv2d/kernel"
        string_val: "generator/encoder_8/conv2d/bias"
        string_val: "generator/encoder_8/batch_normalization/gamma"
        string_val: "generator/encoder_8/batch_normalization/beta"
        string_val: "generator/encoder_8/batch_normalization/moving_mean"
        string_val: "generator/encoder_8/batch_normalization/moving_variance"
        string_val: "generator/decoder_8/conv2d_transpose/kernel"
        string_val: "generator/decoder_8/conv2d_transpose/bias"
        string_val: "generator/decoder_8/batch_normalization/gamma"
        string_val: "generator/decoder_8/batch_normalization/beta"
        string_val: "generator/decoder_8/batch_normalization/moving_mean"
        string_val: "generator/decoder_8/batch_normalization/moving_variance"
        string_val: "generator/decoder_7/conv2d_transpose/kernel"
        string_val: "generator/decoder_7/conv2d_transpose/bias"
        string_val: "generator/decoder_7/batch_normalization/gamma"
        string_val: "generator/decoder_7/batch_normalization/beta"
        string_val: "generator/decoder_7/batch_normalization/moving_mean"
        string_val: "generator/decoder_7/batch_normalization/moving_variance"
        string_val: "generator/decoder_6/conv2d_transpose/kernel"
        string_val: "generator/decoder_6/conv2d_transpose/bias"
        string_val: "generator/decoder_6/batch_normalization/gamma"
        string_val: "generator/decoder_6/batch_normalization/beta"
        string_val: "generator/decoder_6/batch_normalization/moving_mean"
        string_val: "generator/decoder_6/batch_normalization/moving_variance"
        string_val: "generator/decoder_5/conv2d_transpose/kernel"
        string_val: "generator/decoder_5/conv2d_transpose/bias"
        string_val: "generator/decoder_5/batch_normalization/gamma"
        string_val: "generator/decoder_5/batch_normalization/beta"
        string_val: "generator/decoder_5/batch_normalization/moving_mean"
        string_val: "generator/decoder_5/batch_normalization/moving_variance"
        string_val: "generator/decoder_4/conv2d_transpose/kernel"
        string_val: "generator/decoder_4/conv2d_transpose/bias"
        string_val: "generator/decoder_4/batch_normalization/gamma"
        string_val: "generator/decoder_4/batch_normalization/beta"
        string_val: "generator/decoder_4/batch_normalization/moving_mean"
        string_val: "generator/decoder_4/batch_normalization/moving_variance"
        string_val: "generator/decoder_3/conv2d_transpose/kernel"
        string_val: "generator/decoder_3/conv2d_transpose/bias"
        string_val: "generator/decoder_3/batch_normalization/gamma"
        string_val: "generator/decoder_3/batch_normalization/beta"
        string_val: "generator/decoder_3/batch_normalization/moving_mean"
        string_val: "generator/decoder_3/batch_normalization/moving_variance"
        string_val: "generator/decoder_2/conv2d_transpose/kernel"
        string_val: "generator/decoder_2/conv2d_transpose/bias"
        string_val: "generator/decoder_2/batch_normalization/gamma"
        string_val: "generator/decoder_2/batch_normalization/beta"
        string_val: "generator/decoder_2/batch_normalization/moving_mean"
        string_val: "generator/decoder_2/batch_normalization/moving_variance"
        string_val: "generator/decoder_1/conv2d_transpose/kernel"
        string_val: "generator/decoder_1/conv2d_transpose/bias"
        string_val: "discriminator/layer_1/conv2d/kernel"
        string_val: "discriminator/layer_1/conv2d/bias"
        string_val: "discriminator/layer_2/conv2d/kernel"
        string_val: "discriminator/layer_2/conv2d/bias"
        string_val: "discriminator/layer_2/batch_normalization/gamma"
        string_val: "discriminator/layer_2/batch_normalization/beta"
        string_val: "discriminator/layer_2/batch_normalization/moving_mean"
        string_val: "discriminator/layer_2/batch_normalization/moving_variance"
        string_val: "discriminator/layer_3/conv2d/kernel"
        string_val: "discriminator/layer_3/conv2d/bias"
        string_val: "discriminator/layer_3/batch_normalization/gamma"
        string_val: "discriminator/layer_3/batch_normalization/beta"
        string_val: "discriminator/layer_3/batch_normalization/moving_mean"
        string_val: "discriminator/layer_3/batch_normalization/moving_variance"
        string_val: "discriminator/layer_4/conv2d/kernel"
        string_val: "discriminator/layer_4/conv2d/bias"
        string_val: "discriminator/layer_4/batch_normalization/gamma"
        string_val: "discriminator/layer_4/batch_normalization/beta"
        string_val: "discriminator/layer_4/batch_normalization/moving_mean"
        string_val: "discriminator/layer_4/batch_normalization/moving_variance"
        string_val: "discriminator/layer_5/conv2d/kernel"
        string_val: "discriminator/layer_5/conv2d/bias"
        string_val: "discriminator_train/beta1_power"
        string_val: "discriminator_train/beta2_power"
        string_val: "discriminator/layer_1/conv2d/kernel/Adam"
        string_val: "discriminator/layer_1/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_1/conv2d/bias/Adam"
        string_val: "discriminator/layer_1/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_2/conv2d/kernel/Adam"
        string_val: "discriminator/layer_2/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_2/conv2d/bias/Adam"
        string_val: "discriminator/layer_2/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_2/batch_normalization/gamma/Adam"
        string_val: "discriminator/layer_2/batch_normalization/gamma/Adam_1"
        string_val: "discriminator/layer_2/batch_normalization/beta/Adam"
        string_val: "discriminator/layer_2/batch_normalization/beta/Adam_1"
        string_val: "discriminator/layer_3/conv2d/kernel/Adam"
        string_val: "discriminator/layer_3/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_3/conv2d/bias/Adam"
        string_val: "discriminator/layer_3/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_3/batch_normalization/gamma/Adam"
        string_val: "discriminator/layer_3/batch_normalization/gamma/Adam_1"
        string_val: "discriminator/layer_3/batch_normalization/beta/Adam"
        string_val: "discriminator/layer_3/batch_normalization/beta/Adam_1"
        string_val: "discriminator/layer_4/conv2d/kernel/Adam"
        string_val: "discriminator/layer_4/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_4/conv2d/bias/Adam"
        string_val: "discriminator/layer_4/conv2d/bias/Adam_1"
        string_val: "discriminator/layer_4/batch_normalization/gamma/Adam"
        string_val: "discriminator/layer_4/batch_normalization/gamma/Adam_1"
        string_val: "discriminator/layer_4/batch_normalization/beta/Adam"
        string_val: "discriminator/layer_4/batch_normalization/beta/Adam_1"
        string_val: "discriminator/layer_5/conv2d/kernel/Adam"
        string_val: "discriminator/layer_5/conv2d/kernel/Adam_1"
        string_val: "discriminator/layer_5/conv2d/bias/Adam"
        string_val: "discriminator/layer_5/conv2d/bias/Adam_1"
        string_val: "generator_train/beta1_power"
        string_val: "generator_train/beta2_power"
        string_val: "generator/encoder_1/conv2d/kernel/Adam"
        string_val: "generator/encoder_1/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_1/conv2d/bias/Adam"
        string_val: "generator/encoder_1/conv2d/bias/Adam_1"
        string_val: "generator/encoder_2/conv2d/kernel/Adam"
        string_val: "generator/encoder_2/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_2/conv2d/bias/Adam"
        string_val: "generator/encoder_2/conv2d/bias/Adam_1"
        string_val: "generator/encoder_2/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_2/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_2/batch_normalization/beta/Adam"
        string_val: "generator/encoder_2/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_3/conv2d/kernel/Adam"
        string_val: "generator/encoder_3/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_3/conv2d/bias/Adam"
        string_val: "generator/encoder_3/conv2d/bias/Adam_1"
        string_val: "generator/encoder_3/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_3/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_3/batch_normalization/beta/Adam"
        string_val: "generator/encoder_3/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_4/conv2d/kernel/Adam"
        string_val: "generator/encoder_4/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_4/conv2d/bias/Adam"
        string_val: "generator/encoder_4/conv2d/bias/Adam_1"
        string_val: "generator/encoder_4/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_4/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_4/batch_normalization/beta/Adam"
        string_val: "generator/encoder_4/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_5/conv2d/kernel/Adam"
        string_val: "generator/encoder_5/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_5/conv2d/bias/Adam"
        string_val: "generator/encoder_5/conv2d/bias/Adam_1"
        string_val: "generator/encoder_5/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_5/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_5/batch_normalization/beta/Adam"
        string_val: "generator/encoder_5/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_6/conv2d/kernel/Adam"
        string_val: "generator/encoder_6/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_6/conv2d/bias/Adam"
        string_val: "generator/encoder_6/conv2d/bias/Adam_1"
        string_val: "generator/encoder_6/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_6/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_6/batch_normalization/beta/Adam"
        string_val: "generator/encoder_6/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_7/conv2d/kernel/Adam"
        string_val: "generator/encoder_7/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_7/conv2d/bias/Adam"
        string_val: "generator/encoder_7/conv2d/bias/Adam_1"
        string_val: "generator/encoder_7/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_7/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_7/batch_normalization/beta/Adam"
        string_val: "generator/encoder_7/batch_normalization/beta/Adam_1"
        string_val: "generator/encoder_8/conv2d/kernel/Adam"
        string_val: "generator/encoder_8/conv2d/kernel/Adam_1"
        string_val: "generator/encoder_8/conv2d/bias/Adam"
        string_val: "generator/encoder_8/conv2d/bias/Adam_1"
        string_val: "generator/encoder_8/batch_normalization/gamma/Adam"
        string_val: "generator/encoder_8/batch_normalization/gamma/Adam_1"
        string_val: "generator/encoder_8/batch_normalization/beta/Adam"
        string_val: "generator/encoder_8/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_8/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_8/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_8/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_8/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_8/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_8/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_8/batch_normalization/beta/Adam"
        string_val: "generator/decoder_8/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_7/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_7/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_7/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_7/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_7/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_7/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_7/batch_normalization/beta/Adam"
        string_val: "generator/decoder_7/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_6/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_6/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_6/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_6/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_6/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_6/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_6/batch_normalization/beta/Adam"
        string_val: "generator/decoder_6/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_5/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_5/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_5/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_5/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_5/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_5/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_5/batch_normalization/beta/Adam"
        string_val: "generator/decoder_5/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_4/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_4/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_4/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_4/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_4/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_4/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_4/batch_normalization/beta/Adam"
        string_val: "generator/decoder_4/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_3/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_3/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_3/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_3/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_3/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_3/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_3/batch_normalization/beta/Adam"
        string_val: "generator/decoder_3/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_2/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_2/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_2/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_2/conv2d_transpose/bias/Adam_1"
        string_val: "generator/decoder_2/batch_normalization/gamma/Adam"
        string_val: "generator/decoder_2/batch_normalization/gamma/Adam_1"
        string_val: "generator/decoder_2/batch_normalization/beta/Adam"
        string_val: "generator/decoder_2/batch_normalization/beta/Adam_1"
        string_val: "generator/decoder_1/conv2d_transpose/kernel/Adam"
        string_val: "generator/decoder_1/conv2d_transpose/kernel/Adam_1"
        string_val: "generator/decoder_1/conv2d_transpose/bias/Adam"
        string_val: "generator/decoder_1/conv2d_transpose/bias/Adam_1"
        string_val: "discriminator_loss/Mean/ExponentialMovingAverage"
        string_val: "generator_loss/Mean/ExponentialMovingAverage"
        string_val: "generator_loss/Mean_1/ExponentialMovingAverage"
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 270
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 270
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 270
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 270
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 270
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^discriminator/layer_1/conv2d/bias/Adam/Assign"
  input: "^discriminator/layer_1/conv2d/bias/Adam_1/Assign"
  input: "^discriminator/layer_1/conv2d/bias/Assign"
  input: "^discriminator/layer_1/conv2d/kernel/Adam/Assign"
  input: "^discriminator/layer_1/conv2d/kernel/Adam_1/Assign"
  input: "^discriminator/layer_1/conv2d/kernel/Assign"
  input: "^discriminator/layer_2/batch_normalization/beta/Adam/Assign"
  input: "^discriminator/layer_2/batch_normalization/beta/Adam_1/Assign"
  input: "^discriminator/layer_2/batch_normalization/beta/Assign"
  input: "^discriminator/layer_2/batch_normalization/gamma/Adam/Assign"
  input: "^discriminator/layer_2/batch_normalization/gamma/Adam_1/Assign"
  input: "^discriminator/layer_2/batch_normalization/gamma/Assign"
  input: "^discriminator/layer_2/batch_normalization/moving_mean/Assign"
  input: "^discriminator/layer_2/batch_normalization/moving_variance/Assign"
  input: "^discriminator/layer_2/conv2d/bias/Adam/Assign"
  input: "^discriminator/layer_2/conv2d/bias/Adam_1/Assign"
  input: "^discriminator/layer_2/conv2d/bias/Assign"
  input: "^discriminator/layer_2/conv2d/kernel/Adam/Assign"
  input: "^discriminator/layer_2/conv2d/kernel/Adam_1/Assign"
  input: "^discriminator/layer_2/conv2d/kernel/Assign"
  input: "^discriminator/layer_3/batch_normalization/beta/Adam/Assign"
  input: "^discriminator/layer_3/batch_normalization/beta/Adam_1/Assign"
  input: "^discriminator/layer_3/batch_normalization/beta/Assign"
  input: "^discriminator/layer_3/batch_normalization/gamma/Adam/Assign"
  input: "^discriminator/layer_3/batch_normalization/gamma/Adam_1/Assign"
  input: "^discriminator/layer_3/batch_normalization/gamma/Assign"
  input: "^discriminator/layer_3/batch_normalization/moving_mean/Assign"
  input: "^discriminator/layer_3/batch_normalization/moving_variance/Assign"
  input: "^discriminator/layer_3/conv2d/bias/Adam/Assign"
  input: "^discriminator/layer_3/conv2d/bias/Adam_1/Assign"
  input: "^discriminator/layer_3/conv2d/bias/Assign"
  input: "^discriminator/layer_3/conv2d/kernel/Adam/Assign"
  input: "^discriminator/layer_3/conv2d/kernel/Adam_1/Assign"
  input: "^discriminator/layer_3/conv2d/kernel/Assign"
  input: "^discriminator/layer_4/batch_normalization/beta/Adam/Assign"
  input: "^discriminator/layer_4/batch_normalization/beta/Adam_1/Assign"
  input: "^discriminator/layer_4/batch_normalization/beta/Assign"
  input: "^discriminator/layer_4/batch_normalization/gamma/Adam/Assign"
  input: "^discriminator/layer_4/batch_normalization/gamma/Adam_1/Assign"
  input: "^discriminator/layer_4/batch_normalization/gamma/Assign"
  input: "^discriminator/layer_4/batch_normalization/moving_mean/Assign"
  input: "^discriminator/layer_4/batch_normalization/moving_variance/Assign"
  input: "^discriminator/layer_4/conv2d/bias/Adam/Assign"
  input: "^discriminator/layer_4/conv2d/bias/Adam_1/Assign"
  input: "^discriminator/layer_4/conv2d/bias/Assign"
  input: "^discriminator/layer_4/conv2d/kernel/Adam/Assign"
  input: "^discriminator/layer_4/conv2d/kernel/Adam_1/Assign"
  input: "^discriminator/layer_4/conv2d/kernel/Assign"
  input: "^discriminator/layer_5/conv2d/bias/Adam/Assign"
  input: "^discriminator/layer_5/conv2d/bias/Adam_1/Assign"
  input: "^discriminator/layer_5/conv2d/bias/Assign"
  input: "^discriminator/layer_5/conv2d/kernel/Adam/Assign"
  input: "^discriminator/layer_5/conv2d/kernel/Adam_1/Assign"
  input: "^discriminator/layer_5/conv2d/kernel/Assign"
  input: "^discriminator_loss/Mean/ExponentialMovingAverage/Assign"
  input: "^discriminator_train/beta1_power/Assign"
  input: "^discriminator_train/beta2_power/Assign"
  input: "^generator/decoder_1/conv2d_transpose/bias/Adam/Assign"
  input: "^generator/decoder_1/conv2d_transpose/bias/Adam_1/Assign"
  input: "^generator/decoder_1/conv2d_transpose/bias/Assign"
  input: "^generator/decoder_1/conv2d_transpose/kernel/Adam/Assign"
  input: "^generator/decoder_1/conv2d_transpose/kernel/Adam_1/Assign"
  input: "^generator/decoder_1/conv2d_transpose/kernel/Assign"
  input: "^generator/decoder_2/batch_normalization/beta/Adam/Assign"
  input: "^generator/decoder_2/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/decoder_2/batch_normalization/beta/Assign"
  input: "^generator/decoder_2/batch_normalization/gamma/Adam/Assign"
  input: "^generator/decoder_2/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/decoder_2/batch_normalization/gamma/Assign"
  input: "^generator/decoder_2/batch_normalization/moving_mean/Assign"
  input: "^generator/decoder_2/batch_normalization/moving_variance/Assign"
  input: "^generator/decoder_2/conv2d_transpose/bias/Adam/Assign"
  input: "^generator/decoder_2/conv2d_transpose/bias/Adam_1/Assign"
  input: "^generator/decoder_2/conv2d_transpose/bias/Assign"
  input: "^generator/decoder_2/conv2d_transpose/kernel/Adam/Assign"
  input: "^generator/decoder_2/conv2d_transpose/kernel/Adam_1/Assign"
  input: "^generator/decoder_2/conv2d_transpose/kernel/Assign"
  input: "^generator/decoder_3/batch_normalization/beta/Adam/Assign"
  input: "^generator/decoder_3/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/decoder_3/batch_normalization/beta/Assign"
  input: "^generator/decoder_3/batch_normalization/gamma/Adam/Assign"
  input: "^generator/decoder_3/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/decoder_3/batch_normalization/gamma/Assign"
  input: "^generator/decoder_3/batch_normalization/moving_mean/Assign"
  input: "^generator/decoder_3/batch_normalization/moving_variance/Assign"
  input: "^generator/decoder_3/conv2d_transpose/bias/Adam/Assign"
  input: "^generator/decoder_3/conv2d_transpose/bias/Adam_1/Assign"
  input: "^generator/decoder_3/conv2d_transpose/bias/Assign"
  input: "^generator/decoder_3/conv2d_transpose/kernel/Adam/Assign"
  input: "^generator/decoder_3/conv2d_transpose/kernel/Adam_1/Assign"
  input: "^generator/decoder_3/conv2d_transpose/kernel/Assign"
  input: "^generator/decoder_4/batch_normalization/beta/Adam/Assign"
  input: "^generator/decoder_4/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/decoder_4/batch_normalization/beta/Assign"
  input: "^generator/decoder_4/batch_normalization/gamma/Adam/Assign"
  input: "^generator/decoder_4/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/decoder_4/batch_normalization/gamma/Assign"
  input: "^generator/decoder_4/batch_normalization/moving_mean/Assign"
  input: "^generator/decoder_4/batch_normalization/moving_variance/Assign"
  input: "^generator/decoder_4/conv2d_transpose/bias/Adam/Assign"
  input: "^generator/decoder_4/conv2d_transpose/bias/Adam_1/Assign"
  input: "^generator/decoder_4/conv2d_transpose/bias/Assign"
  input: "^generator/decoder_4/conv2d_transpose/kernel/Adam/Assign"
  input: "^generator/decoder_4/conv2d_transpose/kernel/Adam_1/Assign"
  input: "^generator/decoder_4/conv2d_transpose/kernel/Assign"
  input: "^generator/decoder_5/batch_normalization/beta/Adam/Assign"
  input: "^generator/decoder_5/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/decoder_5/batch_normalization/beta/Assign"
  input: "^generator/decoder_5/batch_normalization/gamma/Adam/Assign"
  input: "^generator/decoder_5/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/decoder_5/batch_normalization/gamma/Assign"
  input: "^generator/decoder_5/batch_normalization/moving_mean/Assign"
  input: "^generator/decoder_5/batch_normalization/moving_variance/Assign"
  input: "^generator/decoder_5/conv2d_transpose/bias/Adam/Assign"
  input: "^generator/decoder_5/conv2d_transpose/bias/Adam_1/Assign"
  input: "^generator/decoder_5/conv2d_transpose/bias/Assign"
  input: "^generator/decoder_5/conv2d_transpose/kernel/Adam/Assign"
  input: "^generator/decoder_5/conv2d_transpose/kernel/Adam_1/Assign"
  input: "^generator/decoder_5/conv2d_transpose/kernel/Assign"
  input: "^generator/decoder_6/batch_normalization/beta/Adam/Assign"
  input: "^generator/decoder_6/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/decoder_6/batch_normalization/beta/Assign"
  input: "^generator/decoder_6/batch_normalization/gamma/Adam/Assign"
  input: "^generator/decoder_6/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/decoder_6/batch_normalization/gamma/Assign"
  input: "^generator/decoder_6/batch_normalization/moving_mean/Assign"
  input: "^generator/decoder_6/batch_normalization/moving_variance/Assign"
  input: "^generator/decoder_6/conv2d_transpose/bias/Adam/Assign"
  input: "^generator/decoder_6/conv2d_transpose/bias/Adam_1/Assign"
  input: "^generator/decoder_6/conv2d_transpose/bias/Assign"
  input: "^generator/decoder_6/conv2d_transpose/kernel/Adam/Assign"
  input: "^generator/decoder_6/conv2d_transpose/kernel/Adam_1/Assign"
  input: "^generator/decoder_6/conv2d_transpose/kernel/Assign"
  input: "^generator/decoder_7/batch_normalization/beta/Adam/Assign"
  input: "^generator/decoder_7/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/decoder_7/batch_normalization/beta/Assign"
  input: "^generator/decoder_7/batch_normalization/gamma/Adam/Assign"
  input: "^generator/decoder_7/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/decoder_7/batch_normalization/gamma/Assign"
  input: "^generator/decoder_7/batch_normalization/moving_mean/Assign"
  input: "^generator/decoder_7/batch_normalization/moving_variance/Assign"
  input: "^generator/decoder_7/conv2d_transpose/bias/Adam/Assign"
  input: "^generator/decoder_7/conv2d_transpose/bias/Adam_1/Assign"
  input: "^generator/decoder_7/conv2d_transpose/bias/Assign"
  input: "^generator/decoder_7/conv2d_transpose/kernel/Adam/Assign"
  input: "^generator/decoder_7/conv2d_transpose/kernel/Adam_1/Assign"
  input: "^generator/decoder_7/conv2d_transpose/kernel/Assign"
  input: "^generator/decoder_8/batch_normalization/beta/Adam/Assign"
  input: "^generator/decoder_8/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/decoder_8/batch_normalization/beta/Assign"
  input: "^generator/decoder_8/batch_normalization/gamma/Adam/Assign"
  input: "^generator/decoder_8/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/decoder_8/batch_normalization/gamma/Assign"
  input: "^generator/decoder_8/batch_normalization/moving_mean/Assign"
  input: "^generator/decoder_8/batch_normalization/moving_variance/Assign"
  input: "^generator/decoder_8/conv2d_transpose/bias/Adam/Assign"
  input: "^generator/decoder_8/conv2d_transpose/bias/Adam_1/Assign"
  input: "^generator/decoder_8/conv2d_transpose/bias/Assign"
  input: "^generator/decoder_8/conv2d_transpose/kernel/Adam/Assign"
  input: "^generator/decoder_8/conv2d_transpose/kernel/Adam_1/Assign"
  input: "^generator/decoder_8/conv2d_transpose/kernel/Assign"
  input: "^generator/encoder_1/conv2d/bias/Adam/Assign"
  input: "^generator/encoder_1/conv2d/bias/Adam_1/Assign"
  input: "^generator/encoder_1/conv2d/bias/Assign"
  input: "^generator/encoder_1/conv2d/kernel/Adam/Assign"
  input: "^generator/encoder_1/conv2d/kernel/Adam_1/Assign"
  input: "^generator/encoder_1/conv2d/kernel/Assign"
  input: "^generator/encoder_2/batch_normalization/beta/Adam/Assign"
  input: "^generator/encoder_2/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/encoder_2/batch_normalization/beta/Assign"
  input: "^generator/encoder_2/batch_normalization/gamma/Adam/Assign"
  input: "^generator/encoder_2/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/encoder_2/batch_normalization/gamma/Assign"
  input: "^generator/encoder_2/batch_normalization/moving_mean/Assign"
  input: "^generator/encoder_2/batch_normalization/moving_variance/Assign"
  input: "^generator/encoder_2/conv2d/bias/Adam/Assign"
  input: "^generator/encoder_2/conv2d/bias/Adam_1/Assign"
  input: "^generator/encoder_2/conv2d/bias/Assign"
  input: "^generator/encoder_2/conv2d/kernel/Adam/Assign"
  input: "^generator/encoder_2/conv2d/kernel/Adam_1/Assign"
  input: "^generator/encoder_2/conv2d/kernel/Assign"
  input: "^generator/encoder_3/batch_normalization/beta/Adam/Assign"
  input: "^generator/encoder_3/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/encoder_3/batch_normalization/beta/Assign"
  input: "^generator/encoder_3/batch_normalization/gamma/Adam/Assign"
  input: "^generator/encoder_3/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/encoder_3/batch_normalization/gamma/Assign"
  input: "^generator/encoder_3/batch_normalization/moving_mean/Assign"
  input: "^generator/encoder_3/batch_normalization/moving_variance/Assign"
  input: "^generator/encoder_3/conv2d/bias/Adam/Assign"
  input: "^generator/encoder_3/conv2d/bias/Adam_1/Assign"
  input: "^generator/encoder_3/conv2d/bias/Assign"
  input: "^generator/encoder_3/conv2d/kernel/Adam/Assign"
  input: "^generator/encoder_3/conv2d/kernel/Adam_1/Assign"
  input: "^generator/encoder_3/conv2d/kernel/Assign"
  input: "^generator/encoder_4/batch_normalization/beta/Adam/Assign"
  input: "^generator/encoder_4/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/encoder_4/batch_normalization/beta/Assign"
  input: "^generator/encoder_4/batch_normalization/gamma/Adam/Assign"
  input: "^generator/encoder_4/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/encoder_4/batch_normalization/gamma/Assign"
  input: "^generator/encoder_4/batch_normalization/moving_mean/Assign"
  input: "^generator/encoder_4/batch_normalization/moving_variance/Assign"
  input: "^generator/encoder_4/conv2d/bias/Adam/Assign"
  input: "^generator/encoder_4/conv2d/bias/Adam_1/Assign"
  input: "^generator/encoder_4/conv2d/bias/Assign"
  input: "^generator/encoder_4/conv2d/kernel/Adam/Assign"
  input: "^generator/encoder_4/conv2d/kernel/Adam_1/Assign"
  input: "^generator/encoder_4/conv2d/kernel/Assign"
  input: "^generator/encoder_5/batch_normalization/beta/Adam/Assign"
  input: "^generator/encoder_5/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/encoder_5/batch_normalization/beta/Assign"
  input: "^generator/encoder_5/batch_normalization/gamma/Adam/Assign"
  input: "^generator/encoder_5/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/encoder_5/batch_normalization/gamma/Assign"
  input: "^generator/encoder_5/batch_normalization/moving_mean/Assign"
  input: "^generator/encoder_5/batch_normalization/moving_variance/Assign"
  input: "^generator/encoder_5/conv2d/bias/Adam/Assign"
  input: "^generator/encoder_5/conv2d/bias/Adam_1/Assign"
  input: "^generator/encoder_5/conv2d/bias/Assign"
  input: "^generator/encoder_5/conv2d/kernel/Adam/Assign"
  input: "^generator/encoder_5/conv2d/kernel/Adam_1/Assign"
  input: "^generator/encoder_5/conv2d/kernel/Assign"
  input: "^generator/encoder_6/batch_normalization/beta/Adam/Assign"
  input: "^generator/encoder_6/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/encoder_6/batch_normalization/beta/Assign"
  input: "^generator/encoder_6/batch_normalization/gamma/Adam/Assign"
  input: "^generator/encoder_6/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/encoder_6/batch_normalization/gamma/Assign"
  input: "^generator/encoder_6/batch_normalization/moving_mean/Assign"
  input: "^generator/encoder_6/batch_normalization/moving_variance/Assign"
  input: "^generator/encoder_6/conv2d/bias/Adam/Assign"
  input: "^generator/encoder_6/conv2d/bias/Adam_1/Assign"
  input: "^generator/encoder_6/conv2d/bias/Assign"
  input: "^generator/encoder_6/conv2d/kernel/Adam/Assign"
  input: "^generator/encoder_6/conv2d/kernel/Adam_1/Assign"
  input: "^generator/encoder_6/conv2d/kernel/Assign"
  input: "^generator/encoder_7/batch_normalization/beta/Adam/Assign"
  input: "^generator/encoder_7/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/encoder_7/batch_normalization/beta/Assign"
  input: "^generator/encoder_7/batch_normalization/gamma/Adam/Assign"
  input: "^generator/encoder_7/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/encoder_7/batch_normalization/gamma/Assign"
  input: "^generator/encoder_7/batch_normalization/moving_mean/Assign"
  input: "^generator/encoder_7/batch_normalization/moving_variance/Assign"
  input: "^generator/encoder_7/conv2d/bias/Adam/Assign"
  input: "^generator/encoder_7/conv2d/bias/Adam_1/Assign"
  input: "^generator/encoder_7/conv2d/bias/Assign"
  input: "^generator/encoder_7/conv2d/kernel/Adam/Assign"
  input: "^generator/encoder_7/conv2d/kernel/Adam_1/Assign"
  input: "^generator/encoder_7/conv2d/kernel/Assign"
  input: "^generator/encoder_8/batch_normalization/beta/Adam/Assign"
  input: "^generator/encoder_8/batch_normalization/beta/Adam_1/Assign"
  input: "^generator/encoder_8/batch_normalization/beta/Assign"
  input: "^generator/encoder_8/batch_normalization/gamma/Adam/Assign"
  input: "^generator/encoder_8/batch_normalization/gamma/Adam_1/Assign"
  input: "^generator/encoder_8/batch_normalization/gamma/Assign"
  input: "^generator/encoder_8/batch_normalization/moving_mean/Assign"
  input: "^generator/encoder_8/batch_normalization/moving_variance/Assign"
  input: "^generator/encoder_8/conv2d/bias/Adam/Assign"
  input: "^generator/encoder_8/conv2d/bias/Adam_1/Assign"
  input: "^generator/encoder_8/conv2d/bias/Assign"
  input: "^generator/encoder_8/conv2d/kernel/Adam/Assign"
  input: "^generator/encoder_8/conv2d/kernel/Adam_1/Assign"
  input: "^generator/encoder_8/conv2d/kernel/Assign"
  input: "^generator_loss/Mean/ExponentialMovingAverage/Assign"
  input: "^generator_loss/Mean_1/ExponentialMovingAverage/Assign"
  input: "^generator_train/beta1_power/Assign"
  input: "^generator_train/beta2_power/Assign"
  input: "^global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_1"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "combined_summary/inputs"
  input: "combined_summary/outputs"
  input: "combined_summary/targets"
  input: "combined_summary/residuals"
  input: "psfs_summary/psfss"
  input: "predict_real_summary/predict_real"
  input: "predict_fake_summary/predict_fake"
  input: "discriminator_loss_1"
  input: "generator_loss_GAN"
  input: "generator_loss_L1"
  input: "generator/encoder_1/conv2d/kernel/values"
  input: "generator/encoder_1/conv2d/bias/values"
  input: "generator/encoder_2/conv2d/kernel/values"
  input: "generator/encoder_2/conv2d/bias/values"
  input: "generator/encoder_2/batch_normalization/gamma/values"
  input: "generator/encoder_2/batch_normalization/beta/values"
  input: "generator/encoder_3/conv2d/kernel/values"
  input: "generator/encoder_3/conv2d/bias/values"
  input: "generator/encoder_3/batch_normalization/gamma/values"
  input: "generator/encoder_3/batch_normalization/beta/values"
  input: "generator/encoder_4/conv2d/kernel/values"
  input: "generator/encoder_4/conv2d/bias/values"
  input: "generator/encoder_4/batch_normalization/gamma/values"
  input: "generator/encoder_4/batch_normalization/beta/values"
  input: "generator/encoder_5/conv2d/kernel/values"
  input: "generator/encoder_5/conv2d/bias/values"
  input: "generator/encoder_5/batch_normalization/gamma/values"
  input: "generator/encoder_5/batch_normalization/beta/values"
  input: "generator/encoder_6/conv2d/kernel/values"
  input: "generator/encoder_6/conv2d/bias/values"
  input: "generator/encoder_6/batch_normalization/gamma/values"
  input: "generator/encoder_6/batch_normalization/beta/values"
  input: "generator/encoder_7/conv2d/kernel/values"
  input: "generator/encoder_7/conv2d/bias/values"
  input: "generator/encoder_7/batch_normalization/gamma/values"
  input: "generator/encoder_7/batch_normalization/beta/values"
  input: "generator/encoder_8/conv2d/kernel/values"
  input: "generator/encoder_8/conv2d/bias/values"
  input: "generator/encoder_8/batch_normalization/gamma/values"
  input: "generator/encoder_8/batch_normalization/beta/values"
  input: "generator/decoder_8/conv2d_transpose/kernel/values"
  input: "generator/decoder_8/conv2d_transpose/bias/values"
  input: "generator/decoder_8/batch_normalization/gamma/values"
  input: "generator/decoder_8/batch_normalization/beta/values"
  input: "generator/decoder_7/conv2d_transpose/kernel/values"
  input: "generator/decoder_7/conv2d_transpose/bias/values"
  input: "generator/decoder_7/batch_normalization/gamma/values"
  input: "generator/decoder_7/batch_normalization/beta/values"
  input: "generator/decoder_6/conv2d_transpose/kernel/values"
  input: "generator/decoder_6/conv2d_transpose/bias/values"
  input: "generator/decoder_6/batch_normalization/gamma/values"
  input: "generator/decoder_6/batch_normalization/beta/values"
  input: "generator/decoder_5/conv2d_transpose/kernel/values"
  input: "generator/decoder_5/conv2d_transpose/bias/values"
  input: "generator/decoder_5/batch_normalization/gamma/values"
  input: "generator/decoder_5/batch_normalization/beta/values"
  input: "generator/decoder_4/conv2d_transpose/kernel/values"
  input: "generator/decoder_4/conv2d_transpose/bias/values"
  input: "generator/decoder_4/batch_normalization/gamma/values"
  input: "generator/decoder_4/batch_normalization/beta/values"
  input: "generator/decoder_3/conv2d_transpose/kernel/values"
  input: "generator/decoder_3/conv2d_transpose/bias/values"
  input: "generator/decoder_3/batch_normalization/gamma/values"
  input: "generator/decoder_3/batch_normalization/beta/values"
  input: "generator/decoder_2/conv2d_transpose/kernel/values"
  input: "generator/decoder_2/conv2d_transpose/bias/values"
  input: "generator/decoder_2/batch_normalization/gamma/values"
  input: "generator/decoder_2/batch_normalization/beta/values"
  input: "generator/decoder_1/conv2d_transpose/kernel/values"
  input: "generator/decoder_1/conv2d_transpose/bias/values"
  input: "discriminator/layer_1/conv2d/kernel/values"
  input: "discriminator/layer_1/conv2d/bias/values"
  input: "discriminator/layer_2/conv2d/kernel/values"
  input: "discriminator/layer_2/conv2d/bias/values"
  input: "discriminator/layer_2/batch_normalization/gamma/values"
  input: "discriminator/layer_2/batch_normalization/beta/values"
  input: "discriminator/layer_3/conv2d/kernel/values"
  input: "discriminator/layer_3/conv2d/bias/values"
  input: "discriminator/layer_3/batch_normalization/gamma/values"
  input: "discriminator/layer_3/batch_normalization/beta/values"
  input: "discriminator/layer_4/conv2d/kernel/values"
  input: "discriminator/layer_4/conv2d/bias/values"
  input: "discriminator/layer_4/batch_normalization/gamma/values"
  input: "discriminator/layer_4/batch_normalization/beta/values"
  input: "discriminator/layer_5/conv2d/kernel/values"
  input: "discriminator/layer_5/conv2d/bias/values"
  input: "discriminator/layer_1/conv2d/kernel/gradients"
  input: "discriminator/layer_1/conv2d/bias/gradients"
  input: "discriminator/layer_2/conv2d/kernel/gradients"
  input: "discriminator/layer_2/conv2d/bias/gradients"
  input: "discriminator/layer_2/batch_normalization/gamma/gradients"
  input: "discriminator/layer_2/batch_normalization/beta/gradients"
  input: "discriminator/layer_3/conv2d/kernel/gradients"
  input: "discriminator/layer_3/conv2d/bias/gradients"
  input: "discriminator/layer_3/batch_normalization/gamma/gradients"
  input: "discriminator/layer_3/batch_normalization/beta/gradients"
  input: "discriminator/layer_4/conv2d/kernel/gradients"
  input: "discriminator/layer_4/conv2d/bias/gradients"
  input: "discriminator/layer_4/batch_normalization/gamma/gradients"
  input: "discriminator/layer_4/batch_normalization/beta/gradients"
  input: "discriminator/layer_5/conv2d/kernel/gradients"
  input: "discriminator/layer_5/conv2d/bias/gradients"
  input: "generator/encoder_1/conv2d/kernel/gradients"
  input: "generator/encoder_1/conv2d/bias/gradients"
  input: "generator/encoder_2/conv2d/kernel/gradients"
  input: "generator/encoder_2/conv2d/bias/gradients"
  input: "generator/encoder_2/batch_normalization/gamma/gradients"
  input: "generator/encoder_2/batch_normalization/beta/gradients"
  input: "generator/encoder_3/conv2d/kernel/gradients"
  input: "generator/encoder_3/conv2d/bias/gradients"
  input: "generator/encoder_3/batch_normalization/gamma/gradients"
  input: "generator/encoder_3/batch_normalization/beta/gradients"
  input: "generator/encoder_4/conv2d/kernel/gradients"
  input: "generator/encoder_4/conv2d/bias/gradients"
  input: "generator/encoder_4/batch_normalization/gamma/gradients"
  input: "generator/encoder_4/batch_normalization/beta/gradients"
  input: "generator/encoder_5/conv2d/kernel/gradients"
  input: "generator/encoder_5/conv2d/bias/gradients"
  input: "generator/encoder_5/batch_normalization/gamma/gradients"
  input: "generator/encoder_5/batch_normalization/beta/gradients"
  input: "generator/encoder_6/conv2d/kernel/gradients"
  input: "generator/encoder_6/conv2d/bias/gradients"
  input: "generator/encoder_6/batch_normalization/gamma/gradients"
  input: "generator/encoder_6/batch_normalization/beta/gradients"
  input: "generator/encoder_7/conv2d/kernel/gradients"
  input: "generator/encoder_7/conv2d/bias/gradients"
  input: "generator/encoder_7/batch_normalization/gamma/gradients"
  input: "generator/encoder_7/batch_normalization/beta/gradients"
  input: "generator/encoder_8/conv2d/kernel/gradients"
  input: "generator/encoder_8/conv2d/bias/gradients"
  input: "generator/encoder_8/batch_normalization/gamma/gradients"
  input: "generator/encoder_8/batch_normalization/beta/gradients"
  input: "generator/decoder_8/conv2d_transpose/kernel/gradients"
  input: "generator/decoder_8/conv2d_transpose/bias/gradients"
  input: "generator/decoder_8/batch_normalization/gamma/gradients"
  input: "generator/decoder_8/batch_normalization/beta/gradients"
  input: "generator/decoder_7/conv2d_transpose/kernel/gradients"
  input: "generator/decoder_7/conv2d_transpose/bias/gradients"
  input: "generator/decoder_7/batch_normalization/gamma/gradients"
  input: "generator/decoder_7/batch_normalization/beta/gradients"
  input: "generator/decoder_6/conv2d_transpose/kernel/gradients"
  input: "generator/decoder_6/conv2d_transpose/bias/gradients"
  input: "generator/decoder_6/batch_normalization/gamma/gradients"
  input: "generator/decoder_6/batch_normalization/beta/gradients"
  input: "generator/decoder_5/conv2d_transpose/kernel/gradients"
  input: "generator/decoder_5/conv2d_transpose/bias/gradients"
  input: "generator/decoder_5/batch_normalization/gamma/gradients"
  input: "generator/decoder_5/batch_normalization/beta/gradients"
  input: "generator/decoder_4/conv2d_transpose/kernel/gradients"
  input: "generator/decoder_4/conv2d_transpose/bias/gradients"
  input: "generator/decoder_4/batch_normalization/gamma/gradients"
  input: "generator/decoder_4/batch_normalization/beta/gradients"
  input: "generator/decoder_3/conv2d_transpose/kernel/gradients"
  input: "generator/decoder_3/conv2d_transpose/bias/gradients"
  input: "generator/decoder_3/batch_normalization/gamma/gradients"
  input: "generator/decoder_3/batch_normalization/beta/gradients"
  input: "generator/decoder_2/conv2d_transpose/kernel/gradients"
  input: "generator/decoder_2/conv2d_transpose/bias/gradients"
  input: "generator/decoder_2/batch_normalization/gamma/gradients"
  input: "generator/decoder_2/batch_normalization/beta/gradients"
  input: "generator/decoder_1/conv2d_transpose/kernel/gradients"
  input: "generator/decoder_1/conv2d_transpose/bias/gradients"
  attr {
    key: "N"
    value {
      i: 162
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
library {
  function {
    signature {
      name: "_make_dataset_7Dqox50wAsA"
      output_arg {
        name: "batchdataset"
        type: DT_VARIANT
      }
      is_stateful: true
    }
    node_def {
      name: "TensorDataset/tensors/component_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "TensorDataset"
      op: "TensorDataset"
      input: "TensorDataset/tensors/component_0:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node_def {
      name: "FlatMapDataset"
      op: "FlatMapDataset"
      input: "TensorDataset:handle:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "tf_map_func_oG4MWr3nQXA"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT32
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "MapDataset"
      op: "MapDataset"
      input: "FlatMapDataset:handle:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "tf_map_func_vobbiXSSqJg"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT32
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset/count"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: -1
          }
        }
      }
    }
    node_def {
      name: "RepeatDataset"
      op: "RepeatDataset"
      input: "MapDataset:handle:0"
      input: "RepeatDataset/count:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT32
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    node_def {
      name: "BatchDataset/batch_size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node_def {
      name: "BatchDataset"
      op: "BatchDataset"
      input: "RepeatDataset:handle:0"
      input: "BatchDataset/batch_size:output:0"
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
              dim {
                size: 256
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
              dim {
                size: 256
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: -1
              }
              dim {
                size: 256
              }
              dim {
                size: 256
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT32
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    ret {
      key: "batchdataset"
      value: "BatchDataset:handle:0"
    }
  }
  function {
    signature {
      name: "tf_init_func_OfHmkjGNQoA"
      input_arg {
        name: "arg0"
        type: DT_INT32
      }
      output_arg {
        name: "pyfunc"
        type: DT_INT64
      }
      description: "A wrapper for Defun that facilitates shape inference."
      is_stateful: true
    }
    node_def {
      name: "PyFunc"
      op: "PyFunc"
      attr {
        key: "Tin"
        value {
          list {
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "token"
        value {
          s: "pyfunc_0"
        }
      }
    }
    ret {
      key: "pyfunc"
      value: "PyFunc:output:0"
    }
  }
  function {
    signature {
      name: "tf_map_func_vobbiXSSqJg"
      input_arg {
        name: "arg0_0"
        type: DT_INT32
      }
      input_arg {
        name: "arg1_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "arg2_0"
        type: DT_FLOAT
      }
      input_arg {
        name: "arg3"
        type: DT_FLOAT
      }
      input_arg {
        name: "arg4"
        type: DT_FLOAT
      }
      input_arg {
        name: "arg5"
        type: DT_FLOAT
      }
      output_arg {
        name: "arg0"
        type: DT_INT32
      }
      output_arg {
        name: "arg1"
        type: DT_FLOAT
      }
      output_arg {
        name: "arg2"
        type: DT_FLOAT
      }
      output_arg {
        name: "crop_to_bounding_box_squeeze"
        type: DT_FLOAT
      }
      output_arg {
        name: "crop_to_bounding_box_1_squeeze"
        type: DT_FLOAT
      }
      output_arg {
        name: "crop_to_bounding_box_2_squeeze"
        type: DT_FLOAT
      }
      description: "A wrapper for Defun that facilitates shape inference."
      is_stateful: true
    }
    node_def {
      name: "random_flip_left_right/control_dependency"
      op: "Identity"
      input: "arg3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@arg3"
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right/random_uniform/shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right/random_uniform/min"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right/random_uniform/max"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "random_flip_left_right/random_uniform/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 87654321
        }
      }
      attr {
        key: "seed2"
        value {
          i: 1050755575
        }
      }
    }
    node_def {
      name: "random_flip_left_right/random_uniform/sub"
      op: "Sub"
      input: "random_flip_left_right/random_uniform/max:output:0"
      input: "random_flip_left_right/random_uniform/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_flip_left_right/random_uniform/mul"
      op: "Mul"
      input: "random_flip_left_right/random_uniform/RandomUniform:output:0"
      input: "random_flip_left_right/random_uniform/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_flip_left_right/random_uniform"
      op: "Add"
      input: "random_flip_left_right/random_uniform/mul:z:0"
      input: "random_flip_left_right/random_uniform/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_flip_left_right/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right/Less"
      op: "Less"
      input: "random_flip_left_right/random_uniform:z:0"
      input: "random_flip_left_right/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_flip_left_right/Switch"
      op: "Switch"
      input: "random_flip_left_right/Less:z:0"
      input: "random_flip_left_right/Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "random_flip_left_right/switch_t"
      op: "Identity"
      input: "random_flip_left_right/Switch:output_true:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "random_flip_left_right/switch_f"
      op: "Identity"
      input: "random_flip_left_right/Switch:output_false:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "random_flip_left_right/pred_id"
      op: "Identity"
      input: "random_flip_left_right/Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "random_flip_left_right/ReverseV2/axis"
      op: "Const"
      input: "^random_flip_left_right/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right/ReverseV2"
      op: "ReverseV2"
      input: "random_flip_left_right/ReverseV2/Switch:output_true:0"
      input: "random_flip_left_right/ReverseV2/axis:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "random_flip_left_right/ReverseV2/Switch"
      op: "Switch"
      input: "random_flip_left_right/control_dependency:output:0"
      input: "random_flip_left_right/pred_id:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@arg3"
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right/Switch_1"
      op: "Switch"
      input: "random_flip_left_right/control_dependency:output:0"
      input: "random_flip_left_right/pred_id:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@arg3"
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right/Merge"
      op: "Merge"
      input: "random_flip_left_right/Switch_1:output_false:0"
      input: "random_flip_left_right/ReverseV2:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "resize_images/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "resize_images/ExpandDims"
      op: "ExpandDims"
      input: "random_flip_left_right/Merge:output:0"
      input: "resize_images/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "resize_images/size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\001\000\000\036\001\000\000"
          }
        }
      }
    }
    node_def {
      name: "resize_images/ResizeArea"
      op: "ResizeArea"
      input: "resize_images/ExpandDims:output:0"
      input: "resize_images/size:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "align_corners"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "resize_images/Squeeze"
      op: "Squeeze"
      input: "resize_images/ResizeArea:resized_images:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "random_uniform/shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node_def {
      name: "random_uniform/min"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "random_uniform/max"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 31.0
          }
        }
      }
    }
    node_def {
      name: "random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "random_uniform/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 87654321
        }
      }
      attr {
        key: "seed2"
        value {
          i: 1050755575
        }
      }
    }
    node_def {
      name: "random_uniform/sub"
      op: "Sub"
      input: "random_uniform/max:output:0"
      input: "random_uniform/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_uniform/mul"
      op: "Mul"
      input: "random_uniform/RandomUniform:output:0"
      input: "random_uniform/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_uniform"
      op: "Add"
      input: "random_uniform/mul:z:0"
      input: "random_uniform/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Floor"
      op: "Floor"
      input: "random_uniform:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "Floor:y:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice"
      op: "StridedSlice"
      input: "Cast:y:0"
      input: "strided_slice/stack:output:0"
      input: "strided_slice/stack_1:output:0"
      input: "strided_slice/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_1"
      op: "StridedSlice"
      input: "Cast:y:0"
      input: "strided_slice_1/stack:output:0"
      input: "strided_slice_1/stack_1:output:0"
      input: "strided_slice_1/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/ExpandDims"
      op: "ExpandDims"
      input: "resize_images/Squeeze:output:0"
      input: "crop_to_bounding_box/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/GreaterEqual"
      op: "GreaterEqual"
      input: "strided_slice_1:output:0"
      input: "crop_to_bounding_box/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/Assert/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "offset_width must be >= 0."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/Assert/Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "offset_width must be >= 0."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/Assert/Assert"
      op: "Assert"
      input: "crop_to_bounding_box/GreaterEqual:z:0"
      input: "crop_to_bounding_box/Assert/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/GreaterEqual_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/GreaterEqual_1"
      op: "GreaterEqual"
      input: "strided_slice:output:0"
      input: "crop_to_bounding_box/GreaterEqual_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/Assert_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "offset_height must be >= 0."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/Assert_1/Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "offset_height must be >= 0."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/Assert_1/Assert"
      op: "Assert"
      input: "crop_to_bounding_box/GreaterEqual_1:z:0"
      input: "crop_to_bounding_box/Assert_1/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/add/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/add"
      op: "Add"
      input: "crop_to_bounding_box/add/x:output:0"
      input: "strided_slice_1:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/LessEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 286
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/LessEqual"
      op: "LessEqual"
      input: "crop_to_bounding_box/add:z:0"
      input: "crop_to_bounding_box/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/Assert_2/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "width must be >= target + offset."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/Assert_2/Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "width must be >= target + offset."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/Assert_2/Assert"
      op: "Assert"
      input: "crop_to_bounding_box/LessEqual:z:0"
      input: "crop_to_bounding_box/Assert_2/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/add_1/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/add_1"
      op: "Add"
      input: "crop_to_bounding_box/add_1/x:output:0"
      input: "strided_slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/LessEqual_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 286
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/LessEqual_1"
      op: "LessEqual"
      input: "crop_to_bounding_box/add_1:z:0"
      input: "crop_to_bounding_box/LessEqual_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/Assert_3/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "height must be >= target + offset."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/Assert_3/Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "height must be >= target + offset."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/Assert_3/Assert"
      op: "Assert"
      input: "crop_to_bounding_box/LessEqual_1:z:0"
      input: "crop_to_bounding_box/Assert_3/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/control_dependency"
      op: "Identity"
      input: "crop_to_bounding_box/ExpandDims:output:0"
      input: "^crop_to_bounding_box/Assert/Assert"
      input: "^crop_to_bounding_box/Assert_1/Assert"
      input: "^crop_to_bounding_box/Assert_2/Assert"
      input: "^crop_to_bounding_box/Assert_3/Assert"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@crop_to_bounding_box/ExpandDims"
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/stack/0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/stack/3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/stack"
      op: "Pack"
      input: "crop_to_bounding_box/stack/0:output:0"
      input: "strided_slice:output:0"
      input: "strided_slice_1:output:0"
      input: "crop_to_bounding_box/stack/3:output:0"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\377\377\377\377\000\001\000\000\000\001\000\000\377\377\377\377"
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/Slice"
      op: "Slice"
      input: "crop_to_bounding_box/control_dependency:output:0"
      input: "crop_to_bounding_box/stack:output:0"
      input: "crop_to_bounding_box/stack_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box/Squeeze"
      op: "Squeeze"
      input: "crop_to_bounding_box/Slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right_1/control_dependency"
      op: "Identity"
      input: "arg4"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@arg4"
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right_1/random_uniform/shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right_1/random_uniform/min"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right_1/random_uniform/max"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right_1/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "random_flip_left_right_1/random_uniform/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 87654321
        }
      }
      attr {
        key: "seed2"
        value {
          i: 1050755575
        }
      }
    }
    node_def {
      name: "random_flip_left_right_1/random_uniform/sub"
      op: "Sub"
      input: "random_flip_left_right_1/random_uniform/max:output:0"
      input: "random_flip_left_right_1/random_uniform/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_flip_left_right_1/random_uniform/mul"
      op: "Mul"
      input: "random_flip_left_right_1/random_uniform/RandomUniform:output:0"
      input: "random_flip_left_right_1/random_uniform/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_flip_left_right_1/random_uniform"
      op: "Add"
      input: "random_flip_left_right_1/random_uniform/mul:z:0"
      input: "random_flip_left_right_1/random_uniform/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_flip_left_right_1/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right_1/Less"
      op: "Less"
      input: "random_flip_left_right_1/random_uniform:z:0"
      input: "random_flip_left_right_1/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_flip_left_right_1/Switch"
      op: "Switch"
      input: "random_flip_left_right_1/Less:z:0"
      input: "random_flip_left_right_1/Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "random_flip_left_right_1/switch_t"
      op: "Identity"
      input: "random_flip_left_right_1/Switch:output_true:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "random_flip_left_right_1/switch_f"
      op: "Identity"
      input: "random_flip_left_right_1/Switch:output_false:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "random_flip_left_right_1/pred_id"
      op: "Identity"
      input: "random_flip_left_right_1/Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "random_flip_left_right_1/ReverseV2/axis"
      op: "Const"
      input: "^random_flip_left_right_1/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right_1/ReverseV2"
      op: "ReverseV2"
      input: "random_flip_left_right_1/ReverseV2/Switch:output_true:0"
      input: "random_flip_left_right_1/ReverseV2/axis:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "random_flip_left_right_1/ReverseV2/Switch"
      op: "Switch"
      input: "random_flip_left_right_1/control_dependency:output:0"
      input: "random_flip_left_right_1/pred_id:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@arg4"
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right_1/Switch_1"
      op: "Switch"
      input: "random_flip_left_right_1/control_dependency:output:0"
      input: "random_flip_left_right_1/pred_id:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@arg4"
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right_1/Merge"
      op: "Merge"
      input: "random_flip_left_right_1/Switch_1:output_false:0"
      input: "random_flip_left_right_1/ReverseV2:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "resize_images_1/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "resize_images_1/ExpandDims"
      op: "ExpandDims"
      input: "random_flip_left_right_1/Merge:output:0"
      input: "resize_images_1/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "resize_images_1/size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\001\000\000\036\001\000\000"
          }
        }
      }
    }
    node_def {
      name: "resize_images_1/ResizeArea"
      op: "ResizeArea"
      input: "resize_images_1/ExpandDims:output:0"
      input: "resize_images_1/size:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "align_corners"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "resize_images_1/Squeeze"
      op: "Squeeze"
      input: "resize_images_1/ResizeArea:resized_images:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "random_uniform_1/shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node_def {
      name: "random_uniform_1/min"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "random_uniform_1/max"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 31.0
          }
        }
      }
    }
    node_def {
      name: "random_uniform_1/RandomUniform"
      op: "RandomUniform"
      input: "random_uniform_1/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 87654321
        }
      }
      attr {
        key: "seed2"
        value {
          i: 1050755575
        }
      }
    }
    node_def {
      name: "random_uniform_1/sub"
      op: "Sub"
      input: "random_uniform_1/max:output:0"
      input: "random_uniform_1/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_uniform_1/mul"
      op: "Mul"
      input: "random_uniform_1/RandomUniform:output:0"
      input: "random_uniform_1/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_uniform_1"
      op: "Add"
      input: "random_uniform_1/mul:z:0"
      input: "random_uniform_1/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Floor_1"
      op: "Floor"
      input: "random_uniform_1:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Cast_1"
      op: "Cast"
      input: "Floor_1:y:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_2"
      op: "StridedSlice"
      input: "Cast_1:y:0"
      input: "strided_slice_2/stack:output:0"
      input: "strided_slice_2/stack_1:output:0"
      input: "strided_slice_2/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_3"
      op: "StridedSlice"
      input: "Cast_1:y:0"
      input: "strided_slice_3/stack:output:0"
      input: "strided_slice_3/stack_1:output:0"
      input: "strided_slice_3/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/ExpandDims"
      op: "ExpandDims"
      input: "resize_images_1/Squeeze:output:0"
      input: "crop_to_bounding_box_1/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/GreaterEqual"
      op: "GreaterEqual"
      input: "strided_slice_3:output:0"
      input: "crop_to_bounding_box_1/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/Assert/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "offset_width must be >= 0."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/Assert/Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "offset_width must be >= 0."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/Assert/Assert"
      op: "Assert"
      input: "crop_to_bounding_box_1/GreaterEqual:z:0"
      input: "crop_to_bounding_box_1/Assert/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/GreaterEqual_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/GreaterEqual_1"
      op: "GreaterEqual"
      input: "strided_slice_2:output:0"
      input: "crop_to_bounding_box_1/GreaterEqual_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/Assert_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "offset_height must be >= 0."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/Assert_1/Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "offset_height must be >= 0."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/Assert_1/Assert"
      op: "Assert"
      input: "crop_to_bounding_box_1/GreaterEqual_1:z:0"
      input: "crop_to_bounding_box_1/Assert_1/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/add/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/add"
      op: "Add"
      input: "crop_to_bounding_box_1/add/x:output:0"
      input: "strided_slice_3:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/LessEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 286
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/LessEqual"
      op: "LessEqual"
      input: "crop_to_bounding_box_1/add:z:0"
      input: "crop_to_bounding_box_1/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/Assert_2/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "width must be >= target + offset."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/Assert_2/Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "width must be >= target + offset."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/Assert_2/Assert"
      op: "Assert"
      input: "crop_to_bounding_box_1/LessEqual:z:0"
      input: "crop_to_bounding_box_1/Assert_2/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/add_1/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/add_1"
      op: "Add"
      input: "crop_to_bounding_box_1/add_1/x:output:0"
      input: "strided_slice_2:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/LessEqual_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 286
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/LessEqual_1"
      op: "LessEqual"
      input: "crop_to_bounding_box_1/add_1:z:0"
      input: "crop_to_bounding_box_1/LessEqual_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/Assert_3/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "height must be >= target + offset."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/Assert_3/Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "height must be >= target + offset."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/Assert_3/Assert"
      op: "Assert"
      input: "crop_to_bounding_box_1/LessEqual_1:z:0"
      input: "crop_to_bounding_box_1/Assert_3/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/control_dependency"
      op: "Identity"
      input: "crop_to_bounding_box_1/ExpandDims:output:0"
      input: "^crop_to_bounding_box_1/Assert/Assert"
      input: "^crop_to_bounding_box_1/Assert_1/Assert"
      input: "^crop_to_bounding_box_1/Assert_2/Assert"
      input: "^crop_to_bounding_box_1/Assert_3/Assert"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@crop_to_bounding_box_1/ExpandDims"
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/stack/0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/stack/3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/stack"
      op: "Pack"
      input: "crop_to_bounding_box_1/stack/0:output:0"
      input: "strided_slice_2:output:0"
      input: "strided_slice_3:output:0"
      input: "crop_to_bounding_box_1/stack/3:output:0"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\377\377\377\377\000\001\000\000\000\001\000\000\377\377\377\377"
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/Slice"
      op: "Slice"
      input: "crop_to_bounding_box_1/control_dependency:output:0"
      input: "crop_to_bounding_box_1/stack:output:0"
      input: "crop_to_bounding_box_1/stack_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_1/Squeeze"
      op: "Squeeze"
      input: "crop_to_bounding_box_1/Slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right_2/control_dependency"
      op: "Identity"
      input: "arg5"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@arg5"
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right_2/random_uniform/shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right_2/random_uniform/min"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right_2/random_uniform/max"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 1.0
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right_2/random_uniform/RandomUniform"
      op: "RandomUniform"
      input: "random_flip_left_right_2/random_uniform/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 87654321
        }
      }
      attr {
        key: "seed2"
        value {
          i: 1050755575
        }
      }
    }
    node_def {
      name: "random_flip_left_right_2/random_uniform/sub"
      op: "Sub"
      input: "random_flip_left_right_2/random_uniform/max:output:0"
      input: "random_flip_left_right_2/random_uniform/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_flip_left_right_2/random_uniform/mul"
      op: "Mul"
      input: "random_flip_left_right_2/random_uniform/RandomUniform:output:0"
      input: "random_flip_left_right_2/random_uniform/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_flip_left_right_2/random_uniform"
      op: "Add"
      input: "random_flip_left_right_2/random_uniform/mul:z:0"
      input: "random_flip_left_right_2/random_uniform/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_flip_left_right_2/Less/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.5
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right_2/Less"
      op: "Less"
      input: "random_flip_left_right_2/random_uniform:z:0"
      input: "random_flip_left_right_2/Less/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_flip_left_right_2/Switch"
      op: "Switch"
      input: "random_flip_left_right_2/Less:z:0"
      input: "random_flip_left_right_2/Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "random_flip_left_right_2/switch_t"
      op: "Identity"
      input: "random_flip_left_right_2/Switch:output_true:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "random_flip_left_right_2/switch_f"
      op: "Identity"
      input: "random_flip_left_right_2/Switch:output_false:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "random_flip_left_right_2/pred_id"
      op: "Identity"
      input: "random_flip_left_right_2/Less:z:0"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
    }
    node_def {
      name: "random_flip_left_right_2/ReverseV2/axis"
      op: "Const"
      input: "^random_flip_left_right_2/switch_t"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right_2/ReverseV2"
      op: "ReverseV2"
      input: "random_flip_left_right_2/ReverseV2/Switch:output_true:0"
      input: "random_flip_left_right_2/ReverseV2/axis:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "random_flip_left_right_2/ReverseV2/Switch"
      op: "Switch"
      input: "random_flip_left_right_2/control_dependency:output:0"
      input: "random_flip_left_right_2/pred_id:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@arg5"
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right_2/Switch_1"
      op: "Switch"
      input: "random_flip_left_right_2/control_dependency:output:0"
      input: "random_flip_left_right_2/pred_id:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@arg5"
          }
        }
      }
    }
    node_def {
      name: "random_flip_left_right_2/Merge"
      op: "Merge"
      input: "random_flip_left_right_2/Switch_1:output_false:0"
      input: "random_flip_left_right_2/ReverseV2:output:0"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "resize_images_2/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "resize_images_2/ExpandDims"
      op: "ExpandDims"
      input: "random_flip_left_right_2/Merge:output:0"
      input: "resize_images_2/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "resize_images_2/size"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\036\001\000\000\036\001\000\000"
          }
        }
      }
    }
    node_def {
      name: "resize_images_2/ResizeArea"
      op: "ResizeArea"
      input: "resize_images_2/ExpandDims:output:0"
      input: "resize_images_2/size:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "align_corners"
        value {
          b: false
        }
      }
    }
    node_def {
      name: "resize_images_2/Squeeze"
      op: "Squeeze"
      input: "resize_images_2/ResizeArea:resized_images:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    node_def {
      name: "random_uniform_2/shape"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node_def {
      name: "random_uniform_2/min"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
    }
    node_def {
      name: "random_uniform_2/max"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 31.0
          }
        }
      }
    }
    node_def {
      name: "random_uniform_2/RandomUniform"
      op: "RandomUniform"
      input: "random_uniform_2/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "seed"
        value {
          i: 87654321
        }
      }
      attr {
        key: "seed2"
        value {
          i: 1050755575
        }
      }
    }
    node_def {
      name: "random_uniform_2/sub"
      op: "Sub"
      input: "random_uniform_2/max:output:0"
      input: "random_uniform_2/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_uniform_2/mul"
      op: "Mul"
      input: "random_uniform_2/RandomUniform:output:0"
      input: "random_uniform_2/sub:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "random_uniform_2"
      op: "Add"
      input: "random_uniform_2/mul:z:0"
      input: "random_uniform_2/min:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Floor_2"
      op: "Floor"
      input: "random_uniform_2:z:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "Cast_2"
      op: "Cast"
      input: "Floor_2:y:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "strided_slice_4/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "strided_slice_4/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_4/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_4"
      op: "StridedSlice"
      input: "Cast_2:y:0"
      input: "strided_slice_4/stack:output:0"
      input: "strided_slice_4/stack_1:output:0"
      input: "strided_slice_4/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "strided_slice_5/stack"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_5/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 2
          }
        }
      }
    }
    node_def {
      name: "strided_slice_5/stack_2"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node_def {
      name: "strided_slice_5"
      op: "StridedSlice"
      input: "Cast_2:y:0"
      input: "strided_slice_5/stack:output:0"
      input: "strided_slice_5/stack_1:output:0"
      input: "strided_slice_5/stack_2:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "begin_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "ellipsis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "end_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "new_axis_mask"
        value {
          i: 0
        }
      }
      attr {
        key: "shrink_axis_mask"
        value {
          i: 1
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/ExpandDims/dim"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/ExpandDims"
      op: "ExpandDims"
      input: "resize_images_2/Squeeze:output:0"
      input: "crop_to_bounding_box_2/ExpandDims/dim:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/GreaterEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/GreaterEqual"
      op: "GreaterEqual"
      input: "strided_slice_5:output:0"
      input: "crop_to_bounding_box_2/GreaterEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/Assert/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "offset_width must be >= 0."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/Assert/Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "offset_width must be >= 0."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/Assert/Assert"
      op: "Assert"
      input: "crop_to_bounding_box_2/GreaterEqual:z:0"
      input: "crop_to_bounding_box_2/Assert/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/GreaterEqual_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/GreaterEqual_1"
      op: "GreaterEqual"
      input: "strided_slice_4:output:0"
      input: "crop_to_bounding_box_2/GreaterEqual_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/Assert_1/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "offset_height must be >= 0."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/Assert_1/Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "offset_height must be >= 0."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/Assert_1/Assert"
      op: "Assert"
      input: "crop_to_bounding_box_2/GreaterEqual_1:z:0"
      input: "crop_to_bounding_box_2/Assert_1/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/add/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/add"
      op: "Add"
      input: "crop_to_bounding_box_2/add/x:output:0"
      input: "strided_slice_5:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/LessEqual/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 286
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/LessEqual"
      op: "LessEqual"
      input: "crop_to_bounding_box_2/add:z:0"
      input: "crop_to_bounding_box_2/LessEqual/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/Assert_2/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "width must be >= target + offset."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/Assert_2/Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "width must be >= target + offset."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/Assert_2/Assert"
      op: "Assert"
      input: "crop_to_bounding_box_2/LessEqual:z:0"
      input: "crop_to_bounding_box_2/Assert_2/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/add_1/x"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 256
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/add_1"
      op: "Add"
      input: "crop_to_bounding_box_2/add_1/x:output:0"
      input: "strided_slice_4:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/LessEqual_1/y"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 286
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/LessEqual_1"
      op: "LessEqual"
      input: "crop_to_bounding_box_2/add_1:z:0"
      input: "crop_to_bounding_box_2/LessEqual_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/Assert_3/Const"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "height must be >= target + offset."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/Assert_3/Assert/data_0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "height must be >= target + offset."
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/Assert_3/Assert"
      op: "Assert"
      input: "crop_to_bounding_box_2/LessEqual_1:z:0"
      input: "crop_to_bounding_box_2/Assert_3/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/control_dependency"
      op: "Identity"
      input: "crop_to_bounding_box_2/ExpandDims:output:0"
      input: "^crop_to_bounding_box_2/Assert/Assert"
      input: "^crop_to_bounding_box_2/Assert_1/Assert"
      input: "^crop_to_bounding_box_2/Assert_2/Assert"
      input: "^crop_to_bounding_box_2/Assert_3/Assert"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@crop_to_bounding_box_2/ExpandDims"
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/stack/0"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/stack/3"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/stack"
      op: "Pack"
      input: "crop_to_bounding_box_2/stack/0:output:0"
      input: "strided_slice_4:output:0"
      input: "strided_slice_5:output:0"
      input: "crop_to_bounding_box_2/stack/3:output:0"
      attr {
        key: "N"
        value {
          i: 4
        }
      }
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/stack_1"
      op: "Const"
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 4
              }
            }
            tensor_content: "\377\377\377\377\000\001\000\000\000\001\000\000\377\377\377\377"
          }
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/Slice"
      op: "Slice"
      input: "crop_to_bounding_box_2/control_dependency:output:0"
      input: "crop_to_bounding_box_2/stack:output:0"
      input: "crop_to_bounding_box_2/stack_1:output:0"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
    }
    node_def {
      name: "crop_to_bounding_box_2/Squeeze"
      op: "Squeeze"
      input: "crop_to_bounding_box_2/Slice:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "squeeze_dims"
        value {
          list {
            i: 0
          }
        }
      }
    }
    ret {
      key: "arg0"
      value: "arg0_0"
    }
    ret {
      key: "arg1"
      value: "arg1_0"
    }
    ret {
      key: "arg2"
      value: "arg2_0"
    }
    ret {
      key: "crop_to_bounding_box_1_squeeze"
      value: "crop_to_bounding_box_1/Squeeze:output:0"
    }
    ret {
      key: "crop_to_bounding_box_2_squeeze"
      value: "crop_to_bounding_box_2/Squeeze:output:0"
    }
    ret {
      key: "crop_to_bounding_box_squeeze"
      value: "crop_to_bounding_box/Squeeze:output:0"
    }
  }
  function {
    signature {
      name: "tf_next_func_e3E0PvaRl0c"
      input_arg {
        name: "arg0"
        type: DT_INT64
      }
      output_arg {
        name: "pyfunc"
        type: DT_INT32
      }
      output_arg {
        name: "pyfunc_0"
        type: DT_FLOAT
      }
      output_arg {
        name: "pyfunc_1"
        type: DT_FLOAT
      }
      output_arg {
        name: "pyfunc_2"
        type: DT_FLOAT
      }
      output_arg {
        name: "pyfunc_3"
        type: DT_FLOAT
      }
      output_arg {
        name: "pyfunc_4"
        type: DT_FLOAT
      }
      description: "A wrapper for Defun that facilitates shape inference."
      is_stateful: true
    }
    node_def {
      name: "PyFunc"
      op: "PyFunc"
      input: "arg0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT32
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "token"
        value {
          s: "pyfunc_1"
        }
      }
    }
    ret {
      key: "pyfunc"
      value: "PyFunc:output:0"
    }
    ret {
      key: "pyfunc_0"
      value: "PyFunc:output:1"
    }
    ret {
      key: "pyfunc_1"
      value: "PyFunc:output:2"
    }
    ret {
      key: "pyfunc_2"
      value: "PyFunc:output:3"
    }
    ret {
      key: "pyfunc_3"
      value: "PyFunc:output:4"
    }
    ret {
      key: "pyfunc_4"
      value: "PyFunc:output:5"
    }
  }
  function {
    signature {
      name: "tf_finalize_func_Lpot2pAvNXE"
      input_arg {
        name: "arg0"
        type: DT_INT64
      }
      output_arg {
        name: "pyfunc"
        type: DT_INT64
      }
      description: "A wrapper for Defun that facilitates shape inference."
      is_stateful: true
    }
    node_def {
      name: "PyFunc"
      op: "PyFunc"
      input: "arg0"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "token"
        value {
          s: "pyfunc_2"
        }
      }
    }
    ret {
      key: "pyfunc"
      value: "PyFunc:output:0"
    }
  }
  function {
    signature {
      name: "tf_map_func_oG4MWr3nQXA"
      input_arg {
        name: "arg0"
        type: DT_INT32
      }
      output_arg {
        name: "generatordataset"
        type: DT_VARIANT
      }
      description: "A wrapper for Defun that facilitates shape inference."
      is_stateful: true
    }
    node_def {
      name: "GeneratorDataset"
      op: "GeneratorDataset"
      input: "arg0"
      attr {
        key: "Tfinalize_func_args"
        value {
          list {
          }
        }
      }
      attr {
        key: "Tinit_func_args"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "Tnext_func_args"
        value {
          list {
          }
        }
      }
      attr {
        key: "finalize_func"
        value {
          func {
            name: "tf_finalize_func_Lpot2pAvNXE"
          }
        }
      }
      attr {
        key: "init_func"
        value {
          func {
            name: "tf_init_func_OfHmkjGNQoA"
          }
        }
      }
      attr {
        key: "next_func"
        value {
          func {
            name: "tf_next_func_e3E0PvaRl0c"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
            shape {
            }
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
              dim {
                size: 1
              }
            }
            shape {
              dim {
                size: 256
              }
              dim {
                size: 256
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_INT32
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
          }
        }
      }
    }
    ret {
      key: "generatordataset"
      value: "GeneratorDataset:handle:0"
    }
  }
}
versions {
  producer: 26
  min_consumer: 12
}
